
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dc6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00001dc6  00001e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c7  008000b8  008000b8  00001ed2  2**0
                  ALLOC
  3 .eeprom       000001ef  00810000  00810000  00001ed2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_aranges 00000020  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004e1  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f4  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a6  00000000  00000000  00003bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbe  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00004f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d48  00000000  00000000  00005777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000064bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	c0 c2       	rjmp	.+1408   	; 0x594 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e6 ec       	ldi	r30, 0xC6	; 198
      3a:	fd e1       	ldi	r31, 0x1D	; 29
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a8 3b       	cpi	r26, 0xB8	; 184
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	13 e0       	ldi	r17, 0x03	; 3
      4a:	a8 eb       	ldi	r26, 0xB8	; 184
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	af 37       	cpi	r26, 0x7F	; 127
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	b3 d7       	rcall	.+3942   	; 0xfc0 <main>
      5a:	b3 ce       	rjmp	.-666    	; 0xfffffdc2 <__eeprom_end+0xff7efbd3>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <wait>:
int LWM;
int HWM;

void wait(void) {
	for (int i = -32000; i < 32000; i++);
}
      5e:	08 95       	ret

00000060 <lcd_send_data>:

void lcd_send_data(byte data) {
	LCD_PORT &= ~(1 << LCD_CE_PIN);
      60:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT |= (1 << LCD_DC_PIN);
      62:	c1 9a       	sbi	0x18, 1	; 24
	SPDR = data;
      64:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      66:	77 9b       	sbis	0x0e, 7	; 14
      68:	fe cf       	rjmp	.-4      	; 0x66 <lcd_send_data+0x6>
	LCD_PORT |= (1 << LCD_CE_PIN);
      6a:	c2 9a       	sbi	0x18, 2	; 24
}
      6c:	08 95       	ret

0000006e <lcd_send_cmd>:

void lcd_send_cmd(byte data) {
	LCD_PORT &= ~(1 << LCD_CE_PIN);
      6e:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT &= ~(1 << LCD_DC_PIN);
      70:	c1 98       	cbi	0x18, 1	; 24
	SPDR = data;
      72:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      74:	77 9b       	sbis	0x0e, 7	; 14
      76:	fe cf       	rjmp	.-4      	; 0x74 <lcd_send_cmd+0x6>
	LCD_PORT |= (1 << LCD_CE_PIN);
      78:	c2 9a       	sbi	0x18, 2	; 24
}
      7a:	08 95       	ret

0000007c <lcd_update>:
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
	LWM = 0;
	HWM = LCD_CACHE_SIZE - 1;
}

void lcd_update(void) {
      7c:	0f 93       	push	r16
      7e:	1f 93       	push	r17
      80:	cf 93       	push	r28
      82:	df 93       	push	r29
	int i;
	if (LWM < 0) LWM = 0;
      84:	80 91 7d 03 	lds	r24, 0x037D
      88:	90 91 7e 03 	lds	r25, 0x037E
      8c:	97 ff       	sbrs	r25, 7
      8e:	05 c0       	rjmp	.+10     	; 0x9a <lcd_update+0x1e>
      90:	10 92 7e 03 	sts	0x037E, r1
      94:	10 92 7d 03 	sts	0x037D, r1
      98:	09 c0       	rjmp	.+18     	; 0xac <lcd_update+0x30>
	else if (LWM >= LCD_CACHE_SIZE) LWM = LCD_CACHE_SIZE - 1;
      9a:	88 5f       	subi	r24, 0xF8	; 248
      9c:	91 40       	sbci	r25, 0x01	; 1
      9e:	34 f0       	brlt	.+12     	; 0xac <lcd_update+0x30>
      a0:	87 ef       	ldi	r24, 0xF7	; 247
      a2:	91 e0       	ldi	r25, 0x01	; 1
      a4:	90 93 7e 03 	sts	0x037E, r25
      a8:	80 93 7d 03 	sts	0x037D, r24
	if (HWM < 0) HWM = 0;
      ac:	80 91 7b 03 	lds	r24, 0x037B
      b0:	90 91 7c 03 	lds	r25, 0x037C
      b4:	97 ff       	sbrs	r25, 7
      b6:	05 c0       	rjmp	.+10     	; 0xc2 <lcd_update+0x46>
      b8:	10 92 7c 03 	sts	0x037C, r1
      bc:	10 92 7b 03 	sts	0x037B, r1
      c0:	09 c0       	rjmp	.+18     	; 0xd4 <lcd_update+0x58>
	else if (HWM >= LCD_CACHE_SIZE) HWM = LCD_CACHE_SIZE - 1;
      c2:	88 5f       	subi	r24, 0xF8	; 248
      c4:	91 40       	sbci	r25, 0x01	; 1
      c6:	34 f0       	brlt	.+12     	; 0xd4 <lcd_update+0x58>
      c8:	87 ef       	ldi	r24, 0xF7	; 247
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	90 93 7c 03 	sts	0x037C, r25
      d0:	80 93 7b 03 	sts	0x037B, r24
	lcd_send_cmd(0x45);
	lcd_send_cmd(0x20);

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
      d4:	80 91 7d 03 	lds	r24, 0x037D
      d8:	90 91 7e 03 	lds	r25, 0x037E
      dc:	64 e5       	ldi	r22, 0x54	; 84
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	12 de       	rcall	.-988    	; 0xfffffd06 <__eeprom_end+0xff7efb17>
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	c4 df       	rcall	.-120    	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x40 | (LWM / LCD_W));
      e6:	80 91 7d 03 	lds	r24, 0x037D
      ea:	90 91 7e 03 	lds	r25, 0x037E
      ee:	64 e5       	ldi	r22, 0x54	; 84
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	09 de       	rcall	.-1006   	; 0xfffffd06 <__eeprom_end+0xff7efb17>
      f4:	86 2f       	mov	r24, r22
      f6:	80 64       	ori	r24, 0x40	; 64
      f8:	ba df       	rcall	.-140    	; 0x6e <lcd_send_cmd>
	for (i = LWM; i <= HWM; i++) {
      fa:	c0 91 7d 03 	lds	r28, 0x037D
      fe:	d0 91 7e 03 	lds	r29, 0x037E
     102:	8e 01       	movw	r16, r28
     104:	0d 57       	subi	r16, 0x7D	; 125
     106:	1e 4f       	sbci	r17, 0xFE	; 254
     108:	05 c0       	rjmp	.+10     	; 0x114 <lcd_update+0x98>
		lcd_send_data(LCD_CACHE[i]);
     10a:	f8 01       	movw	r30, r16
     10c:	81 91       	ld	r24, Z+
     10e:	8f 01       	movw	r16, r30
     110:	a7 df       	rcall	.-178    	; 0x60 <lcd_send_data>

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
	lcd_send_cmd(0x40 | (LWM / LCD_W));
	for (i = LWM; i <= HWM; i++) {
     112:	21 96       	adiw	r28, 0x01	; 1
     114:	80 91 7b 03 	lds	r24, 0x037B
     118:	90 91 7c 03 	lds	r25, 0x037C
     11c:	8c 17       	cp	r24, r28
     11e:	9d 07       	cpc	r25, r29
     120:	a4 f7       	brge	.-24     	; 0x10a <lcd_update+0x8e>
		lcd_send_data(LCD_CACHE[i]);
	}

	#endif

	LWM = LCD_CACHE_SIZE - 1;
     122:	87 ef       	ldi	r24, 0xF7	; 247
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	90 93 7e 03 	sts	0x037E, r25
     12a:	80 93 7d 03 	sts	0x037D, r24
	HWM = 0;
     12e:	10 92 7c 03 	sts	0x037C, r1
     132:	10 92 7b 03 	sts	0x037B, r1
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	1f 91       	pop	r17
     13c:	0f 91       	pop	r16
     13e:	08 95       	ret

00000140 <lcd_pixel>:
	lcd_send_cmd(0x0C);
	lcd_clear();
	lcd_update();
}

void lcd_pixel(byte x, byte y, Color c) {
     140:	58 2f       	mov	r21, r24
	int index;
	byte offset, data;
	if (x >= LCD_W || y >= LCD_H) return;
     142:	84 35       	cpi	r24, 0x54	; 84
     144:	08 f0       	brcs	.+2      	; 0x148 <lcd_pixel+0x8>
     146:	58 c0       	rjmp	.+176    	; 0x1f8 <lcd_pixel+0xb8>
     148:	60 33       	cpi	r22, 0x30	; 48
     14a:	08 f0       	brcs	.+2      	; 0x14e <lcd_pixel+0xe>
     14c:	55 c0       	rjmp	.+170    	; 0x1f8 <lcd_pixel+0xb8>
	index = ((y / 8) *84) + x;
     14e:	86 2f       	mov	r24, r22
     150:	86 95       	lsr	r24
     152:	86 95       	lsr	r24
     154:	86 95       	lsr	r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	82 9f       	mul	r24, r18
     15e:	d0 01       	movw	r26, r0
     160:	83 9f       	mul	r24, r19
     162:	b0 0d       	add	r27, r0
     164:	92 9f       	mul	r25, r18
     166:	b0 0d       	add	r27, r0
     168:	11 24       	eor	r1, r1
     16a:	a5 0f       	add	r26, r21
     16c:	b1 1d       	adc	r27, r1
	offset = y - ((y / 8) *8);
     16e:	23 e0       	ldi	r18, 0x03	; 3
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a 95       	dec	r18
     176:	e1 f7       	brne	.-8      	; 0x170 <lcd_pixel+0x30>
     178:	68 1b       	sub	r22, r24
	data = LCD_CACHE[index];
     17a:	fd 01       	movw	r30, r26
     17c:	ed 57       	subi	r30, 0x7D	; 125
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	20 81       	ld	r18, Z
	if (c == BLACK) {
     182:	41 30       	cpi	r20, 0x01	; 1
     184:	49 f4       	brne	.+18     	; 0x198 <lcd_pixel+0x58>
		data |= (0x01 << offset);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_pixel+0x50>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <lcd_pixel+0x4c>
     194:	28 2b       	or	r18, r24
     196:	16 c0       	rjmp	.+44     	; 0x1c4 <lcd_pixel+0x84>
	} 
	if (c == WHITE) {
     198:	44 23       	and	r20, r20
     19a:	51 f4       	brne	.+20     	; 0x1b0 <lcd_pixel+0x70>
		data &= (~(0x01 << offset));
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <lcd_pixel+0x66>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <lcd_pixel+0x62>
     1aa:	80 95       	com	r24
     1ac:	28 23       	and	r18, r24
     1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <lcd_pixel+0x84>
	}
	if (c == INVERT) {
     1b0:	42 30       	cpi	r20, 0x02	; 2
     1b2:	41 f4       	brne	.+16     	; 0x1c4 <lcd_pixel+0x84>
        data ^= (0x01 << offset);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_pixel+0x7e>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <lcd_pixel+0x7a>
     1c2:	28 27       	eor	r18, r24
    }

	LCD_CACHE[index] = data;
     1c4:	fd 01       	movw	r30, r26
     1c6:	ed 57       	subi	r30, 0x7D	; 125
     1c8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ca:	20 83       	st	Z, r18
	if (index < LWM) {
     1cc:	80 91 7d 03 	lds	r24, 0x037D
     1d0:	90 91 7e 03 	lds	r25, 0x037E
     1d4:	a8 17       	cp	r26, r24
     1d6:	b9 07       	cpc	r27, r25
     1d8:	24 f4       	brge	.+8      	; 0x1e2 <lcd_pixel+0xa2>
		LWM = index;
     1da:	b0 93 7e 03 	sts	0x037E, r27
     1de:	a0 93 7d 03 	sts	0x037D, r26
	}

	if (index > HWM) {
     1e2:	80 91 7b 03 	lds	r24, 0x037B
     1e6:	90 91 7c 03 	lds	r25, 0x037C
     1ea:	8a 17       	cp	r24, r26
     1ec:	9b 07       	cpc	r25, r27
     1ee:	24 f4       	brge	.+8      	; 0x1f8 <lcd_pixel+0xb8>
		HWM = index;
     1f0:	b0 93 7c 03 	sts	0x037C, r27
     1f4:	a0 93 7b 03 	sts	0x037B, r26
     1f8:	08 95       	ret

000001fa <min>:
	}
}

int min(int a, int b) {
     1fa:	ac 01       	movw	r20, r24
     1fc:	9b 01       	movw	r18, r22
     1fe:	46 17       	cp	r20, r22
     200:	57 07       	cpc	r21, r23
     202:	0c f4       	brge	.+2      	; 0x206 <min+0xc>
     204:	9a 01       	movw	r18, r20
	if (a > b) return b;
	return a;
}
     206:	c9 01       	movw	r24, r18
     208:	08 95       	ret

0000020a <max>:

int max(int a, int b) {
     20a:	ac 01       	movw	r20, r24
     20c:	9b 01       	movw	r18, r22
     20e:	64 17       	cp	r22, r20
     210:	75 07       	cpc	r23, r21
     212:	0c f4       	brge	.+2      	; 0x216 <max+0xc>
     214:	9a 01       	movw	r18, r20
	if (a > b) return a;
	return b;
}
     216:	c9 01       	movw	r24, r18
     218:	08 95       	ret

0000021a <lcd_h_line>:

void lcd_h_line(byte x0, byte y0, byte x1, Color c) {
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	d6 2e       	mov	r13, r22
     22a:	f4 2e       	mov	r15, r20
     22c:	e2 2e       	mov	r14, r18
	for (int i = min(x0, x1); i <= max(x0, x1); i++) lcd_pixel(i, y0, c);
     22e:	08 2f       	mov	r16, r24
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	84 2f       	mov	r24, r20
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	9c 01       	movw	r18, r24
     238:	e9 01       	movw	r28, r18
     23a:	02 17       	cp	r16, r18
     23c:	13 07       	cpc	r17, r19
     23e:	3c f4       	brge	.+14     	; 0x24e <lcd_h_line+0x34>
     240:	e8 01       	movw	r28, r16
     242:	05 c0       	rjmp	.+10     	; 0x24e <lcd_h_line+0x34>
     244:	8c 2f       	mov	r24, r28
     246:	6d 2d       	mov	r22, r13
     248:	4e 2d       	mov	r20, r14
     24a:	7a df       	rcall	.-268    	; 0x140 <lcd_pixel>
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	8f 2d       	mov	r24, r15
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9c 01       	movw	r18, r24
     254:	20 17       	cp	r18, r16
     256:	31 07       	cpc	r19, r17
     258:	0c f4       	brge	.+2      	; 0x25c <lcd_h_line+0x42>
     25a:	98 01       	movw	r18, r16
     25c:	2c 17       	cp	r18, r28
     25e:	3d 07       	cpc	r19, r29
     260:	8c f7       	brge	.-30     	; 0x244 <lcd_h_line+0x2a>
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	df 90       	pop	r13
     270:	08 95       	ret

00000272 <lcd_v_line>:

void lcd_v_line(byte x0, byte y0, byte y1, Color c) {
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	d8 2e       	mov	r13, r24
     282:	f4 2e       	mov	r15, r20
     284:	e2 2e       	mov	r14, r18
	for (int i = min(y0, y1); i <= max(y0, y1); i++) lcd_pixel(x0, i, c);
     286:	06 2f       	mov	r16, r22
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	24 2f       	mov	r18, r20
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	c9 01       	movw	r24, r18
     290:	ec 01       	movw	r28, r24
     292:	08 17       	cp	r16, r24
     294:	19 07       	cpc	r17, r25
     296:	3c f4       	brge	.+14     	; 0x2a6 <lcd_v_line+0x34>
     298:	e8 01       	movw	r28, r16
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <lcd_v_line+0x34>
     29c:	8d 2d       	mov	r24, r13
     29e:	6c 2f       	mov	r22, r28
     2a0:	4e 2d       	mov	r20, r14
     2a2:	4e df       	rcall	.-356    	; 0x140 <lcd_pixel>
     2a4:	21 96       	adiw	r28, 0x01	; 1
     2a6:	8f 2d       	mov	r24, r15
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	9c 01       	movw	r18, r24
     2ac:	20 17       	cp	r18, r16
     2ae:	31 07       	cpc	r19, r17
     2b0:	0c f4       	brge	.+2      	; 0x2b4 <lcd_v_line+0x42>
     2b2:	98 01       	movw	r18, r16
     2b4:	2c 17       	cp	r18, r28
     2b6:	3d 07       	cpc	r19, r29
     2b8:	8c f7       	brge	.-30     	; 0x29c <lcd_v_line+0x2a>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	08 95       	ret

000002ca <lcd_line>:

void lcd_line(byte x1, byte y1, byte x2, byte y2, Color c) {
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	98 2e       	mov	r9, r24
     2ee:	86 2e       	mov	r8, r22
     2f0:	44 2e       	mov	r4, r20
     2f2:	52 2e       	mov	r5, r18
     2f4:	30 2e       	mov	r3, r16
	if (x1 == x2) {
     2f6:	84 17       	cp	r24, r20
     2f8:	21 f4       	brne	.+8      	; 0x302 <lcd_line+0x38>
		lcd_v_line(x1, y1, y2, c);
     2fa:	42 2f       	mov	r20, r18
     2fc:	20 2f       	mov	r18, r16
     2fe:	b9 df       	rcall	.-142    	; 0x272 <lcd_v_line>
     300:	61 c0       	rjmp	.+194    	; 0x3c4 <lcd_line+0xfa>
		return;
	}

	if (y1 == y2) {
     302:	62 17       	cp	r22, r18
     304:	19 f4       	brne	.+6      	; 0x30c <lcd_line+0x42>
		lcd_h_line(x1, y1, x2, c);
     306:	20 2f       	mov	r18, r16
     308:	88 df       	rcall	.-240    	; 0x21a <lcd_h_line>
     30a:	5c c0       	rjmp	.+184    	; 0x3c4 <lcd_line+0xfa>
		return;
	}
	int dx, dy, stepx, stepy, fraction;
	dy = y2 - y1;
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	26 1b       	sub	r18, r22
     310:	31 09       	sbc	r19, r1
	dx = x2 - x1;
     312:	84 2f       	mov	r24, r20
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	89 19       	sub	r24, r9
     318:	91 09       	sbc	r25, r1
	if (dy < 0) {
     31a:	37 fd       	sbrc	r19, 7
     31c:	04 c0       	rjmp	.+8      	; 0x326 <lcd_line+0x5c>
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	6e 2e       	mov	r6, r30
     322:	71 2c       	mov	r7, r1
     324:	06 c0       	rjmp	.+12     	; 0x332 <lcd_line+0x68>
		dy = -dy;
     326:	30 95       	com	r19
     328:	21 95       	neg	r18
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	66 24       	eor	r6, r6
     32e:	6a 94       	dec	r6
     330:	76 2c       	mov	r7, r6
		stepy = -1;
	} else {
		stepy = 1;
	}
	if (dx < 0) {
     332:	97 fd       	sbrc	r25, 7
     334:	04 c0       	rjmp	.+8      	; 0x33e <lcd_line+0x74>
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	a7 2e       	mov	r10, r23
     33a:	b1 2c       	mov	r11, r1
     33c:	06 c0       	rjmp	.+12     	; 0x34a <lcd_line+0x80>
		dx = -dx;
     33e:	90 95       	com	r25
     340:	81 95       	neg	r24
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	aa 24       	eor	r10, r10
     346:	aa 94       	dec	r10
     348:	ba 2c       	mov	r11, r10
		stepx = -1;
	} else {
		stepx = 1;
	}
	dx <<= 1;
     34a:	6c 01       	movw	r12, r24
     34c:	cc 0c       	add	r12, r12
     34e:	dd 1c       	adc	r13, r13
	dy <<= 1;
     350:	79 01       	movw	r14, r18
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
	if (dx > dy) {
     356:	ec 14       	cp	r14, r12
     358:	fd 04       	cpc	r15, r13
     35a:	d4 f4       	brge	.+52     	; 0x390 <lcd_line+0xc6>
		fraction = dy - (dx >> 1);
     35c:	c6 01       	movw	r24, r12
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	e7 01       	movw	r28, r14
     364:	c8 1b       	sub	r28, r24
     366:	d9 0b       	sbc	r29, r25
     368:	ba 2c       	mov	r11, r10
     36a:	1a 2d       	mov	r17, r10
     36c:	19 0d       	add	r17, r9
		while (x1 != x2) {
			if (fraction >= 0) {
     36e:	d7 fd       	sbrc	r29, 7
     370:	03 c0       	rjmp	.+6      	; 0x378 <lcd_line+0xae>
				y1 += stepy;
     372:	86 0c       	add	r8, r6
				fraction -= dx;
     374:	cc 19       	sub	r28, r12
     376:	dd 09       	sbc	r29, r13
			}
			x1 += stepx;
			fraction += dy;
			lcd_pixel(x1, y1, c);
     378:	81 2f       	mov	r24, r17
     37a:	68 2d       	mov	r22, r8
     37c:	43 2d       	mov	r20, r3
     37e:	e0 de       	rcall	.-576    	; 0x140 <lcd_pixel>
     380:	1b 0d       	add	r17, r11
	}
	dx <<= 1;
	dy <<= 1;
	if (dx > dy) {
		fraction = dy - (dx >> 1);
		while (x1 != x2) {
     382:	81 2f       	mov	r24, r17
     384:	8b 19       	sub	r24, r11
     386:	84 15       	cp	r24, r4
     388:	e9 f0       	breq	.+58     	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				y1 += stepy;
				fraction -= dx;
			}
			x1 += stepx;
			fraction += dy;
     38a:	ce 0d       	add	r28, r14
     38c:	df 1d       	adc	r29, r15
     38e:	ef cf       	rjmp	.-34     	; 0x36e <lcd_line+0xa4>
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
     390:	c7 01       	movw	r24, r14
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	e6 01       	movw	r28, r12
     398:	c8 1b       	sub	r28, r24
     39a:	d9 0b       	sbc	r29, r25
     39c:	06 2d       	mov	r16, r6
     39e:	16 2d       	mov	r17, r6
     3a0:	18 0d       	add	r17, r8
		while (y1 != y2) {
			if (fraction >= 0) {
     3a2:	d7 fd       	sbrc	r29, 7
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_line+0xe2>
				x1 += stepx;
     3a6:	9a 0c       	add	r9, r10
				fraction -= dy;
     3a8:	ce 19       	sub	r28, r14
     3aa:	df 09       	sbc	r29, r15
			}
			y1 += stepy;
			fraction += dx;
			lcd_pixel(x1, y1, c);
     3ac:	89 2d       	mov	r24, r9
     3ae:	61 2f       	mov	r22, r17
     3b0:	43 2d       	mov	r20, r3
     3b2:	c6 de       	rcall	.-628    	; 0x140 <lcd_pixel>
     3b4:	10 0f       	add	r17, r16
			fraction += dy;
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
		while (y1 != y2) {
     3b6:	81 2f       	mov	r24, r17
     3b8:	80 1b       	sub	r24, r16
     3ba:	85 15       	cp	r24, r5
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
			fraction += dx;
     3be:	cc 0d       	add	r28, r12
     3c0:	dd 1d       	adc	r29, r13
     3c2:	ef cf       	rjmp	.-34     	; 0x3a2 <lcd_line+0xd8>
			lcd_pixel(x1, y1, c);
		}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	4f 90       	pop	r4
     3e4:	3f 90       	pop	r3
     3e6:	08 95       	ret

000003e8 <dt_test>:
#define READ_DATA 0xBE
#define CONV_TIME 750
#define WRITE_SCRATCHPAD 0x4E

char dt_test(void) {
	unsigned char stack = SREG;
     3e8:	9f b7       	in	r25, 0x3f	; 63
	cli();
     3ea:	f8 94       	cli
	char dt;
	DT_DDR |= 1 << DT_SENSOR;
     3ec:	89 9a       	sbi	0x11, 1	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ee:	e8 ee       	ldi	r30, 0xE8	; 232
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <dt_test+0xa>
	_delay_us(500);
	DT_DDR &= ~(1 << DT_SENSOR);
     3f6:	89 98       	cbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3f8:	8a eb       	ldi	r24, 0xBA	; 186
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <dt_test+0x12>
	_delay_us(70);
	if ((DT_PIN & (1 << DT_SENSOR)) == 0) {
     3fe:	80 b3       	in	r24, 0x10	; 16
		dt = 1;
	} else {
		dt = 0;
	}
	SREG = stack;
     400:	9f bf       	out	0x3f, r25	; 63
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     402:	e8 e4       	ldi	r30, 0x48	; 72
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <dt_test+0x1e>
     40a:	86 95       	lsr	r24
     40c:	80 95       	com	r24
	_delay_us(420);
	return dt;
}
     40e:	81 70       	andi	r24, 0x01	; 1
     410:	08 95       	ret

00000412 <dt_rx>:

char dt_rx(void) {
	unsigned char stack = SREG;
     412:	2f b7       	in	r18, 0x3f	; 63
	cli();
     414:	f8 94       	cli
	char bit;
	DT_DDR |= 1 << DT_SENSOR;
     416:	89 9a       	sbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	8a 95       	dec	r24
     41c:	f1 f7       	brne	.-4      	; 0x41a <dt_rx+0x8>
	_delay_us(2);
	DT_DDR &= ~(1 << DT_SENSOR);
     41e:	89 98       	cbi	0x11, 1	; 17
     420:	85 e2       	ldi	r24, 0x25	; 37
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <dt_rx+0x10>
	_delay_us(14);
	bit = (DT_PIN & (1 << DT_SENSOR)) >> DT_SENSOR;
     426:	80 b3       	in	r24, 0x10	; 16
     428:	98 e7       	ldi	r25, 0x78	; 120
     42a:	9a 95       	dec	r25
     42c:	f1 f7       	brne	.-4      	; 0x42a <dt_rx+0x18>
	_delay_us(45);
	SREG = stack;
     42e:	2f bf       	out	0x3f, r18	; 63
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	82 70       	andi	r24, 0x02	; 2
     434:	90 70       	andi	r25, 0x00	; 0
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
	return bit;
}
     43a:	08 95       	ret

0000043c <dt_rx8>:

unsigned char dt_rx8(void) {
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	d0 e0       	ldi	r29, 0x00	; 0
	char c = 0;
	for (char i = 0; i < 8; i++) c |= dt_rx() << i;
     448:	e4 df       	rcall	.-56     	; 0x412 <dt_rx>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0c 2e       	mov	r0, r28
     44e:	02 c0       	rjmp	.+4      	; 0x454 <dt_rx8+0x18>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <dt_rx8+0x14>
     458:	18 2b       	or	r17, r24
     45a:	21 96       	adiw	r28, 0x01	; 1
     45c:	c8 30       	cpi	r28, 0x08	; 8
     45e:	d1 05       	cpc	r29, r1
     460:	99 f7       	brne	.-26     	; 0x448 <dt_rx8+0xc>
	return c;
}
     462:	81 2f       	mov	r24, r17
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	08 95       	ret

0000046c <dt_tx>:

void dt_tx(char b) {
	char stack = SREG;
     46c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     46e:	f8 94       	cli
	DT_DDR |= 1 << DT_SENSOR;
     470:	89 9a       	sbi	0x11, 1	; 17
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	9a 95       	dec	r25
     476:	f1 f7       	brne	.-4      	; 0x474 <dt_tx+0x8>
	_delay_us(2);
	if (b) DT_DDR &= ~(1 << DT_SENSOR);
     478:	81 11       	cpse	r24, r1
     47a:	89 98       	cbi	0x11, 1	; 17
     47c:	8d ea       	ldi	r24, 0xAD	; 173
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <dt_tx+0x12>
	_delay_us(65);
	DT_DDR &= ~(1 << DT_SENSOR);
     482:	89 98       	cbi	0x11, 1	; 17
	SREG = stack;
     484:	2f bf       	out	0x3f, r18	; 63
}
     486:	08 95       	ret

00000488 <dt_tx8>:

void dt_tx8(unsigned char b) {
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	d0 e0       	ldi	r29, 0x00	; 0
	for (char i = 0; i < 8; i++) {
		if ((b &(1 << i)) == (1 << i)) {
     498:	a1 e0       	ldi	r26, 0x01	; 1
     49a:	ea 2e       	mov	r14, r26
     49c:	f1 2c       	mov	r15, r1
     49e:	08 2f       	mov	r16, r24
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	97 01       	movw	r18, r14
     4a4:	0c 2e       	mov	r0, r28
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <dt_tx8+0x24>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <dt_tx8+0x20>
     4b0:	c9 01       	movw	r24, r18
     4b2:	80 23       	and	r24, r16
     4b4:	91 23       	and	r25, r17
     4b6:	82 17       	cp	r24, r18
     4b8:	93 07       	cpc	r25, r19
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <dt_tx8+0x38>
			dt_tx(1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <dt_tx8+0x3a>
		} else {
			dt_tx(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	d4 df       	rcall	.-88     	; 0x46c <dt_tx>
     4c4:	21 96       	adiw	r28, 0x01	; 1
	DT_DDR &= ~(1 << DT_SENSOR);
	SREG = stack;
}

void dt_tx8(unsigned char b) {
	for (char i = 0; i < 8; i++) {
     4c6:	c8 30       	cpi	r28, 0x08	; 8
     4c8:	d1 05       	cpc	r29, r1
     4ca:	59 f7       	brne	.-42     	; 0x4a2 <dt_tx8+0x1a>
			dt_tx(1);
		} else {
			dt_tx(0);
		}
	}
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <dt_convert>:

void dt_convert(void) {
	if (!dt_test()) return;
     4da:	86 df       	rcall	.-244    	; 0x3e8 <dt_test>
     4dc:	88 23       	and	r24, r24
     4de:	21 f0       	breq	.+8      	; 0x4e8 <dt_convert+0xe>
	dt_tx8(NOID);
     4e0:	8c ec       	ldi	r24, 0xCC	; 204
     4e2:	d2 df       	rcall	.-92     	; 0x488 <dt_tx8>
	dt_tx8(T_CONVERT);
     4e4:	84 e4       	ldi	r24, 0x44	; 68
     4e6:	d0 df       	rcall	.-96     	; 0x488 <dt_tx8>
     4e8:	08 95       	ret

000004ea <dt_read>:
	// then conversion delay
}

int dt_read(void) {
     4ea:	1f 93       	push	r17
	unsigned char l;
	unsigned int h = 0;
	if (!dt_test()) return 0;
     4ec:	7d df       	rcall	.-262    	; 0x3e8 <dt_test>
     4ee:	88 23       	and	r24, r24
     4f0:	19 f4       	brne	.+6      	; 0x4f8 <dt_read+0xe>
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <dt_read+0x28>
	dt_tx8(NOID);
     4f8:	8c ec       	ldi	r24, 0xCC	; 204
     4fa:	c6 df       	rcall	.-116    	; 0x488 <dt_tx8>
	dt_tx8(READ_DATA);
     4fc:	8e eb       	ldi	r24, 0xBE	; 190
     4fe:	c4 df       	rcall	.-120    	; 0x488 <dt_tx8>
	l = dt_rx8();
     500:	9d df       	rcall	.-198    	; 0x43c <dt_rx8>
     502:	18 2f       	mov	r17, r24
	h = dt_rx8();
     504:	9b df       	rcall	.-202    	; 0x43c <dt_rx8>
	h = (h << 8) | l;
     506:	38 2f       	mov	r19, r24
     508:	20 e0       	ldi	r18, 0x00	; 0
	return h;
     50a:	41 2f       	mov	r20, r17
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	42 2b       	or	r20, r18
     510:	53 2b       	or	r21, r19
}
     512:	ca 01       	movw	r24, r20
     514:	1f 91       	pop	r17
     516:	08 95       	ret

00000518 <t_integer_part>:

unsigned char t_integer_part(int t) {
     518:	29 2f       	mov	r18, r25
     51a:	33 27       	eor	r19, r19
     51c:	27 fd       	sbrc	r18, 7
     51e:	3a 95       	dec	r19
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	27 70       	andi	r18, 0x07	; 7
     524:	30 70       	andi	r19, 0x00	; 0
     526:	b4 e0       	ldi	r27, 0x04	; 4
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	ba 95       	dec	r27
     52e:	e1 f7       	brne	.-8      	; 0x528 <t_integer_part+0x10>
     530:	82 95       	swap	r24
     532:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char l = t & 0xFFFF;
	unsigned char h = (t >> 8) & 0xFFFF;
	
	return (l >> 4) | ((h & 0b111) << 4);
}
     534:	82 2b       	or	r24, r18
     536:	08 95       	ret

00000538 <t_sign>:

char t_sign(int t) {
	return (t >> 15) & 1;
}
     538:	89 2f       	mov	r24, r25
     53a:	88 1f       	adc	r24, r24
     53c:	88 27       	eor	r24, r24
     53e:	88 1f       	adc	r24, r24
     540:	08 95       	ret

00000542 <io_init>:

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, Y = 5, X = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
     542:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
     544:	80 ef       	ldi	r24, 0xF0	; 240
     546:	81 bb       	out	0x11, r24	; 17
}
     548:	08 95       	ret

0000054a <io_write>:

void io_write(Port o, char value) {
     54a:	38 2f       	mov	r19, r24
	if (value) {
     54c:	66 23       	and	r22, r22
     54e:	59 f0       	breq	.+22     	; 0x566 <io_write+0x1c>
		IO_PORT |= (1 << o);
     550:	22 b3       	in	r18, 0x12	; 18
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <io_write+0x12>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	3a 95       	dec	r19
     55e:	e2 f7       	brpl	.-8      	; 0x558 <io_write+0xe>
     560:	28 2b       	or	r18, r24
     562:	22 bb       	out	0x12, r18	; 18
     564:	08 95       	ret
	} else {
		IO_PORT &= ~(1 << o);
     566:	22 b3       	in	r18, 0x12	; 18
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <io_write+0x28>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	3a 95       	dec	r19
     574:	e2 f7       	brpl	.-8      	; 0x56e <io_write+0x24>
     576:	80 95       	com	r24
     578:	82 23       	and	r24, r18
     57a:	82 bb       	out	0x12, r24	; 18
     57c:	08 95       	ret

0000057e <io_read>:
	}
}

int io_read(Button b) { 
	return (IO_PIN >> b) & 1; 
     57e:	23 b3       	in	r18, 0x13	; 19
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	02 c0       	rjmp	.+4      	; 0x588 <io_read+0xa>
     584:	35 95       	asr	r19
     586:	27 95       	ror	r18
     588:	8a 95       	dec	r24
     58a:	e2 f7       	brpl	.-8      	; 0x584 <io_read+0x6>
     58c:	21 70       	andi	r18, 0x01	; 1
     58e:	30 70       	andi	r19, 0x00	; 0
}
     590:	c9 01       	movw	r24, r18
     592:	08 95       	ret

00000594 <__vector_9>:
#define TICKS (CLK / PRESCALER)

#define INTS_P_SEC (TICKS / 256)
#define RATE (1000 / INTS_P_SEC)

ISR(TIMER0_OVF_vect) {
     594:	1f 92       	push	r1
     596:	0f 92       	push	r0
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	0f 92       	push	r0
     59c:	11 24       	eor	r1, r1
     59e:	1f 93       	push	r17
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
    __clock__ += RATE;
     5b8:	80 91 b8 00 	lds	r24, 0x00B8
     5bc:	20 91 b9 00 	lds	r18, 0x00B9
     5c0:	30 91 ba 00 	lds	r19, 0x00BA
     5c4:	40 91 bb 00 	lds	r20, 0x00BB
     5c8:	60 91 bc 00 	lds	r22, 0x00BC
     5cc:	e0 91 bd 00 	lds	r30, 0x00BD
     5d0:	a0 91 be 00 	lds	r26, 0x00BE
     5d4:	10 91 bf 00 	lds	r17, 0x00BF
     5d8:	b8 2f       	mov	r27, r24
     5da:	b8 5f       	subi	r27, 0xF8	; 248
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	b8 17       	cp	r27, r24
     5e0:	08 f0       	brcs	.+2      	; 0x5e4 <__vector_9+0x50>
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	f9 2f       	mov	r31, r25
     5e6:	f2 0f       	add	r31, r18
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	f2 17       	cp	r31, r18
     5ec:	08 f0       	brcs	.+2      	; 0x5f0 <__vector_9+0x5c>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	78 2f       	mov	r23, r24
     5f2:	73 0f       	add	r23, r19
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	73 17       	cp	r23, r19
     5f8:	08 f0       	brcs	.+2      	; 0x5fc <__vector_9+0x68>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	58 2f       	mov	r21, r24
     5fe:	54 0f       	add	r21, r20
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	54 17       	cp	r21, r20
     604:	08 f0       	brcs	.+2      	; 0x608 <__vector_9+0x74>
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	38 2f       	mov	r19, r24
     60a:	36 0f       	add	r19, r22
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	36 17       	cp	r19, r22
     610:	08 f0       	brcs	.+2      	; 0x614 <__vector_9+0x80>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	28 2f       	mov	r18, r24
     616:	2e 0f       	add	r18, r30
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	2e 17       	cp	r18, r30
     61c:	08 f0       	brcs	.+2      	; 0x620 <__vector_9+0x8c>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	98 2f       	mov	r25, r24
     622:	9a 0f       	add	r25, r26
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	9a 17       	cp	r25, r26
     628:	08 f0       	brcs	.+2      	; 0x62c <__vector_9+0x98>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	81 0f       	add	r24, r17
     62e:	b0 93 b8 00 	sts	0x00B8, r27
     632:	f0 93 b9 00 	sts	0x00B9, r31
     636:	70 93 ba 00 	sts	0x00BA, r23
     63a:	50 93 bb 00 	sts	0x00BB, r21
     63e:	30 93 bc 00 	sts	0x00BC, r19
     642:	20 93 bd 00 	sts	0x00BD, r18
     646:	90 93 be 00 	sts	0x00BE, r25
     64a:	80 93 bf 00 	sts	0x00BF, r24
}
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	1f 91       	pop	r17
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <clock_init>:

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
     676:	89 b7       	in	r24, 0x39	; 57
     678:	81 60       	ori	r24, 0x01	; 1
     67a:	89 bf       	out	0x39, r24	; 57
	sei();
     67c:	78 94       	sei
}
     67e:	08 95       	ret

00000680 <clock>:

timestamp clock(void) {
     680:	20 91 b8 00 	lds	r18, 0x00B8
     684:	30 91 b9 00 	lds	r19, 0x00B9
     688:	40 91 ba 00 	lds	r20, 0x00BA
     68c:	50 91 bb 00 	lds	r21, 0x00BB
     690:	60 91 bc 00 	lds	r22, 0x00BC
     694:	70 91 bd 00 	lds	r23, 0x00BD
	return __clock__;
}
     698:	80 91 be 00 	lds	r24, 0x00BE
     69c:	90 91 bf 00 	lds	r25, 0x00BF
     6a0:	08 95       	ret

000006a2 <change_upd_speed>:
timestamp debounce_c = 0;
timestamp debounce_d = 0;

UpdateSpeed usp = X3;
void change_upd_speed(void) {
	if (usp == X3) {
     6a2:	80 91 68 00 	lds	r24, 0x0068
     6a6:	90 91 69 00 	lds	r25, 0x0069
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	91 05       	cpc	r25, r1
     6ae:	19 f4       	brne	.+6      	; 0x6b6 <change_upd_speed+0x14>
		usp = X1;
     6b0:	80 e1       	ldi	r24, 0x10	; 16
     6b2:	9e e0       	ldi	r25, 0x0E	; 14
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <change_upd_speed+0x1e>
		return;
	}
	if (usp == X2) {
     6b6:	8c 33       	cpi	r24, 0x3C	; 60
     6b8:	91 05       	cpc	r25, r1
     6ba:	39 f4       	brne	.+14     	; 0x6ca <change_upd_speed+0x28>
		usp = X3;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 69 00 	sts	0x0069, r25
     6c4:	80 93 68 00 	sts	0x0068, r24
     6c8:	08 95       	ret
		return;
	}
	if (usp == X1) {
     6ca:	80 51       	subi	r24, 0x10	; 16
     6cc:	9e 40       	sbci	r25, 0x0E	; 14
     6ce:	31 f4       	brne	.+12     	; 0x6dc <change_upd_speed+0x3a>
		usp = X2;
     6d0:	8c e3       	ldi	r24, 0x3C	; 60
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	90 93 69 00 	sts	0x0069, r25
     6d8:	80 93 68 00 	sts	0x0068, r24
     6dc:	08 95       	ret

000006de <change_line_type>:
	}
}

LineType ltp = MAX40;
void change_line_type(void) {
	if (ltp == MAX40) {
     6de:	80 91 6a 00 	lds	r24, 0x006A
     6e2:	88 32       	cpi	r24, 0x28	; 40
     6e4:	11 f4       	brne	.+4      	; 0x6ea <change_line_type+0xc>
		ltp = MAX80;
     6e6:	80 e5       	ldi	r24, 0x50	; 80
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <change_line_type+0x12>
		return;
	}
	if (ltp == MAX80) {
     6ea:	80 35       	cpi	r24, 0x50	; 80
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <change_line_type+0x18>
		ltp = MAX20;
     6ee:	84 e1       	ldi	r24, 0x14	; 20
     6f0:	80 93 6a 00 	sts	0x006A, r24
     6f4:	08 95       	ret
		return;
	}
	if (ltp == MAX20) {
     6f6:	84 31       	cpi	r24, 0x14	; 20
     6f8:	19 f4       	brne	.+6      	; 0x700 <change_line_type+0x22>
		ltp = MAX40;
     6fa:	88 e2       	ldi	r24, 0x28	; 40
     6fc:	80 93 6a 00 	sts	0x006A, r24
     700:	08 95       	ret

00000702 <change_view_mode>:
int shown_value = 0;
timestamp last_upd = 0;

ViewMode vm = MAIN;
void change_view_mode(void) {
	if (vm == MAIN) {
     702:	80 91 f6 00 	lds	r24, 0x00F6
     706:	88 23       	and	r24, r24
     708:	21 f4       	brne	.+8      	; 0x712 <change_view_mode+0x10>
		vm = HOOKS;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 f6 00 	sts	0x00F6, r24
     710:	08 95       	ret
		return;
	}
	if (vm == HOOKS) {
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	11 f4       	brne	.+4      	; 0x71a <change_view_mode+0x18>
		vm = MAIN;
     716:	10 92 f6 00 	sts	0x00F6, r1
     71a:	08 95       	ret

0000071c <hooks_init>:

char port_status[PORT_SIZE] = {0, 0, 0, 0};

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].port = Z;
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	80 93 73 01 	sts	0x0173, r24
     722:	80 93 78 01 	sts	0x0178, r24
     726:	80 93 7d 01 	sts	0x017D, r24
     72a:	80 93 82 01 	sts	0x0182, r24
	}
}
     72e:	08 95       	ret

00000730 <clear_port>:

void clear_port(void) {
	for (int i = 0; i < PORT_SIZE; i++) port_status[i] = 0;
     730:	10 92 f9 00 	sts	0x00F9, r1
     734:	10 92 fa 00 	sts	0x00FA, r1
     738:	10 92 fb 00 	sts	0x00FB, r1
     73c:	10 92 fc 00 	sts	0x00FC, r1
}
     740:	08 95       	ret

00000742 <apply_port>:

void apply_port(void) {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	c0 e0       	ldi	r28, 0x00	; 0
     748:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < PORT_SIZE; i++) io_write(i + 4, port_status[i]);
     74a:	fe 01       	movw	r30, r28
     74c:	e7 50       	subi	r30, 0x07	; 7
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	9e 01       	movw	r18, r28
     752:	2c 5f       	subi	r18, 0xFC	; 252
     754:	82 2f       	mov	r24, r18
     756:	60 81       	ld	r22, Z
     758:	f8 de       	rcall	.-528    	; 0x54a <io_write>
     75a:	21 96       	adiw	r28, 0x01	; 1
     75c:	c4 30       	cpi	r28, 0x04	; 4
     75e:	d1 05       	cpc	r29, r1
     760:	a1 f7       	brne	.-24     	; 0x74a <apply_port+0x8>
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <do_action>:

void print_hook(int);

void do_action(Port prt, Action ac) {
	if (ac == set) port_status[prt - 4] = 1;
     768:	61 30       	cpi	r22, 0x01	; 1
     76a:	31 f4       	brne	.+12     	; 0x778 <do_action+0x10>
     76c:	e8 2f       	mov	r30, r24
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	eb 50       	subi	r30, 0x0B	; 11
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	60 83       	st	Z, r22
     776:	08 95       	ret
	if (ac == res) port_status[prt - 4] = 0;
     778:	62 30       	cpi	r22, 0x02	; 2
     77a:	29 f4       	brne	.+10     	; 0x786 <do_action+0x1e>
     77c:	e8 2f       	mov	r30, r24
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	eb 50       	subi	r30, 0x0B	; 11
     782:	ff 4f       	sbci	r31, 0xFF	; 255
     784:	10 82       	st	Z, r1
     786:	08 95       	ret

00000788 <handle_hooks>:
}

void handle_hooks(int t_value) {
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	9c 01       	movw	r18, r24
	int value = 0;
	if (t_sign(t_value)){
     792:	37 ff       	sbrs	r19, 7
     794:	17 c0       	rjmp	.+46     	; 0x7c4 <handle_hooks+0x3c>
		value = -t_integer_part(~t_value);
     796:	80 95       	com	r24
     798:	90 95       	com	r25
     79a:	29 2f       	mov	r18, r25
     79c:	33 27       	eor	r19, r19
     79e:	27 fd       	sbrc	r18, 7
     7a0:	3a 95       	dec	r19
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	27 70       	andi	r18, 0x07	; 7
     7a6:	30 70       	andi	r19, 0x00	; 0
     7a8:	54 e0       	ldi	r21, 0x04	; 4
     7aa:	22 0f       	add	r18, r18
     7ac:	33 1f       	adc	r19, r19
     7ae:	5a 95       	dec	r21
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <handle_hooks+0x22>
     7b2:	82 95       	swap	r24
     7b4:	8f 70       	andi	r24, 0x0F	; 15
     7b6:	82 2b       	or	r24, r18
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	00 27       	eor	r16, r16
     7bc:	11 27       	eor	r17, r17
     7be:	08 1b       	sub	r16, r24
     7c0:	19 0b       	sbc	r17, r25
     7c2:	10 c0       	rjmp	.+32     	; 0x7e4 <handle_hooks+0x5c>
	} else {
		value = t_integer_part(t_value);
     7c4:	89 2f       	mov	r24, r25
     7c6:	99 0f       	add	r25, r25
     7c8:	99 0b       	sbc	r25, r25
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	87 70       	andi	r24, 0x07	; 7
     7ce:	90 70       	andi	r25, 0x00	; 0
     7d0:	34 e0       	ldi	r19, 0x04	; 4
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	3a 95       	dec	r19
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <handle_hooks+0x4a>
     7da:	22 95       	swap	r18
     7dc:	2f 70       	andi	r18, 0x0F	; 15
     7de:	28 2b       	or	r18, r24
     7e0:	02 2f       	mov	r16, r18
     7e2:	10 e0       	ldi	r17, 0x00	; 0
		hooks[i].port = Z;
	}
}

void clear_port(void) {
	for (int i = 0; i < PORT_SIZE; i++) port_status[i] = 0;
     7e4:	10 92 f9 00 	sts	0x00F9, r1
     7e8:	10 92 fa 00 	sts	0x00FA, r1
     7ec:	10 92 fb 00 	sts	0x00FB, r1
     7f0:	10 92 fc 00 	sts	0x00FC, r1
     7f4:	cf e6       	ldi	r28, 0x6F	; 111
     7f6:	d1 e0       	ldi	r29, 0x01	; 1
		value = t_integer_part(t_value);
	}

	clear_port();
	for (int i = 0; i < HOOKS_N; i++) {
		hook th = hooks[i];
     7f8:	6b 81       	ldd	r22, Y+3	; 0x03
     7fa:	8c 81       	ldd	r24, Y+4	; 0x04
     7fc:	29 81       	ldd	r18, Y+1	; 0x01
     7fe:	3a 81       	ldd	r19, Y+2	; 0x02
     800:	98 81       	ld	r25, Y
		
		char cond = (th.op == eq && value == th.value) || 
					(th.op == lt && value < th.value) ||
					(th.op == gt && value > th.value) ||
					(th.op == lte && value <= th.value) ||
					(th.op == gte && value >= th.value);
     802:	99 23       	and	r25, r25
     804:	21 f4       	brne	.+8      	; 0x80e <handle_hooks+0x86>
     806:	02 17       	cp	r16, r18
     808:	13 07       	cpc	r17, r19
     80a:	f1 f4       	brne	.+60     	; 0x848 <handle_hooks+0xc0>
     80c:	1c c0       	rjmp	.+56     	; 0x846 <handle_hooks+0xbe>
     80e:	91 30       	cpi	r25, 0x01	; 1
     810:	21 f4       	brne	.+8      	; 0x81a <handle_hooks+0x92>
     812:	02 17       	cp	r16, r18
     814:	13 07       	cpc	r17, r19
     816:	bc f0       	brlt	.+46     	; 0x846 <handle_hooks+0xbe>
     818:	17 c0       	rjmp	.+46     	; 0x848 <handle_hooks+0xc0>
     81a:	92 30       	cpi	r25, 0x02	; 2
     81c:	21 f4       	brne	.+8      	; 0x826 <handle_hooks+0x9e>
     81e:	20 17       	cp	r18, r16
     820:	31 07       	cpc	r19, r17
     822:	8c f0       	brlt	.+34     	; 0x846 <handle_hooks+0xbe>
     824:	11 c0       	rjmp	.+34     	; 0x848 <handle_hooks+0xc0>
     826:	93 30       	cpi	r25, 0x03	; 3
     828:	21 f4       	brne	.+8      	; 0x832 <handle_hooks+0xaa>
     82a:	20 17       	cp	r18, r16
     82c:	31 07       	cpc	r19, r17
     82e:	5c f4       	brge	.+22     	; 0x846 <handle_hooks+0xbe>
     830:	0b c0       	rjmp	.+22     	; 0x848 <handle_hooks+0xc0>
     832:	94 30       	cpi	r25, 0x04	; 4
     834:	49 f4       	brne	.+18     	; 0x848 <handle_hooks+0xc0>
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	02 17       	cp	r16, r18
     83c:	13 07       	cpc	r17, r19
     83e:	14 f0       	brlt	.+4      	; 0x844 <handle_hooks+0xbc>
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	50 e0       	ldi	r21, 0x00	; 0
		
		if (cond) {
     844:	41 11       	cpse	r20, r1
			do_action(th.port, th.act);
     846:	90 df       	rcall	.-224    	; 0x768 <do_action>
     848:	25 96       	adiw	r28, 0x05	; 5
	} else {
		value = t_integer_part(t_value);
	}

	clear_port();
	for (int i = 0; i < HOOKS_N; i++) {
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	c3 38       	cpi	r28, 0x83	; 131
     84e:	d8 07       	cpc	r29, r24
     850:	99 f6       	brne	.-90     	; 0x7f8 <handle_hooks+0x70>
		
		if (cond) {
			do_action(th.port, th.act);
		}
	}
	apply_port();
     852:	77 df       	rcall	.-274    	; 0x742 <apply_port>
} 
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <draw_hook_ptr>:
	{ 17, 36 },
	{ 41, 60 },
	{ 67, 73 }
};

void draw_hook_ptr(char ptr, unsigned char stage) {
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
	for (int i = 2; i < 11; i++) {
		lcd_line(edit_stages[stage][0], ptr * 9 + i, edit_stages[stage][1], ptr * 9 + i, INVERT);
     86e:	99 e0       	ldi	r25, 0x09	; 9
     870:	89 9f       	mul	r24, r25
     872:	10 2d       	mov	r17, r0
     874:	11 24       	eor	r1, r1
     876:	a2 e0       	ldi	r26, 0x02	; 2
     878:	ea 2e       	mov	r14, r26
     87a:	f1 2c       	mov	r15, r1
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	6b 01       	movw	r12, r22
     880:	cc 0c       	add	r12, r12
     882:	dd 1c       	adc	r13, r13
     884:	cc 0c       	add	r12, r12
     886:	dd 1c       	adc	r13, r13
     888:	8b e6       	ldi	r24, 0x6B	; 107
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	c8 0e       	add	r12, r24
     88e:	d9 1e       	adc	r13, r25
     890:	eb 01       	movw	r28, r22
     892:	cc 0f       	add	r28, r28
     894:	dd 1f       	adc	r29, r29
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	cc 0f       	add	r28, r28
     89a:	dd 1f       	adc	r29, r29
     89c:	c8 0f       	add	r28, r24
     89e:	d9 1f       	adc	r29, r25
     8a0:	21 2f       	mov	r18, r17
     8a2:	2e 0d       	add	r18, r14
     8a4:	f6 01       	movw	r30, r12
     8a6:	80 81       	ld	r24, Z
     8a8:	62 2f       	mov	r22, r18
     8aa:	48 81       	ld	r20, Y
     8ac:	02 e0       	ldi	r16, 0x02	; 2
     8ae:	0d dd       	rcall	.-1510   	; 0x2ca <lcd_line>
	{ 41, 60 },
	{ 67, 73 }
};

void draw_hook_ptr(char ptr, unsigned char stage) {
	for (int i = 2; i < 11; i++) {
     8b0:	08 94       	sec
     8b2:	e1 1c       	adc	r14, r1
     8b4:	f1 1c       	adc	r15, r1
     8b6:	fb e0       	ldi	r31, 0x0B	; 11
     8b8:	ef 16       	cp	r14, r31
     8ba:	f1 04       	cpc	r15, r1
     8bc:	89 f7       	brne	.-30     	; 0x8a0 <draw_hook_ptr+0x42>
		lcd_line(edit_stages[stage][0], ptr * 9 + i, edit_stages[stage][1], ptr * 9 + i, INVERT);
	}
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	08 95       	ret

000008d0 <sc_top>:
	if (hooks[index].act != nop) {
		lcd_put_string(68, py, ports[hooks[index].port - 4], BLACK);
	}
}

int sc_top(LineType lt, int value) {
     8d0:	e8 2f       	mov	r30, r24
	int divs = 0;
	if (t_sign(value)) {
     8d2:	77 ff       	sbrs	r23, 7
     8d4:	1d c0       	rjmp	.+58     	; 0x910 <sc_top+0x40>
		divs = -(t_integer_part(~value) * 16 / lt);
     8d6:	ab 01       	movw	r20, r22
     8d8:	40 95       	com	r20
     8da:	50 95       	com	r21
     8dc:	25 2f       	mov	r18, r21
     8de:	33 27       	eor	r19, r19
     8e0:	27 fd       	sbrc	r18, 7
     8e2:	3a 95       	dec	r19
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	27 70       	andi	r18, 0x07	; 7
     8e8:	30 70       	andi	r19, 0x00	; 0
     8ea:	54 e0       	ldi	r21, 0x04	; 4
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	5a 95       	dec	r21
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <sc_top+0x1c>
     8f4:	42 95       	swap	r20
     8f6:	4f 70       	andi	r20, 0x0F	; 15
     8f8:	84 2f       	mov	r24, r20
     8fa:	82 2b       	or	r24, r18
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	24 e0       	ldi	r18, 0x04	; 4
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	2a 95       	dec	r18
     906:	e1 f7       	brne	.-8      	; 0x900 <sc_top+0x30>
     908:	90 95       	com	r25
     90a:	81 95       	neg	r24
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	16 c0       	rjmp	.+44     	; 0x93c <sc_top+0x6c>
	} else {
		divs = t_integer_part(value) * 16 / lt;
     910:	27 2f       	mov	r18, r23
     912:	33 27       	eor	r19, r19
     914:	27 fd       	sbrc	r18, 7
     916:	3a 95       	dec	r19
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	27 70       	andi	r18, 0x07	; 7
     91c:	30 70       	andi	r19, 0x00	; 0
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	8a 95       	dec	r24
     926:	e1 f7       	brne	.-8      	; 0x920 <sc_top+0x50>
     928:	86 2f       	mov	r24, r22
     92a:	82 95       	swap	r24
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	82 2b       	or	r24, r18
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	b4 e0       	ldi	r27, 0x04	; 4
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	ba 95       	dec	r27
     93a:	e1 f7       	brne	.-8      	; 0x934 <sc_top+0x64>
     93c:	6e 2f       	mov	r22, r30
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	e2 d9       	rcall	.-3132   	; 0xfffffd06 <__eeprom_end+0xff7efb17>
	}
	int scale_top = 38 - (divs + ZERO_H);
     942:	2a e1       	ldi	r18, 0x1A	; 26
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	26 1b       	sub	r18, r22
     948:	37 0b       	sbc	r19, r23
	ovf_flag = 0;
     94a:	10 92 e9 00 	sts	0x00E9, r1
	if (scale_top < 2) {
     94e:	22 30       	cpi	r18, 0x02	; 2
     950:	31 05       	cpc	r19, r1
     952:	34 f4       	brge	.+12     	; 0x960 <sc_top+0x90>
		scale_top = 2;
		ovf_flag = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 e9 00 	sts	0x00E9, r24
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	08 c0       	rjmp	.+16     	; 0x970 <sc_top+0xa0>
	}
	if (scale_top > 37) {
     960:	26 32       	cpi	r18, 0x26	; 38
     962:	31 05       	cpc	r19, r1
     964:	2c f0       	brlt	.+10     	; 0x970 <sc_top+0xa0>
		scale_top = 37;
		ovf_flag = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 e9 00 	sts	0x00E9, r24
     96c:	25 e2       	ldi	r18, 0x25	; 37
     96e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return scale_top;
}
     970:	c9 01       	movw	r24, r18
     972:	08 95       	ret

00000974 <draw_chart>:

void draw_chart(LineType lt) {
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	e8 2e       	mov	r14, r24
     982:	cd ef       	ldi	r28, 0xFD	; 253
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	02 e0       	ldi	r16, 0x02	; 2
	for (byte i = 0; i < CHART_W - 1; i++) {
		lcd_line(
     988:	68 81       	ld	r22, Y
     98a:	79 81       	ldd	r23, Y+1	; 0x01
     98c:	8e 2d       	mov	r24, r14
     98e:	a0 df       	rcall	.-192    	; 0x8d0 <sc_top>
     990:	18 2f       	mov	r17, r24
     992:	f0 2e       	mov	r15, r16
     994:	f3 94       	inc	r15
     996:	6a 81       	ldd	r22, Y+2	; 0x02
     998:	7b 81       	ldd	r23, Y+3	; 0x03
     99a:	8e 2d       	mov	r24, r14
     99c:	99 df       	rcall	.-206    	; 0x8d0 <sc_top>
     99e:	28 2f       	mov	r18, r24
     9a0:	80 2f       	mov	r24, r16
     9a2:	61 2f       	mov	r22, r17
     9a4:	4f 2d       	mov	r20, r15
     9a6:	01 e0       	ldi	r16, 0x01	; 1
     9a8:	90 dc       	rcall	.-1760   	; 0x2ca <lcd_line>
     9aa:	22 96       	adiw	r28, 0x02	; 2
     9ac:	0f 2d       	mov	r16, r15
	}
	return scale_top;
}

void draw_chart(LineType lt) {
	for (byte i = 0; i < CHART_W - 1; i++) {
     9ae:	0a 33       	cpi	r16, 0x3A	; 58
     9b0:	59 f7       	brne	.-42     	; 0x988 <draw_chart+0x14>
			i + 2, sc_top(lt, values_for_chart[i]), 
			i + 3, sc_top(lt, values_for_chart[i + 1]), 
			BLACK
		);
	}
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <add_new_chart_value>:

void add_new_chart_value(int new_value) {
     9c0:	9c 01       	movw	r18, r24
     9c2:	ed ef       	ldi	r30, 0xFD	; 253
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	81 93       	st	Z+, r24
     9cc:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	ed 36       	cpi	r30, 0x6D	; 109
     9d2:	f8 07       	cpc	r31, r24
     9d4:	c1 f7       	brne	.-16     	; 0x9c6 <add_new_chart_value+0x6>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
     9d6:	31 83       	std	Z+1, r19	; 0x01
     9d8:	20 83       	st	Z, r18
}
     9da:	08 95       	ret

000009dc <clear_chart>:

void clear_chart() {
     9dc:	ed ef       	ldi	r30, 0xFD	; 253
     9de:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 0; i < CHART_W; i++) {
		values_for_chart[i] = 0;
     9e0:	11 92       	st	Z+, r1
     9e2:	11 92       	st	Z+, r1
	}
	values_for_chart[CHART_W - 1] = new_value;
}

void clear_chart() {
	for (int i = 0; i < CHART_W; i++) {
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	ef 36       	cpi	r30, 0x6F	; 111
     9e8:	f8 07       	cpc	r31, r24
     9ea:	d1 f7       	brne	.-12     	; 0x9e0 <clear_chart+0x4>
		values_for_chart[i] = 0;
	}
}
     9ec:	08 95       	ret

000009ee <draw_bar>:

void draw_bar(LineType lt, int value) {
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
	byte scale_top = sc_top(lt, value);
     9f2:	6e df       	rcall	.-292    	; 0x8d0 <sc_top>
     9f4:	18 2f       	mov	r17, r24
	lcd_line(78, scale_top, 78, 37, BLACK);
     9f6:	8e e4       	ldi	r24, 0x4E	; 78
     9f8:	61 2f       	mov	r22, r17
     9fa:	4e e4       	ldi	r20, 0x4E	; 78
     9fc:	25 e2       	ldi	r18, 0x25	; 37
     9fe:	01 e0       	ldi	r16, 0x01	; 1
     a00:	64 dc       	rcall	.-1848   	; 0x2ca <lcd_line>
	lcd_line(79, scale_top, 79, 37, BLACK);
     a02:	8f e4       	ldi	r24, 0x4F	; 79
     a04:	61 2f       	mov	r22, r17
     a06:	4f e4       	ldi	r20, 0x4F	; 79
     a08:	25 e2       	ldi	r18, 0x25	; 37
     a0a:	5f dc       	rcall	.-1858   	; 0x2ca <lcd_line>
}
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <draw_update_speed_indicator>:
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
}

void draw_update_speed_indicator(UpdateSpeed us) {
     a12:	0f 93       	push	r16
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
	lcd_line(62, 43, 62, 45, BLACK);
     a1a:	8e e3       	ldi	r24, 0x3E	; 62
     a1c:	6b e2       	ldi	r22, 0x2B	; 43
     a1e:	4e e3       	ldi	r20, 0x3E	; 62
     a20:	2d e2       	ldi	r18, 0x2D	; 45
     a22:	01 e0       	ldi	r16, 0x01	; 1
     a24:	52 dc       	rcall	.-1884   	; 0x2ca <lcd_line>
	lcd_line(63, 43, 63, 45, BLACK);
     a26:	8f e3       	ldi	r24, 0x3F	; 63
     a28:	6b e2       	ldi	r22, 0x2B	; 43
     a2a:	4f e3       	ldi	r20, 0x3F	; 63
     a2c:	2d e2       	ldi	r18, 0x2D	; 45
     a2e:	4d dc       	rcall	.-1894   	; 0x2ca <lcd_line>
	if (us == X1) return;
     a30:	8e e0       	ldi	r24, 0x0E	; 14
     a32:	c0 31       	cpi	r28, 0x10	; 16
     a34:	d8 07       	cpc	r29, r24
     a36:	b1 f0       	breq	.+44     	; 0xa64 <draw_update_speed_indicator+0x52>
	lcd_line(65, 42, 65, 45, BLACK);
     a38:	81 e4       	ldi	r24, 0x41	; 65
     a3a:	6a e2       	ldi	r22, 0x2A	; 42
     a3c:	41 e4       	ldi	r20, 0x41	; 65
     a3e:	2d e2       	ldi	r18, 0x2D	; 45
     a40:	44 dc       	rcall	.-1912   	; 0x2ca <lcd_line>
	lcd_line(66, 42, 66, 45, BLACK);
     a42:	82 e4       	ldi	r24, 0x42	; 66
     a44:	6a e2       	ldi	r22, 0x2A	; 42
     a46:	42 e4       	ldi	r20, 0x42	; 66
     a48:	2d e2       	ldi	r18, 0x2D	; 45
     a4a:	3f dc       	rcall	.-1922   	; 0x2ca <lcd_line>
	if (us == X2) return;
     a4c:	ec 97       	sbiw	r28, 0x3c	; 60
     a4e:	51 f0       	breq	.+20     	; 0xa64 <draw_update_speed_indicator+0x52>
	lcd_line(68, 41, 68, 45, BLACK);
     a50:	84 e4       	ldi	r24, 0x44	; 68
     a52:	69 e2       	ldi	r22, 0x29	; 41
     a54:	44 e4       	ldi	r20, 0x44	; 68
     a56:	2d e2       	ldi	r18, 0x2D	; 45
     a58:	38 dc       	rcall	.-1936   	; 0x2ca <lcd_line>
	lcd_line(69, 41, 69, 45, BLACK);
     a5a:	85 e4       	ldi	r24, 0x45	; 69
     a5c:	69 e2       	ldi	r22, 0x29	; 41
     a5e:	45 e4       	ldi	r20, 0x45	; 69
     a60:	2d e2       	ldi	r18, 0x2D	; 45
     a62:	33 dc       	rcall	.-1946   	; 0x2ca <lcd_line>
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <lcd_draw>:
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
     a6c:	2f 92       	push	r2
     a6e:	3f 92       	push	r3
     a70:	4f 92       	push	r4
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	3c 01       	movw	r6, r24
     a92:	26 2e       	mov	r2, r22
     a94:	34 2e       	mov	r3, r20
     a96:	52 2e       	mov	r5, r18
     a98:	4e 2c       	mov	r4, r14
     a9a:	ee 24       	eor	r14, r14
     a9c:	ff 24       	eor	r15, r15
     a9e:	dd 24       	eor	r13, r13
	for (int j = 0; j < h; j++) {
     aa0:	80 2e       	mov	r8, r16
     aa2:	99 24       	eor	r9, r9
		for (int i = 0; i < w; i++) {
     aa4:	a2 2e       	mov	r10, r18
     aa6:	bb 24       	eor	r11, r11
     aa8:	21 c0       	rjmp	.+66     	; 0xaec <lcd_draw+0x80>
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     aaa:	1c 2f       	mov	r17, r28
     aac:	1d 0d       	add	r17, r13
		for (int i = 0; i < w; i++) {
			char addr = j * w + i; 
			if (eeprom_read_byte(&texture[addr / 8]) >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     aae:	81 2f       	mov	r24, r17
     ab0:	86 95       	lsr	r24
     ab2:	86 95       	lsr	r24
     ab4:	86 95       	lsr	r24
     ab6:	93 01       	movw	r18, r6
     ab8:	28 0f       	add	r18, r24
     aba:	31 1d       	adc	r19, r1
     abc:	c9 01       	movw	r24, r18
     abe:	69 d9       	rcall	.-3374   	; 0xfffffd92 <__eeprom_end+0xff7efba3>
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	17 70       	andi	r17, 0x07	; 7
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <lcd_draw+0x5e>
     ac6:	95 95       	asr	r25
     ac8:	87 95       	ror	r24
     aca:	1a 95       	dec	r17
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <lcd_draw+0x5a>
     ace:	80 ff       	sbrs	r24, 0
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <lcd_draw+0x70>
     ad2:	8c 2f       	mov	r24, r28
     ad4:	82 0d       	add	r24, r2
     ad6:	6c 2d       	mov	r22, r12
     ad8:	44 2d       	mov	r20, r4
     ada:	32 db       	rcall	.-2460   	; 0x140 <lcd_pixel>
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
		for (int i = 0; i < w; i++) {
     adc:	21 96       	adiw	r28, 0x01	; 1
     ade:	ca 15       	cp	r28, r10
     ae0:	db 05       	cpc	r29, r11
     ae2:	1c f3       	brlt	.-58     	; 0xaaa <lcd_draw+0x3e>
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     ae4:	08 94       	sec
     ae6:	e1 1c       	adc	r14, r1
     ae8:	f1 1c       	adc	r15, r1
     aea:	d5 0c       	add	r13, r5
     aec:	e8 14       	cp	r14, r8
     aee:	f9 04       	cpc	r15, r9
     af0:	2c f4       	brge	.+10     	; 0xafc <lcd_draw+0x90>
		for (int i = 0; i < w; i++) {
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d0 e0       	ldi	r29, 0x00	; 0
			char addr = j * w + i; 
			if (eeprom_read_byte(&texture[addr / 8]) >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     af6:	c3 2c       	mov	r12, r3
     af8:	ce 0c       	add	r12, r14
     afa:	f1 cf       	rjmp	.-30     	; 0xade <lcd_draw+0x72>
		}
	}
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	5f 90       	pop	r5
     b1a:	4f 90       	pop	r4
     b1c:	3f 90       	pop	r3
     b1e:	2f 90       	pop	r2
     b20:	08 95       	ret

00000b22 <draw_interface>:
			lcd_draw(small_two, 66, 16, 3, 5, BLACK);
			lcd_draw(small_two, 66, 32, 3, 5, BLACK);
	}
}

void draw_interface() {
     b22:	ef 92       	push	r14
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
	lcd_line(1, 1, 59, 1, BLACK);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	4b e3       	ldi	r20, 0x3B	; 59
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	01 e0       	ldi	r16, 0x01	; 1
     b36:	c9 db       	rcall	.-2158   	; 0x2ca <lcd_line>
	lcd_line(1, 38, 59, 38, BLACK);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	66 e2       	ldi	r22, 0x26	; 38
     b3c:	4b e3       	ldi	r20, 0x3B	; 59
     b3e:	26 e2       	ldi	r18, 0x26	; 38
     b40:	c4 db       	rcall	.-2168   	; 0x2ca <lcd_line>
	lcd_line(1, 1, 1, 38, BLACK);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	26 e2       	ldi	r18, 0x26	; 38
     b4a:	bf db       	rcall	.-2178   	; 0x2ca <lcd_line>
	lcd_line(59, 1, 59, 38, BLACK);
     b4c:	8b e3       	ldi	r24, 0x3B	; 59
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	4b e3       	ldi	r20, 0x3B	; 59
     b52:	26 e2       	ldi	r18, 0x26	; 38
     b54:	ba db       	rcall	.-2188   	; 0x2ca <lcd_line>
     b56:	c1 e0       	ldi	r28, 0x01	; 1
     b58:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 1; i <= 59; i++) {
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
     b5a:	c0 ff       	sbrs	r28, 0
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <draw_interface+0x44>
     b5e:	8c 2f       	mov	r24, r28
     b60:	6a e1       	ldi	r22, 0x1A	; 26
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	ed da       	rcall	.-2598   	; 0x140 <lcd_pixel>
void draw_interface() {
	lcd_line(1, 1, 59, 1, BLACK);
	lcd_line(1, 38, 59, 38, BLACK);
	lcd_line(1, 1, 1, 38, BLACK);
	lcd_line(59, 1, 59, 38, BLACK);
	for (int i = 1; i <= 59; i++) {
     b66:	21 96       	adiw	r28, 0x01	; 1
     b68:	cc 33       	cpi	r28, 0x3C	; 60
     b6a:	d1 05       	cpc	r29, r1
     b6c:	b1 f7       	brne	.-20     	; 0xb5a <draw_interface+0x38>
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
	}
	lcd_line(77, 2, 77, 38, BLACK);
     b6e:	8d e4       	ldi	r24, 0x4D	; 77
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	4d e4       	ldi	r20, 0x4D	; 77
     b74:	26 e2       	ldi	r18, 0x26	; 38
     b76:	01 e0       	ldi	r16, 0x01	; 1
     b78:	a8 db       	rcall	.-2224   	; 0x2ca <lcd_line>
	lcd_line(80, 2, 80, 38, BLACK);
     b7a:	80 e5       	ldi	r24, 0x50	; 80
     b7c:	62 e0       	ldi	r22, 0x02	; 2
     b7e:	40 e5       	ldi	r20, 0x50	; 80
     b80:	26 e2       	ldi	r18, 0x26	; 38
     b82:	a3 db       	rcall	.-2234   	; 0x2ca <lcd_line>
	lcd_line(78, 1, 79, 1, BLACK);
     b84:	8e e4       	ldi	r24, 0x4E	; 78
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	4f e4       	ldi	r20, 0x4F	; 79
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	9e db       	rcall	.-2244   	; 0x2ca <lcd_line>
	lcd_line(78, 38, 79, 38, BLACK);
     b8e:	8e e4       	ldi	r24, 0x4E	; 78
     b90:	66 e2       	ldi	r22, 0x26	; 38
     b92:	4f e4       	ldi	r20, 0x4F	; 79
     b94:	26 e2       	ldi	r18, 0x26	; 38
     b96:	99 db       	rcall	.-2254   	; 0x2ca <lcd_line>
     b98:	c1 e0       	ldi	r28, 0x01	; 1
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
     b9c:	16 e0       	ldi	r17, 0x06	; 6
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
     b9e:	8c e4       	ldi	r24, 0x4C	; 76
     ba0:	61 2f       	mov	r22, r17
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	cd da       	rcall	.-2662   	; 0x140 <lcd_pixel>
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
     ba6:	c0 fd       	sbrc	r28, 0
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <draw_interface+0x90>
     baa:	8b e4       	ldi	r24, 0x4B	; 75
     bac:	61 2f       	mov	r22, r17
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	c7 da       	rcall	.-2674   	; 0x140 <lcd_pixel>
	}
	lcd_line(77, 2, 77, 38, BLACK);
	lcd_line(80, 2, 80, 38, BLACK);
	lcd_line(78, 1, 79, 1, BLACK);
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	1c 5f       	subi	r17, 0xFC	; 252
     bb6:	16 32       	cpi	r17, 0x26	; 38
     bb8:	91 f7       	brne	.-28     	; 0xb9e <draw_interface+0x7c>
     bba:	18 e0       	ldi	r17, 0x08	; 8
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
     bbc:	86 ed       	ldi	r24, 0xD6	; 214
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	66 e4       	ldi	r22, 0x46	; 70
     bc2:	41 2f       	mov	r20, r17
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	05 e0       	ldi	r16, 0x05	; 5
     bc8:	ee 24       	eor	r14, r14
     bca:	e3 94       	inc	r14
     bcc:	4f df       	rcall	.-354    	; 0xa6c <lcd_draw>
     bce:	18 5f       	subi	r17, 0xF8	; 248
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
     bd0:	18 32       	cpi	r17, 0x28	; 40
     bd2:	a1 f7       	brne	.-24     	; 0xbbc <draw_interface+0x9a>
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
	}
	lcd_line(62, 34, 64, 34, BLACK);
     bd4:	8e e3       	ldi	r24, 0x3E	; 62
     bd6:	62 e2       	ldi	r22, 0x22	; 34
     bd8:	40 e4       	ldi	r20, 0x40	; 64
     bda:	22 e2       	ldi	r18, 0x22	; 34
     bdc:	01 e0       	ldi	r16, 0x01	; 1
     bde:	75 db       	rcall	.-2326   	; 0x2ca <lcd_line>
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
     be0:	85 ee       	ldi	r24, 0xE5	; 229
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	6b e4       	ldi	r22, 0x4B	; 75
     be6:	47 e2       	ldi	r20, 0x27	; 39
     be8:	28 e0       	ldi	r18, 0x08	; 8
     bea:	08 e0       	ldi	r16, 0x08	; 8
     bec:	3f df       	rcall	.-386    	; 0xa6c <lcd_draw>
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
     bee:	81 ee       	ldi	r24, 0xE1	; 225
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	66 e3       	ldi	r22, 0x36	; 54
     bf4:	49 e2       	ldi	r20, 0x29	; 41
     bf6:	23 e0       	ldi	r18, 0x03	; 3
     bf8:	05 e0       	ldi	r16, 0x05	; 5
     bfa:	38 df       	rcall	.-400    	; 0xa6c <lcd_draw>
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
     bfc:	83 ee       	ldi	r24, 0xE3	; 227
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	6a e3       	ldi	r22, 0x3A	; 58
     c02:	49 e2       	ldi	r20, 0x29	; 41
     c04:	23 e0       	ldi	r18, 0x03	; 3
     c06:	32 df       	rcall	.-412    	; 0xa6c <lcd_draw>
	if (ovf_flag) {
     c08:	80 91 e9 00 	lds	r24, 0x00E9
     c0c:	88 23       	and	r24, r24
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <draw_interface+0x116>
     c10:	12 e4       	ldi	r17, 0x42	; 66
		for (int i = 66; i <= 70; i++) {
			lcd_line(i, 1, i, 6, BLACK);
     c12:	81 2f       	mov	r24, r17
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	41 2f       	mov	r20, r17
     c18:	26 e0       	ldi	r18, 0x06	; 6
     c1a:	01 e0       	ldi	r16, 0x01	; 1
     c1c:	56 db       	rcall	.-2388   	; 0x2ca <lcd_line>
     c1e:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_line(62, 34, 64, 34, BLACK);
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
	if (ovf_flag) {
		for (int i = 66; i <= 70; i++) {
     c20:	17 34       	cpi	r17, 0x47	; 71
     c22:	b9 f7       	brne	.-18     	; 0xc12 <draw_interface+0xf0>
			lcd_line(i, 1, i, 6, BLACK);
		}
		lcd_line(68, 2, 68, 5, WHITE);
     c24:	84 e4       	ldi	r24, 0x44	; 68
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	44 e4       	ldi	r20, 0x44	; 68
     c2a:	25 e0       	ldi	r18, 0x05	; 5
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	4d db       	rcall	.-2406   	; 0x2ca <lcd_line>
		lcd_pixel(68, 4, BLACK);
     c30:	84 e4       	ldi	r24, 0x44	; 68
     c32:	64 e0       	ldi	r22, 0x04	; 4
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	84 da       	rcall	.-2808   	; 0x140 <lcd_pixel>
	}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <draw_values_line>:
	if (us == X2) return;
	lcd_line(68, 41, 68, 45, BLACK);
	lcd_line(69, 41, 69, 45, BLACK);
}

void draw_values_line(LineType lt) {
     c44:	ef 92       	push	r14
     c46:	0f 93       	push	r16
	switch (lt) {
     c48:	84 31       	cpi	r24, 0x14	; 20
     c4a:	19 f0       	breq	.+6      	; 0xc52 <draw_values_line+0xe>
     c4c:	80 35       	cpi	r24, 0x50	; 80
     c4e:	41 f5       	brne	.+80     	; 0xca0 <draw_values_line+0x5c>
     c50:	15 c0       	rjmp	.+42     	; 0xc7c <draw_values_line+0x38>
		case MAX20:
			lcd_draw(small_two, 66, 8, 3, 5, BLACK);
     c52:	89 ed       	ldi	r24, 0xD9	; 217
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	62 e4       	ldi	r22, 0x42	; 66
     c58:	48 e0       	ldi	r20, 0x08	; 8
     c5a:	23 e0       	ldi	r18, 0x03	; 3
     c5c:	05 e0       	ldi	r16, 0x05	; 5
     c5e:	ee 24       	eor	r14, r14
     c60:	e3 94       	inc	r14
     c62:	04 df       	rcall	.-504    	; 0xa6c <lcd_draw>
			lcd_draw(small_one, 66, 16, 2, 5, BLACK);
     c64:	8d ed       	ldi	r24, 0xDD	; 221
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	62 e4       	ldi	r22, 0x42	; 66
     c6a:	40 e1       	ldi	r20, 0x10	; 16
     c6c:	22 e0       	ldi	r18, 0x02	; 2
     c6e:	fe de       	rcall	.-516    	; 0xa6c <lcd_draw>
			lcd_draw(small_one, 66, 32, 2, 5, BLACK);
     c70:	8d ed       	ldi	r24, 0xDD	; 221
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	62 e4       	ldi	r22, 0x42	; 66
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	22 e0       	ldi	r18, 0x02	; 2
     c7a:	26 c0       	rjmp	.+76     	; 0xcc8 <draw_values_line+0x84>
			break;
		case MAX80:
			lcd_draw(small_eight, 66, 8, 3, 5, BLACK);
     c7c:	8f ed       	ldi	r24, 0xDF	; 223
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	62 e4       	ldi	r22, 0x42	; 66
     c82:	48 e0       	ldi	r20, 0x08	; 8
     c84:	23 e0       	ldi	r18, 0x03	; 3
     c86:	05 e0       	ldi	r16, 0x05	; 5
     c88:	ee 24       	eor	r14, r14
     c8a:	e3 94       	inc	r14
     c8c:	ef de       	rcall	.-546    	; 0xa6c <lcd_draw>
			lcd_draw(small_four, 66, 16, 3, 5, BLACK);
     c8e:	8b ed       	ldi	r24, 0xDB	; 219
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	62 e4       	ldi	r22, 0x42	; 66
     c94:	40 e1       	ldi	r20, 0x10	; 16
     c96:	23 e0       	ldi	r18, 0x03	; 3
     c98:	e9 de       	rcall	.-558    	; 0xa6c <lcd_draw>
			lcd_draw(small_four, 66, 32, 3, 5, BLACK);
     c9a:	8b ed       	ldi	r24, 0xDB	; 219
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	11 c0       	rjmp	.+34     	; 0xcc2 <draw_values_line+0x7e>
			break;
		case MAX40:
		default:
			lcd_draw(small_four, 66, 8, 3, 5, BLACK);
     ca0:	8b ed       	ldi	r24, 0xDB	; 219
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	62 e4       	ldi	r22, 0x42	; 66
     ca6:	48 e0       	ldi	r20, 0x08	; 8
     ca8:	23 e0       	ldi	r18, 0x03	; 3
     caa:	05 e0       	ldi	r16, 0x05	; 5
     cac:	ee 24       	eor	r14, r14
     cae:	e3 94       	inc	r14
     cb0:	dd de       	rcall	.-582    	; 0xa6c <lcd_draw>
			lcd_draw(small_two, 66, 16, 3, 5, BLACK);
     cb2:	89 ed       	ldi	r24, 0xD9	; 217
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	62 e4       	ldi	r22, 0x42	; 66
     cb8:	40 e1       	ldi	r20, 0x10	; 16
     cba:	23 e0       	ldi	r18, 0x03	; 3
     cbc:	d7 de       	rcall	.-594    	; 0xa6c <lcd_draw>
			lcd_draw(small_two, 66, 32, 3, 5, BLACK);
     cbe:	89 ed       	ldi	r24, 0xD9	; 217
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	62 e4       	ldi	r22, 0x42	; 66
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	23 e0       	ldi	r18, 0x03	; 3
     cc8:	d1 de       	rcall	.-606    	; 0xa6c <lcd_draw>
	}
}
     cca:	0f 91       	pop	r16
     ccc:	ef 90       	pop	r14
     cce:	08 95       	ret

00000cd0 <lcd_put_char>:
			lcd_pixel(x1, y1, c);
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
     cd0:	9f 92       	push	r9
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	f8 2e       	mov	r15, r24
     ce8:	96 2e       	mov	r9, r22
     cea:	a2 2e       	mov	r10, r18
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     cec:	85 e0       	ldi	r24, 0x05	; 5
     cee:	48 9f       	mul	r20, r24
     cf0:	a0 01       	movw	r20, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	8a 01       	movw	r16, r20
     cf6:	00 5a       	subi	r16, 0xA0	; 160
     cf8:	10 40       	sbci	r17, 0x00	; 0
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     cfa:	75 e6       	ldi	r23, 0x65	; 101
     cfc:	c7 2e       	mov	r12, r23
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	d7 2e       	mov	r13, r23
     d02:	c4 0e       	add	r12, r20
     d04:	d5 1e       	adc	r13, r21
     d06:	1b c0       	rjmp	.+54     	; 0xd3e <lcd_put_char+0x6e>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     d08:	8b 2d       	mov	r24, r11
     d0a:	9e 2d       	mov	r25, r14
     d0c:	42 d8       	rcall	.-3964   	; 0xfffffd92 <__eeprom_end+0xff7efba3>
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0c 2e       	mov	r0, r28
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <lcd_put_char+0x48>
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <lcd_put_char+0x44>
     d1c:	80 ff       	sbrs	r24, 0
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <lcd_put_char+0x5a>
     d20:	69 2d       	mov	r22, r9
     d22:	6c 0f       	add	r22, r28
     d24:	8f 2d       	mov	r24, r15
     d26:	4a 2d       	mov	r20, r10
     d28:	0b da       	rcall	.-3050   	; 0x140 <lcd_pixel>
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
     d2a:	21 96       	adiw	r28, 0x01	; 1
     d2c:	c8 30       	cpi	r28, 0x08	; 8
     d2e:	d1 05       	cpc	r29, r1
     d30:	59 f7       	brne	.-42     	; 0xd08 <lcd_put_char+0x38>
     d32:	0f 5f       	subi	r16, 0xFF	; 255
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	f3 94       	inc	r15
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     d38:	0c 15       	cp	r16, r12
     d3a:	1d 05       	cpc	r17, r13
     d3c:	29 f0       	breq	.+10     	; 0xd48 <lcd_put_char+0x78>
     d3e:	b0 2e       	mov	r11, r16
     d40:	e1 2e       	mov	r14, r17
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
     d46:	e0 cf       	rjmp	.-64     	; 0xd08 <lcd_put_char+0x38>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
		}
	}
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	bf 90       	pop	r11
     d5a:	af 90       	pop	r10
     d5c:	9f 90       	pop	r9
     d5e:	08 95       	ret

00000d60 <lcd_put_string>:

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	d8 2e       	mov	r13, r24
     d74:	b6 2e       	mov	r11, r22
     d76:	7a 01       	movw	r14, r20
     d78:	c2 2e       	mov	r12, r18
	int chars_printed = strlen(s);
     d7a:	ea 01       	movw	r28, r20
     d7c:	09 90       	ld	r0, Y+
     d7e:	00 20       	and	r0, r0
     d80:	e9 f7       	brne	.-6      	; 0xd7c <lcd_put_string+0x1c>
     d82:	21 97       	sbiw	r28, 0x01	; 1
     d84:	c4 1b       	sub	r28, r20
     d86:	d5 0b       	sbc	r29, r21
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <lcd_put_string+0x46>
	for (int i = 0; i< chars_printed; i++) {
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
     d8e:	f7 01       	movw	r30, r14
     d90:	e0 0f       	add	r30, r16
     d92:	f1 1f       	adc	r31, r17
     d94:	8d 2d       	mov	r24, r13
     d96:	6b 2d       	mov	r22, r11
     d98:	40 81       	ld	r20, Z
     d9a:	2c 2d       	mov	r18, r12
     d9c:	99 df       	rcall	.-206    	; 0xcd0 <lcd_put_char>
	}
}

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
	int chars_printed = strlen(s);
	for (int i = 0; i< chars_printed; i++) {
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	d8 0e       	add	r13, r24
     da6:	0c 17       	cp	r16, r28
     da8:	1d 07       	cpc	r17, r29
     daa:	8c f3       	brlt	.-30     	; 0xd8e <lcd_put_string+0x2e>
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}
     dac:	ce 01       	movw	r24, r28
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	bf 90       	pop	r11
     dc0:	08 95       	ret

00000dc2 <draw_current_value>:
	byte scale_top = sc_top(lt, value);
	lcd_line(78, scale_top, 78, 37, BLACK);
	lcd_line(79, scale_top, 79, 37, BLACK);
}
 
void draw_current_value(int value) {
     dc2:	ef 92       	push	r14
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <draw_current_value+0xc>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <draw_current_value+0xe>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	8c 01       	movw	r16, r24
	char buf[5];
	const char py = 40;
	char lcd_print_ptr = 1;
	int work_value = value;
	char is_negative = t_sign(work_value);
	if (is_negative) {
     dd8:	17 fd       	sbrc	r17, 7
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <draw_current_value+0x20>
     ddc:	ee 24       	eor	r14, r14
     dde:	e3 94       	inc	r14
     de0:	0a c0       	rjmp	.+20     	; 0xdf6 <draw_current_value+0x34>
		lcd_put_char(lcd_print_ptr, py, '-', BLACK);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	68 e2       	ldi	r22, 0x28	; 40
     de6:	4d e2       	ldi	r20, 0x2D	; 45
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	72 df       	rcall	.-284    	; 0xcd0 <lcd_put_char>
		lcd_print_ptr += 6;
		work_value = ~work_value;
     dec:	c8 01       	movw	r24, r16
     dee:	80 95       	com	r24
     df0:	90 95       	com	r25
     df2:	a7 e0       	ldi	r26, 0x07	; 7
     df4:	ea 2e       	mov	r14, r26
	}
	itoa(t_integer_part(work_value), buf, 10);
     df6:	29 2f       	mov	r18, r25
     df8:	33 27       	eor	r19, r19
     dfa:	27 fd       	sbrc	r18, 7
     dfc:	3a 95       	dec	r19
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	27 70       	andi	r18, 0x07	; 7
     e02:	30 70       	andi	r19, 0x00	; 0
     e04:	e4 e0       	ldi	r30, 0x04	; 4
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	ea 95       	dec	r30
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <draw_current_value+0x44>
     e0e:	82 95       	swap	r24
     e10:	8f 70       	andi	r24, 0x0F	; 15
     e12:	82 2b       	or	r24, r18
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	8e 01       	movw	r16, r28
     e18:	0f 5f       	subi	r16, 0xFF	; 255
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	b8 01       	movw	r22, r16
     e1e:	4a e0       	ldi	r20, 0x0A	; 10
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	98 d7       	rcall	.+3888   	; 0x1d54 <itoa>
	char chars_printed = lcd_put_string(lcd_print_ptr, py, buf, BLACK);
     e24:	8e 2d       	mov	r24, r14
     e26:	68 e2       	ldi	r22, 0x28	; 40
     e28:	a8 01       	movw	r20, r16
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	99 df       	rcall	.-206    	; 0xd60 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e2e:	06 e0       	ldi	r16, 0x06	; 6
     e30:	80 9f       	mul	r24, r16
     e32:	c0 01       	movw	r24, r0
     e34:	11 24       	eor	r1, r1
     e36:	1e 2d       	mov	r17, r14
     e38:	18 0f       	add	r17, r24
	lcd_put_char(lcd_print_ptr, py, '.', BLACK);
     e3a:	81 2f       	mov	r24, r17
     e3c:	68 e2       	ldi	r22, 0x28	; 40
     e3e:	4e e2       	ldi	r20, 0x2E	; 46
     e40:	21 e0       	ldi	r18, 0x01	; 1
     e42:	46 df       	rcall	.-372    	; 0xcd0 <lcd_put_char>
	lcd_print_ptr += 6;
     e44:	1a 5f       	subi	r17, 0xFA	; 250
	chars_printed = lcd_put_string(lcd_print_ptr, py, "0", BLACK);
     e46:	81 2f       	mov	r24, r17
     e48:	68 e2       	ldi	r22, 0x28	; 40
     e4a:	40 e6       	ldi	r20, 0x60	; 96
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	87 df       	rcall	.-242    	; 0xd60 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e52:	80 9f       	mul	r24, r16
     e54:	c0 01       	movw	r24, r0
     e56:	11 24       	eor	r1, r1
     e58:	18 0f       	add	r17, r24
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
     e5a:	8d ee       	ldi	r24, 0xED	; 237
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	61 2f       	mov	r22, r17
     e60:	48 e2       	ldi	r20, 0x28	; 40
     e62:	25 e0       	ldi	r18, 0x05	; 5
     e64:	03 e0       	ldi	r16, 0x03	; 3
     e66:	ee 24       	eor	r14, r14
     e68:	e3 94       	inc	r14
     e6a:	00 de       	rcall	.-1024   	; 0xa6c <lcd_draw>
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
     e6c:	81 2f       	mov	r24, r17
     e6e:	8a 5f       	subi	r24, 0xFA	; 250
     e70:	68 e2       	ldi	r22, 0x28	; 40
     e72:	43 e4       	ldi	r20, 0x43	; 67
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	2c df       	rcall	.-424    	; 0xcd0 <lcd_put_char>
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <print_hook>:

char* cmps[] = {"=", "<", ">", "<=", ">="};
char* acts[] = {"nop", "set", "res"};
char* ports[] = {"Z", "Y", "X", "W"};

void print_hook(int index) {
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <print_hook+0x10>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <print_hook+0x12>
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	byte py = (index + 1) * 9 + 3;
     ea6:	ac 01       	movw	r20, r24
     ea8:	4f 5f       	subi	r20, 0xFF	; 255
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	9a 01       	movw	r18, r20
     eae:	63 e0       	ldi	r22, 0x03	; 3
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	6a 95       	dec	r22
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <print_hook+0x22>
     eb8:	24 0f       	add	r18, r20
     eba:	35 1f       	adc	r19, r21
     ebc:	33 e0       	ldi	r19, 0x03	; 3
     ebe:	d3 2e       	mov	r13, r19
     ec0:	d2 0e       	add	r13, r18
	lcd_put_string(1, py, cmps[hooks[index].op], BLACK);
     ec2:	7c 01       	movw	r14, r24
     ec4:	ee 0c       	add	r14, r14
     ec6:	ff 1c       	adc	r15, r15
     ec8:	ee 0c       	add	r14, r14
     eca:	ff 1c       	adc	r15, r15
     ecc:	e8 0e       	add	r14, r24
     ece:	f9 1e       	adc	r15, r25
     ed0:	8f e6       	ldi	r24, 0x6F	; 111
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	e8 0e       	add	r14, r24
     ed6:	f9 1e       	adc	r15, r25
     ed8:	d7 01       	movw	r26, r14
     eda:	ec 91       	ld	r30, X
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e5 57       	subi	r30, 0x75	; 117
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	40 81       	ld	r20, Z
     ee8:	51 81       	ldd	r21, Z+1	; 0x01
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	6d 2d       	mov	r22, r13
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	37 df       	rcall	.-402    	; 0xd60 <lcd_put_string>
	int value = hooks[index].value;
	char buf[5];
	itoa(value, buf, 10);
     ef2:	f7 01       	movw	r30, r14
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	92 81       	ldd	r25, Z+2	; 0x02
     ef8:	8e 01       	movw	r16, r28
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	b8 01       	movw	r22, r16
     f00:	4a e0       	ldi	r20, 0x0A	; 10
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	27 d7       	rcall	.+3662   	; 0x1d54 <itoa>
	lcd_put_string(18, py, buf, BLACK);
     f06:	82 e1       	ldi	r24, 0x12	; 18
     f08:	6d 2d       	mov	r22, r13
     f0a:	a8 01       	movw	r20, r16
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	28 df       	rcall	.-432    	; 0xd60 <lcd_put_string>
	lcd_put_string(42, py, acts[hooks[index].act], BLACK);
     f10:	d7 01       	movw	r26, r14
     f12:	13 96       	adiw	r26, 0x03	; 3
     f14:	ec 91       	ld	r30, X
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	ef 55       	subi	r30, 0x5F	; 95
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	40 81       	ld	r20, Z
     f22:	51 81       	ldd	r21, Z+1	; 0x01
     f24:	8a e2       	ldi	r24, 0x2A	; 42
     f26:	6d 2d       	mov	r22, r13
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	1a df       	rcall	.-460    	; 0xd60 <lcd_put_string>
	if (hooks[index].act != nop) {
     f2c:	f7 01       	movw	r30, r14
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	88 23       	and	r24, r24
     f32:	61 f0       	breq	.+24     	; 0xf4c <print_hook+0xbe>
		lcd_put_string(68, py, ports[hooks[index].port - 4], BLACK);
     f34:	e4 81       	ldd	r30, Z+4	; 0x04
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	e9 55       	subi	r30, 0x59	; 89
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	40 81       	ld	r20, Z
     f42:	51 81       	ldd	r21, Z+1	; 0x01
     f44:	84 e4       	ldi	r24, 0x44	; 68
     f46:	6d 2d       	mov	r22, r13
     f48:	21 e0       	ldi	r18, 0x01	; 1
     f4a:	0a df       	rcall	.-492    	; 0xd60 <lcd_put_string>
	}
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	08 95       	ret

00000f66 <lcd_clear>:
	while ((SPSR & 0x80) != 0x80);
	LCD_PORT |= (1 << LCD_CE_PIN);
}

void lcd_clear(void) {
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
     f66:	88 ef       	ldi	r24, 0xF8	; 248
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	e3 e8       	ldi	r30, 0x83	; 131
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	df 01       	movw	r26, r30
     f70:	9c 01       	movw	r18, r24
     f72:	1d 92       	st	X+, r1
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	30 40       	sbci	r19, 0x00	; 0
     f78:	e1 f7       	brne	.-8      	; 0xf72 <lcd_clear+0xc>
	LWM = 0;
     f7a:	10 92 7e 03 	sts	0x037E, r1
     f7e:	10 92 7d 03 	sts	0x037D, r1
	HWM = LCD_CACHE_SIZE - 1;
     f82:	87 ef       	ldi	r24, 0xF7	; 247
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	90 93 7c 03 	sts	0x037C, r25
     f8a:	80 93 7b 03 	sts	0x037B, r24
}
     f8e:	08 95       	ret

00000f90 <lcd_init>:
	LWM = LCD_CACHE_SIZE - 1;
	HWM = 0;
}

void lcd_init(void) {
	LCD_PORT |= (1 << LCD_RST_PIN);
     f90:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DDR |= (1 << LCD_RST_PIN) | (1 << LCD_DC_PIN) | (1 << LCD_CE_PIN) | (1 << SPI_MOSI_PIN) | (1 << SPI_CLK_PIN);
     f92:	87 b3       	in	r24, 0x17	; 23
     f94:	8e 63       	ori	r24, 0x3E	; 62
     f96:	87 bb       	out	0x17, r24	; 23
	wait();
	LCD_PORT &= ~(1 << LCD_RST_PIN);
     f98:	c4 98       	cbi	0x18, 4	; 24
	wait();
	LCD_PORT |= (1 << LCD_RST_PIN);
     f9a:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = 0x50;
     f9c:	80 e5       	ldi	r24, 0x50	; 80
     f9e:	8d b9       	out	0x0d, r24	; 13
	LCD_PORT |= (1 << LCD_CE_PIN);
     fa0:	c2 9a       	sbi	0x18, 2	; 24
	lcd_send_cmd(0x21);
     fa2:	81 e2       	ldi	r24, 0x21	; 33
     fa4:	64 d8       	rcall	.-3896   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0xC8);
     fa6:	88 ec       	ldi	r24, 0xC8	; 200
     fa8:	62 d8       	rcall	.-3900   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x06);
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	60 d8       	rcall	.-3904   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x13);
     fae:	83 e1       	ldi	r24, 0x13	; 19
     fb0:	5e d8       	rcall	.-3908   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x20);
     fb2:	80 e2       	ldi	r24, 0x20	; 32
     fb4:	5c d8       	rcall	.-3912   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x0C);
     fb6:	8c e0       	ldi	r24, 0x0C	; 12
     fb8:	5a d8       	rcall	.-3916   	; 0x6e <lcd_send_cmd>
	lcd_clear();
     fba:	d5 df       	rcall	.-86     	; 0xf66 <lcd_clear>
	lcd_update();
     fbc:	5f d8       	rcall	.-3906   	; 0x7c <lcd_update>
}
     fbe:	08 95       	ret

00000fc0 <main>:
		}
	}
	apply_port();
} 

int main(void) {
     fc0:	2f 92       	push	r2
     fc2:	3f 92       	push	r3
     fc4:	4f 92       	push	r4
     fc6:	5f 92       	push	r5
     fc8:	6f 92       	push	r6
     fca:	7f 92       	push	r7
     fcc:	8f 92       	push	r8
     fce:	9f 92       	push	r9
     fd0:	af 92       	push	r10
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     fea:	d2 df       	rcall	.-92     	; 0xf90 <lcd_init>

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, Y = 5, X = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
     fec:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
     fee:	80 ef       	ldi	r24, 0xF0	; 240
     ff0:	81 bb       	out	0x11, r24	; 17
ISR(TIMER0_OVF_vect) {
    __clock__ += RATE;
}

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
     ff6:	89 b7       	in	r24, 0x39	; 57
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	89 bf       	out	0x39, r24	; 57
	sei();
     ffc:	78 94       	sei

char port_status[PORT_SIZE] = {0, 0, 0, 0};

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].port = Z;
     ffe:	84 e0       	ldi	r24, 0x04	; 4
    1000:	80 93 78 01 	sts	0x0178, r24
    1004:	80 93 7d 01 	sts	0x017D, r24
    1008:	80 93 82 01 	sts	0x0182, r24
	lcd_init();
	io_init();
	clock_init();
	hooks_init();
	
	hooks[0].port = X;
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	80 93 73 01 	sts	0x0173, r24
	hooks[0].act = set;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 72 01 	sts	0x0172, r24
	hooks[0].op = eq;
    1018:	10 92 6f 01 	sts	0x016F, r1
	hooks[0].value = 24;
    101c:	88 e1       	ldi	r24, 0x18	; 24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 71 01 	sts	0x0171, r25
    1024:	80 93 70 01 	sts	0x0170, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	9e e4       	ldi	r25, 0x4E	; 78
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <main+0x6c>

	while (1) {
		_delay_ms(10);
		
		handle_hooks(shown_value);
    1030:	80 91 ec 00 	lds	r24, 0x00EC
    1034:	90 91 ed 00 	lds	r25, 0x00ED
    1038:	a7 db       	rcall	.-2226   	; 0x788 <handle_hooks>
		
		/* 
		 * Non-blocking temp conversion
		 */
		 
		if (!conversion) {
    103a:	80 91 e8 00 	lds	r24, 0x00E8
    103e:	88 23       	and	r24, r24
    1040:	21 f5       	brne	.+72     	; 0x108a <main+0xca>
			dt_convert();
    1042:	4b da       	rcall	.-2922   	; 0x4da <dt_convert>
			conversion = 1;
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	20 93 e8 00 	sts	0x00E8, r18
			conversion_start = clock();
    104a:	80 91 b8 00 	lds	r24, 0x00B8
    104e:	80 93 e0 00 	sts	0x00E0, r24
    1052:	80 91 b9 00 	lds	r24, 0x00B9
    1056:	80 93 e1 00 	sts	0x00E1, r24
    105a:	80 91 ba 00 	lds	r24, 0x00BA
    105e:	80 93 e2 00 	sts	0x00E2, r24
    1062:	80 91 bb 00 	lds	r24, 0x00BB
    1066:	80 93 e3 00 	sts	0x00E3, r24
    106a:	80 91 bc 00 	lds	r24, 0x00BC
    106e:	80 93 e4 00 	sts	0x00E4, r24
    1072:	80 91 bd 00 	lds	r24, 0x00BD
    1076:	80 93 e5 00 	sts	0x00E5, r24
    107a:	80 91 be 00 	lds	r24, 0x00BE
    107e:	80 93 e6 00 	sts	0x00E6, r24
    1082:	80 91 bf 00 	lds	r24, 0x00BF
    1086:	80 93 e7 00 	sts	0x00E7, r24
		}
		
		if (clock() - conversion_start > CONV_TIME) {
    108a:	90 91 b8 00 	lds	r25, 0x00B8
    108e:	40 91 b9 00 	lds	r20, 0x00B9
    1092:	70 91 ba 00 	lds	r23, 0x00BA
    1096:	f0 91 bb 00 	lds	r31, 0x00BB
    109a:	b0 91 bc 00 	lds	r27, 0x00BC
    109e:	00 91 bd 00 	lds	r16, 0x00BD
    10a2:	e0 90 be 00 	lds	r14, 0x00BE
    10a6:	60 91 bf 00 	lds	r22, 0x00BF
    10aa:	80 91 e0 00 	lds	r24, 0x00E0
    10ae:	20 91 e1 00 	lds	r18, 0x00E1
    10b2:	e0 91 e2 00 	lds	r30, 0x00E2
    10b6:	a0 91 e3 00 	lds	r26, 0x00E3
    10ba:	f0 90 e4 00 	lds	r15, 0x00E4
    10be:	d0 90 e5 00 	lds	r13, 0x00E5
    10c2:	b0 90 e6 00 	lds	r11, 0x00E6
    10c6:	a0 90 e7 00 	lds	r10, 0x00E7
    10ca:	c9 2e       	mov	r12, r25
    10cc:	c8 1a       	sub	r12, r24
    10ce:	31 e0       	ldi	r19, 0x01	; 1
    10d0:	9c 15       	cp	r25, r12
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <main+0x116>
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	84 2f       	mov	r24, r20
    10d8:	82 1b       	sub	r24, r18
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	48 17       	cp	r20, r24
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <main+0x122>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	58 2f       	mov	r21, r24
    10e4:	53 1b       	sub	r21, r19
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	85 17       	cp	r24, r21
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <main+0x12e>
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	29 2b       	or	r18, r25
    10f0:	87 2f       	mov	r24, r23
    10f2:	8e 1b       	sub	r24, r30
    10f4:	31 e0       	ldi	r19, 0x01	; 1
    10f6:	78 17       	cp	r23, r24
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <main+0x13c>
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	18 2f       	mov	r17, r24
    10fe:	12 1b       	sub	r17, r18
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	81 17       	cp	r24, r17
    1104:	08 f0       	brcs	.+2      	; 0x1108 <main+0x148>
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	39 2b       	or	r19, r25
    110a:	8f 2f       	mov	r24, r31
    110c:	8a 1b       	sub	r24, r26
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	f8 17       	cp	r31, r24
    1112:	08 f0       	brcs	.+2      	; 0x1116 <main+0x156>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	e8 2f       	mov	r30, r24
    1118:	e3 1b       	sub	r30, r19
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	8e 17       	cp	r24, r30
    111e:	08 f0       	brcs	.+2      	; 0x1122 <main+0x162>
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	29 2b       	or	r18, r25
    1124:	8b 2f       	mov	r24, r27
    1126:	8f 19       	sub	r24, r15
    1128:	31 e0       	ldi	r19, 0x01	; 1
    112a:	b8 17       	cp	r27, r24
    112c:	08 f0       	brcs	.+2      	; 0x1130 <main+0x170>
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	78 2f       	mov	r23, r24
    1132:	72 1b       	sub	r23, r18
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	87 17       	cp	r24, r23
    1138:	08 f0       	brcs	.+2      	; 0x113c <main+0x17c>
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	39 2b       	or	r19, r25
    113e:	80 2f       	mov	r24, r16
    1140:	8d 19       	sub	r24, r13
    1142:	21 e0       	ldi	r18, 0x01	; 1
    1144:	08 17       	cp	r16, r24
    1146:	08 f0       	brcs	.+2      	; 0x114a <main+0x18a>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	48 2f       	mov	r20, r24
    114c:	43 1b       	sub	r20, r19
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	84 17       	cp	r24, r20
    1152:	08 f0       	brcs	.+2      	; 0x1156 <main+0x196>
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	29 2b       	or	r18, r25
    1158:	8e 2d       	mov	r24, r14
    115a:	8b 19       	sub	r24, r11
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	e8 16       	cp	r14, r24
    1160:	08 f0       	brcs	.+2      	; 0x1164 <main+0x1a4>
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	38 2f       	mov	r19, r24
    1166:	32 1b       	sub	r19, r18
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	83 17       	cp	r24, r19
    116c:	08 f0       	brcs	.+2      	; 0x1170 <main+0x1b0>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	92 2b       	or	r25, r18
    1172:	6a 19       	sub	r22, r10
    1174:	69 17       	cp	r22, r25
    1176:	89 f4       	brne	.+34     	; 0x119a <main+0x1da>
    1178:	33 23       	and	r19, r19
    117a:	79 f4       	brne	.+30     	; 0x119a <main+0x1da>
    117c:	44 23       	and	r20, r20
    117e:	69 f4       	brne	.+26     	; 0x119a <main+0x1da>
    1180:	77 23       	and	r23, r23
    1182:	59 f4       	brne	.+22     	; 0x119a <main+0x1da>
    1184:	ee 23       	and	r30, r30
    1186:	49 f4       	brne	.+18     	; 0x119a <main+0x1da>
    1188:	11 23       	and	r17, r17
    118a:	39 f4       	brne	.+14     	; 0x119a <main+0x1da>
    118c:	53 30       	cpi	r21, 0x03	; 3
    118e:	28 f4       	brcc	.+10     	; 0x119a <main+0x1da>
    1190:	52 30       	cpi	r21, 0x02	; 2
    1192:	51 f4       	brne	.+20     	; 0x11a8 <main+0x1e8>
    1194:	3e ee       	ldi	r19, 0xEE	; 238
    1196:	3c 15       	cp	r19, r12
    1198:	38 f4       	brcc	.+14     	; 0x11a8 <main+0x1e8>
			actual_t = dt_read();
    119a:	a7 d9       	rcall	.-3250   	; 0x4ea <dt_read>
    119c:	90 93 eb 00 	sts	0x00EB, r25
    11a0:	80 93 ea 00 	sts	0x00EA, r24
			conversion = 0;
    11a4:	10 92 e8 00 	sts	0x00E8, r1
}

timestamp clock(void) {
	return __clock__;
    11a8:	c0 90 b8 00 	lds	r12, 0x00B8
    11ac:	b0 90 b9 00 	lds	r11, 0x00B9
    11b0:	a0 90 ba 00 	lds	r10, 0x00BA
    11b4:	90 90 bb 00 	lds	r9, 0x00BB
    11b8:	80 90 bc 00 	lds	r8, 0x00BC
    11bc:	70 90 bd 00 	lds	r7, 0x00BD
    11c0:	60 90 be 00 	lds	r6, 0x00BE
    11c4:	40 91 bf 00 	lds	r20, 0x00BF
    11c8:	49 83       	std	Y+1, r20	; 0x01
		
		/*
		 * Value update with chosen period
		 */
		
		if (clock() - last_upd >= ((usp * 1000) - CYCLE_CORRECTION)) {
    11ca:	80 91 68 00 	lds	r24, 0x0068
    11ce:	90 91 69 00 	lds	r25, 0x0069
    11d2:	fc 01       	movw	r30, r24
    11d4:	28 ee       	ldi	r18, 0xE8	; 232
    11d6:	33 e0       	ldi	r19, 0x03	; 3
    11d8:	e2 9f       	mul	r30, r18
    11da:	c0 01       	movw	r24, r0
    11dc:	e3 9f       	mul	r30, r19
    11de:	90 0d       	add	r25, r0
    11e0:	f2 9f       	mul	r31, r18
    11e2:	90 0d       	add	r25, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	84 56       	subi	r24, 0x64	; 100
    11e8:	90 40       	sbci	r25, 0x00	; 0
    11ea:	8c 01       	movw	r16, r24
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	80 91 ee 00 	lds	r24, 0x00EE
    11fc:	e0 91 ef 00 	lds	r30, 0x00EF
    1200:	f0 91 f0 00 	lds	r31, 0x00F0
    1204:	a0 91 f1 00 	lds	r26, 0x00F1
    1208:	b0 91 f2 00 	lds	r27, 0x00F2
    120c:	50 90 f3 00 	lds	r5, 0x00F3
    1210:	40 90 f4 00 	lds	r4, 0x00F4
    1214:	20 90 f5 00 	lds	r2, 0x00F5
    1218:	3c 2c       	mov	r3, r12
    121a:	38 1a       	sub	r3, r24
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	c3 14       	cp	r12, r3
    1220:	08 f0       	brcs	.+2      	; 0x1224 <main+0x264>
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	8b 2d       	mov	r24, r11
    1226:	8e 1b       	sub	r24, r30
    1228:	e1 e0       	ldi	r30, 0x01	; 1
    122a:	b8 16       	cp	r11, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <main+0x270>
    122e:	e0 e0       	ldi	r30, 0x00	; 0
    1230:	d8 2e       	mov	r13, r24
    1232:	d9 1a       	sub	r13, r25
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	8d 15       	cp	r24, r13
    1238:	08 f0       	brcs	.+2      	; 0x123c <main+0x27c>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	e9 2b       	or	r30, r25
    123e:	8a 2d       	mov	r24, r10
    1240:	8f 1b       	sub	r24, r31
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	a8 16       	cp	r10, r24
    1246:	08 f0       	brcs	.+2      	; 0x124a <main+0x28a>
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	e8 2e       	mov	r14, r24
    124c:	ee 1a       	sub	r14, r30
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	8e 15       	cp	r24, r14
    1252:	08 f0       	brcs	.+2      	; 0x1256 <main+0x296>
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	f9 2b       	or	r31, r25
    1258:	89 2d       	mov	r24, r9
    125a:	8a 1b       	sub	r24, r26
    125c:	e1 e0       	ldi	r30, 0x01	; 1
    125e:	98 16       	cp	r9, r24
    1260:	08 f0       	brcs	.+2      	; 0x1264 <main+0x2a4>
    1262:	e0 e0       	ldi	r30, 0x00	; 0
    1264:	f8 2e       	mov	r15, r24
    1266:	ff 1a       	sub	r15, r31
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	8f 15       	cp	r24, r15
    126c:	08 f0       	brcs	.+2      	; 0x1270 <main+0x2b0>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	e9 2b       	or	r30, r25
    1272:	88 2d       	mov	r24, r8
    1274:	8b 1b       	sub	r24, r27
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	88 16       	cp	r8, r24
    127a:	08 f0       	brcs	.+2      	; 0x127e <main+0x2be>
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	b8 2f       	mov	r27, r24
    1280:	be 1b       	sub	r27, r30
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	8b 17       	cp	r24, r27
    1286:	08 f0       	brcs	.+2      	; 0x128a <main+0x2ca>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	f9 2b       	or	r31, r25
    128c:	87 2d       	mov	r24, r7
    128e:	85 19       	sub	r24, r5
    1290:	e1 e0       	ldi	r30, 0x01	; 1
    1292:	78 16       	cp	r7, r24
    1294:	08 f0       	brcs	.+2      	; 0x1298 <main+0x2d8>
    1296:	e0 e0       	ldi	r30, 0x00	; 0
    1298:	a8 2f       	mov	r26, r24
    129a:	af 1b       	sub	r26, r31
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	8a 17       	cp	r24, r26
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <main+0x2e4>
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	e9 2b       	or	r30, r25
    12a6:	86 2d       	mov	r24, r6
    12a8:	84 19       	sub	r24, r4
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	68 16       	cp	r6, r24
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <main+0x2f2>
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	58 2e       	mov	r5, r24
    12b4:	5e 1a       	sub	r5, r30
    12b6:	e1 e0       	ldi	r30, 0x01	; 1
    12b8:	85 15       	cp	r24, r5
    12ba:	08 f0       	brcs	.+2      	; 0x12be <main+0x2fe>
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	9e 2b       	or	r25, r30
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	82 19       	sub	r24, r2
    12c4:	89 1b       	sub	r24, r25
    12c6:	87 17       	cp	r24, r23
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <main+0x30c>
    12ca:	41 c0       	rjmp	.+130    	; 0x134e <main+0x38e>
    12cc:	78 17       	cp	r23, r24
    12ce:	d1 f4       	brne	.+52     	; 0x1304 <main+0x344>
    12d0:	56 16       	cp	r5, r22
    12d2:	e8 f1       	brcs	.+122    	; 0x134e <main+0x38e>
    12d4:	65 15       	cp	r22, r5
    12d6:	b1 f4       	brne	.+44     	; 0x1304 <main+0x344>
    12d8:	a5 17       	cp	r26, r21
    12da:	c8 f1       	brcs	.+114    	; 0x134e <main+0x38e>
    12dc:	5a 17       	cp	r21, r26
    12de:	91 f4       	brne	.+36     	; 0x1304 <main+0x344>
    12e0:	b4 17       	cp	r27, r20
    12e2:	a8 f1       	brcs	.+106    	; 0x134e <main+0x38e>
    12e4:	4b 17       	cp	r20, r27
    12e6:	71 f4       	brne	.+28     	; 0x1304 <main+0x344>
    12e8:	f3 16       	cp	r15, r19
    12ea:	88 f1       	brcs	.+98     	; 0x134e <main+0x38e>
    12ec:	3f 15       	cp	r19, r15
    12ee:	51 f4       	brne	.+20     	; 0x1304 <main+0x344>
    12f0:	e2 16       	cp	r14, r18
    12f2:	68 f1       	brcs	.+90     	; 0x134e <main+0x38e>
    12f4:	2e 15       	cp	r18, r14
    12f6:	31 f4       	brne	.+12     	; 0x1304 <main+0x344>
    12f8:	d1 16       	cp	r13, r17
    12fa:	48 f1       	brcs	.+82     	; 0x134e <main+0x38e>
    12fc:	1d 15       	cp	r17, r13
    12fe:	11 f4       	brne	.+4      	; 0x1304 <main+0x344>
    1300:	30 16       	cp	r3, r16
    1302:	28 f1       	brcs	.+74     	; 0x134e <main+0x38e>
			shown_value = actual_t;
    1304:	20 91 ea 00 	lds	r18, 0x00EA
    1308:	30 91 eb 00 	lds	r19, 0x00EB
    130c:	30 93 ed 00 	sts	0x00ED, r19
    1310:	20 93 ec 00 	sts	0x00EC, r18
    1314:	ed ef       	ldi	r30, 0xFD	; 253
    1316:	f0 e0       	ldi	r31, 0x00	; 0
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	81 93       	st	Z+, r24
    131e:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	ed 36       	cpi	r30, 0x6D	; 109
    1324:	f4 07       	cpc	r31, r20
    1326:	c1 f7       	brne	.-16     	; 0x1318 <main+0x358>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
    1328:	31 83       	std	Z+1, r19	; 0x01
    132a:	20 83       	st	Z, r18
		 */
		
		if (clock() - last_upd >= ((usp * 1000) - CYCLE_CORRECTION)) {
			shown_value = actual_t;
 			add_new_chart_value(shown_value);
			last_upd = clock();
    132c:	c0 92 ee 00 	sts	0x00EE, r12
    1330:	b0 92 ef 00 	sts	0x00EF, r11
    1334:	a0 92 f0 00 	sts	0x00F0, r10
    1338:	90 92 f1 00 	sts	0x00F1, r9
    133c:	80 92 f2 00 	sts	0x00F2, r8
    1340:	70 92 f3 00 	sts	0x00F3, r7
    1344:	60 92 f4 00 	sts	0x00F4, r6
    1348:	59 81       	ldd	r21, Y+1	; 0x01
    134a:	50 93 f5 00 	sts	0x00F5, r21
		}
		
		lcd_clear();
    134e:	0b de       	rcall	.-1002   	; 0xf66 <lcd_clear>
		
		if (io_read(D) && clock() - debounce_d > DEBOUNCE_T) {
    1350:	9b 9b       	sbis	0x13, 3	; 19
    1352:	a7 c0       	rjmp	.+334    	; 0x14a2 <main+0x4e2>
    1354:	90 91 b8 00 	lds	r25, 0x00B8
    1358:	40 91 b9 00 	lds	r20, 0x00B9
    135c:	60 91 ba 00 	lds	r22, 0x00BA
    1360:	e0 91 bb 00 	lds	r30, 0x00BB
    1364:	a0 91 bc 00 	lds	r26, 0x00BC
    1368:	10 91 bd 00 	lds	r17, 0x00BD
    136c:	f0 90 be 00 	lds	r15, 0x00BE
    1370:	50 91 bf 00 	lds	r21, 0x00BF
    1374:	80 91 d8 00 	lds	r24, 0x00D8
    1378:	20 91 d9 00 	lds	r18, 0x00D9
    137c:	70 91 da 00 	lds	r23, 0x00DA
    1380:	f0 91 db 00 	lds	r31, 0x00DB
    1384:	00 91 dc 00 	lds	r16, 0x00DC
    1388:	d0 90 dd 00 	lds	r13, 0x00DD
    138c:	b0 90 de 00 	lds	r11, 0x00DE
    1390:	a0 90 df 00 	lds	r10, 0x00DF
    1394:	c9 2e       	mov	r12, r25
    1396:	c8 1a       	sub	r12, r24
    1398:	31 e0       	ldi	r19, 0x01	; 1
    139a:	9c 15       	cp	r25, r12
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <main+0x3e0>
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	84 2f       	mov	r24, r20
    13a2:	82 1b       	sub	r24, r18
    13a4:	21 e0       	ldi	r18, 0x01	; 1
    13a6:	48 17       	cp	r20, r24
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <main+0x3ec>
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	e8 2e       	mov	r14, r24
    13ae:	e3 1a       	sub	r14, r19
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	8e 15       	cp	r24, r14
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <main+0x3f8>
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	29 2b       	or	r18, r25
    13ba:	86 2f       	mov	r24, r22
    13bc:	87 1b       	sub	r24, r23
    13be:	31 e0       	ldi	r19, 0x01	; 1
    13c0:	68 17       	cp	r22, r24
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <main+0x406>
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	b8 2f       	mov	r27, r24
    13c8:	b2 1b       	sub	r27, r18
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	8b 17       	cp	r24, r27
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <main+0x412>
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	39 2b       	or	r19, r25
    13d4:	8e 2f       	mov	r24, r30
    13d6:	8f 1b       	sub	r24, r31
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	e8 17       	cp	r30, r24
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <main+0x420>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	78 2f       	mov	r23, r24
    13e2:	73 1b       	sub	r23, r19
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	87 17       	cp	r24, r23
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <main+0x42c>
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	29 2b       	or	r18, r25
    13ee:	8a 2f       	mov	r24, r26
    13f0:	80 1b       	sub	r24, r16
    13f2:	31 e0       	ldi	r19, 0x01	; 1
    13f4:	a8 17       	cp	r26, r24
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <main+0x43a>
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	68 2f       	mov	r22, r24
    13fc:	62 1b       	sub	r22, r18
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	86 17       	cp	r24, r22
    1402:	08 f0       	brcs	.+2      	; 0x1406 <main+0x446>
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	39 2b       	or	r19, r25
    1408:	81 2f       	mov	r24, r17
    140a:	8d 19       	sub	r24, r13
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	18 17       	cp	r17, r24
    1410:	08 f0       	brcs	.+2      	; 0x1414 <main+0x454>
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	48 2f       	mov	r20, r24
    1416:	43 1b       	sub	r20, r19
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	84 17       	cp	r24, r20
    141c:	08 f0       	brcs	.+2      	; 0x1420 <main+0x460>
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	29 2b       	or	r18, r25
    1422:	8f 2d       	mov	r24, r15
    1424:	8b 19       	sub	r24, r11
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	f8 16       	cp	r15, r24
    142a:	08 f0       	brcs	.+2      	; 0x142e <main+0x46e>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	38 2f       	mov	r19, r24
    1430:	32 1b       	sub	r19, r18
    1432:	21 e0       	ldi	r18, 0x01	; 1
    1434:	83 17       	cp	r24, r19
    1436:	08 f0       	brcs	.+2      	; 0x143a <main+0x47a>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	92 2b       	or	r25, r18
    143c:	5a 19       	sub	r21, r10
    143e:	59 17       	cp	r21, r25
    1440:	79 f4       	brne	.+30     	; 0x1460 <main+0x4a0>
    1442:	33 23       	and	r19, r19
    1444:	69 f4       	brne	.+26     	; 0x1460 <main+0x4a0>
    1446:	44 23       	and	r20, r20
    1448:	59 f4       	brne	.+22     	; 0x1460 <main+0x4a0>
    144a:	66 23       	and	r22, r22
    144c:	49 f4       	brne	.+18     	; 0x1460 <main+0x4a0>
    144e:	77 23       	and	r23, r23
    1450:	39 f4       	brne	.+14     	; 0x1460 <main+0x4a0>
    1452:	bb 23       	and	r27, r27
    1454:	29 f4       	brne	.+10     	; 0x1460 <main+0x4a0>
    1456:	ee 20       	and	r14, r14
    1458:	19 f4       	brne	.+6      	; 0x1460 <main+0x4a0>
    145a:	8a ef       	ldi	r24, 0xFA	; 250
    145c:	8c 15       	cp	r24, r12
    145e:	08 f5       	brcc	.+66     	; 0x14a2 <main+0x4e2>
			change_view_mode();
    1460:	50 d9       	rcall	.-3424   	; 0x702 <change_view_mode>
			debounce_d = clock();
    1462:	80 91 b8 00 	lds	r24, 0x00B8
    1466:	80 93 d8 00 	sts	0x00D8, r24
    146a:	80 91 b9 00 	lds	r24, 0x00B9
    146e:	80 93 d9 00 	sts	0x00D9, r24
    1472:	80 91 ba 00 	lds	r24, 0x00BA
    1476:	80 93 da 00 	sts	0x00DA, r24
    147a:	80 91 bb 00 	lds	r24, 0x00BB
    147e:	80 93 db 00 	sts	0x00DB, r24
    1482:	80 91 bc 00 	lds	r24, 0x00BC
    1486:	80 93 dc 00 	sts	0x00DC, r24
    148a:	80 91 bd 00 	lds	r24, 0x00BD
    148e:	80 93 dd 00 	sts	0x00DD, r24
    1492:	80 91 be 00 	lds	r24, 0x00BE
    1496:	80 93 de 00 	sts	0x00DE, r24
    149a:	80 91 bf 00 	lds	r24, 0x00BF
    149e:	80 93 df 00 	sts	0x00DF, r24
		}
		
		if (vm == MAIN) {
    14a2:	80 91 f6 00 	lds	r24, 0x00F6
    14a6:	88 23       	and	r24, r24
    14a8:	09 f0       	breq	.+2      	; 0x14ac <main+0x4ec>
    14aa:	6a c1       	rjmp	.+724    	; 0x1780 <main+0x7c0>

			/*
			 * Handle buttons
			 */

			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    14ac:	98 9b       	sbis	0x13, 0	; 19
    14ae:	a7 c0       	rjmp	.+334    	; 0x15fe <main+0x63e>
    14b0:	90 91 b8 00 	lds	r25, 0x00B8
    14b4:	40 91 b9 00 	lds	r20, 0x00B9
    14b8:	60 91 ba 00 	lds	r22, 0x00BA
    14bc:	e0 91 bb 00 	lds	r30, 0x00BB
    14c0:	a0 91 bc 00 	lds	r26, 0x00BC
    14c4:	10 91 bd 00 	lds	r17, 0x00BD
    14c8:	f0 90 be 00 	lds	r15, 0x00BE
    14cc:	50 91 bf 00 	lds	r21, 0x00BF
    14d0:	80 91 c0 00 	lds	r24, 0x00C0
    14d4:	20 91 c1 00 	lds	r18, 0x00C1
    14d8:	70 91 c2 00 	lds	r23, 0x00C2
    14dc:	f0 91 c3 00 	lds	r31, 0x00C3
    14e0:	00 91 c4 00 	lds	r16, 0x00C4
    14e4:	d0 90 c5 00 	lds	r13, 0x00C5
    14e8:	b0 90 c6 00 	lds	r11, 0x00C6
    14ec:	a0 90 c7 00 	lds	r10, 0x00C7
    14f0:	c9 2e       	mov	r12, r25
    14f2:	c8 1a       	sub	r12, r24
    14f4:	31 e0       	ldi	r19, 0x01	; 1
    14f6:	9c 15       	cp	r25, r12
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <main+0x53c>
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	84 2f       	mov	r24, r20
    14fe:	82 1b       	sub	r24, r18
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	48 17       	cp	r20, r24
    1504:	08 f0       	brcs	.+2      	; 0x1508 <main+0x548>
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	e8 2e       	mov	r14, r24
    150a:	e3 1a       	sub	r14, r19
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	8e 15       	cp	r24, r14
    1510:	08 f0       	brcs	.+2      	; 0x1514 <main+0x554>
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	29 2b       	or	r18, r25
    1516:	86 2f       	mov	r24, r22
    1518:	87 1b       	sub	r24, r23
    151a:	31 e0       	ldi	r19, 0x01	; 1
    151c:	68 17       	cp	r22, r24
    151e:	08 f0       	brcs	.+2      	; 0x1522 <main+0x562>
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	b8 2f       	mov	r27, r24
    1524:	b2 1b       	sub	r27, r18
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	8b 17       	cp	r24, r27
    152a:	08 f0       	brcs	.+2      	; 0x152e <main+0x56e>
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	39 2b       	or	r19, r25
    1530:	8e 2f       	mov	r24, r30
    1532:	8f 1b       	sub	r24, r31
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	e8 17       	cp	r30, r24
    1538:	08 f0       	brcs	.+2      	; 0x153c <main+0x57c>
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	78 2f       	mov	r23, r24
    153e:	73 1b       	sub	r23, r19
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	87 17       	cp	r24, r23
    1544:	08 f0       	brcs	.+2      	; 0x1548 <main+0x588>
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	29 2b       	or	r18, r25
    154a:	8a 2f       	mov	r24, r26
    154c:	80 1b       	sub	r24, r16
    154e:	31 e0       	ldi	r19, 0x01	; 1
    1550:	a8 17       	cp	r26, r24
    1552:	08 f0       	brcs	.+2      	; 0x1556 <main+0x596>
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	68 2f       	mov	r22, r24
    1558:	62 1b       	sub	r22, r18
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	86 17       	cp	r24, r22
    155e:	08 f0       	brcs	.+2      	; 0x1562 <main+0x5a2>
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	39 2b       	or	r19, r25
    1564:	81 2f       	mov	r24, r17
    1566:	8d 19       	sub	r24, r13
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	18 17       	cp	r17, r24
    156c:	08 f0       	brcs	.+2      	; 0x1570 <main+0x5b0>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	48 2f       	mov	r20, r24
    1572:	43 1b       	sub	r20, r19
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	84 17       	cp	r24, r20
    1578:	08 f0       	brcs	.+2      	; 0x157c <main+0x5bc>
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	29 2b       	or	r18, r25
    157e:	8f 2d       	mov	r24, r15
    1580:	8b 19       	sub	r24, r11
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	f8 16       	cp	r15, r24
    1586:	08 f0       	brcs	.+2      	; 0x158a <main+0x5ca>
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	38 2f       	mov	r19, r24
    158c:	32 1b       	sub	r19, r18
    158e:	21 e0       	ldi	r18, 0x01	; 1
    1590:	83 17       	cp	r24, r19
    1592:	08 f0       	brcs	.+2      	; 0x1596 <main+0x5d6>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	92 2b       	or	r25, r18
    1598:	5a 19       	sub	r21, r10
    159a:	59 17       	cp	r21, r25
    159c:	79 f4       	brne	.+30     	; 0x15bc <main+0x5fc>
    159e:	33 23       	and	r19, r19
    15a0:	69 f4       	brne	.+26     	; 0x15bc <main+0x5fc>
    15a2:	44 23       	and	r20, r20
    15a4:	59 f4       	brne	.+22     	; 0x15bc <main+0x5fc>
    15a6:	66 23       	and	r22, r22
    15a8:	49 f4       	brne	.+18     	; 0x15bc <main+0x5fc>
    15aa:	77 23       	and	r23, r23
    15ac:	39 f4       	brne	.+14     	; 0x15bc <main+0x5fc>
    15ae:	bb 23       	and	r27, r27
    15b0:	29 f4       	brne	.+10     	; 0x15bc <main+0x5fc>
    15b2:	ee 20       	and	r14, r14
    15b4:	19 f4       	brne	.+6      	; 0x15bc <main+0x5fc>
    15b6:	ea ef       	ldi	r30, 0xFA	; 250
    15b8:	ec 15       	cp	r30, r12
    15ba:	08 f5       	brcc	.+66     	; 0x15fe <main+0x63e>
				change_upd_speed();
    15bc:	72 d8       	rcall	.-3868   	; 0x6a2 <change_upd_speed>
				debounce_a = clock();
    15be:	80 91 b8 00 	lds	r24, 0x00B8
    15c2:	80 93 c0 00 	sts	0x00C0, r24
    15c6:	80 91 b9 00 	lds	r24, 0x00B9
    15ca:	80 93 c1 00 	sts	0x00C1, r24
    15ce:	80 91 ba 00 	lds	r24, 0x00BA
    15d2:	80 93 c2 00 	sts	0x00C2, r24
    15d6:	80 91 bb 00 	lds	r24, 0x00BB
    15da:	80 93 c3 00 	sts	0x00C3, r24
    15de:	80 91 bc 00 	lds	r24, 0x00BC
    15e2:	80 93 c4 00 	sts	0x00C4, r24
    15e6:	80 91 bd 00 	lds	r24, 0x00BD
    15ea:	80 93 c5 00 	sts	0x00C5, r24
    15ee:	80 91 be 00 	lds	r24, 0x00BE
    15f2:	80 93 c6 00 	sts	0x00C6, r24
    15f6:	80 91 bf 00 	lds	r24, 0x00BF
    15fa:	80 93 c7 00 	sts	0x00C7, r24
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    15fe:	99 9b       	sbis	0x13, 1	; 19
    1600:	a7 c0       	rjmp	.+334    	; 0x1750 <main+0x790>
    1602:	90 91 b8 00 	lds	r25, 0x00B8
    1606:	40 91 b9 00 	lds	r20, 0x00B9
    160a:	60 91 ba 00 	lds	r22, 0x00BA
    160e:	e0 91 bb 00 	lds	r30, 0x00BB
    1612:	a0 91 bc 00 	lds	r26, 0x00BC
    1616:	10 91 bd 00 	lds	r17, 0x00BD
    161a:	f0 90 be 00 	lds	r15, 0x00BE
    161e:	50 91 bf 00 	lds	r21, 0x00BF
    1622:	80 91 c8 00 	lds	r24, 0x00C8
    1626:	20 91 c9 00 	lds	r18, 0x00C9
    162a:	70 91 ca 00 	lds	r23, 0x00CA
    162e:	f0 91 cb 00 	lds	r31, 0x00CB
    1632:	00 91 cc 00 	lds	r16, 0x00CC
    1636:	d0 90 cd 00 	lds	r13, 0x00CD
    163a:	b0 90 ce 00 	lds	r11, 0x00CE
    163e:	a0 90 cf 00 	lds	r10, 0x00CF
    1642:	c9 2e       	mov	r12, r25
    1644:	c8 1a       	sub	r12, r24
    1646:	31 e0       	ldi	r19, 0x01	; 1
    1648:	9c 15       	cp	r25, r12
    164a:	08 f0       	brcs	.+2      	; 0x164e <main+0x68e>
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	84 2f       	mov	r24, r20
    1650:	82 1b       	sub	r24, r18
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	48 17       	cp	r20, r24
    1656:	08 f0       	brcs	.+2      	; 0x165a <main+0x69a>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	e8 2e       	mov	r14, r24
    165c:	e3 1a       	sub	r14, r19
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	8e 15       	cp	r24, r14
    1662:	08 f0       	brcs	.+2      	; 0x1666 <main+0x6a6>
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	29 2b       	or	r18, r25
    1668:	86 2f       	mov	r24, r22
    166a:	87 1b       	sub	r24, r23
    166c:	31 e0       	ldi	r19, 0x01	; 1
    166e:	68 17       	cp	r22, r24
    1670:	08 f0       	brcs	.+2      	; 0x1674 <main+0x6b4>
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	b8 2f       	mov	r27, r24
    1676:	b2 1b       	sub	r27, r18
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	8b 17       	cp	r24, r27
    167c:	08 f0       	brcs	.+2      	; 0x1680 <main+0x6c0>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	39 2b       	or	r19, r25
    1682:	8e 2f       	mov	r24, r30
    1684:	8f 1b       	sub	r24, r31
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	e8 17       	cp	r30, r24
    168a:	08 f0       	brcs	.+2      	; 0x168e <main+0x6ce>
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	78 2f       	mov	r23, r24
    1690:	73 1b       	sub	r23, r19
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	87 17       	cp	r24, r23
    1696:	08 f0       	brcs	.+2      	; 0x169a <main+0x6da>
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	29 2b       	or	r18, r25
    169c:	8a 2f       	mov	r24, r26
    169e:	80 1b       	sub	r24, r16
    16a0:	31 e0       	ldi	r19, 0x01	; 1
    16a2:	a8 17       	cp	r26, r24
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <main+0x6e8>
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	68 2f       	mov	r22, r24
    16aa:	62 1b       	sub	r22, r18
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	86 17       	cp	r24, r22
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <main+0x6f4>
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	39 2b       	or	r19, r25
    16b6:	81 2f       	mov	r24, r17
    16b8:	8d 19       	sub	r24, r13
    16ba:	21 e0       	ldi	r18, 0x01	; 1
    16bc:	18 17       	cp	r17, r24
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <main+0x702>
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	48 2f       	mov	r20, r24
    16c4:	43 1b       	sub	r20, r19
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	84 17       	cp	r24, r20
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <main+0x70e>
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	29 2b       	or	r18, r25
    16d0:	8f 2d       	mov	r24, r15
    16d2:	8b 19       	sub	r24, r11
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	f8 16       	cp	r15, r24
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <main+0x71c>
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	38 2f       	mov	r19, r24
    16de:	32 1b       	sub	r19, r18
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	83 17       	cp	r24, r19
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <main+0x728>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	92 2b       	or	r25, r18
    16ea:	5a 19       	sub	r21, r10
    16ec:	59 17       	cp	r21, r25
    16ee:	79 f4       	brne	.+30     	; 0x170e <main+0x74e>
    16f0:	33 23       	and	r19, r19
    16f2:	69 f4       	brne	.+26     	; 0x170e <main+0x74e>
    16f4:	44 23       	and	r20, r20
    16f6:	59 f4       	brne	.+22     	; 0x170e <main+0x74e>
    16f8:	66 23       	and	r22, r22
    16fa:	49 f4       	brne	.+18     	; 0x170e <main+0x74e>
    16fc:	77 23       	and	r23, r23
    16fe:	39 f4       	brne	.+14     	; 0x170e <main+0x74e>
    1700:	bb 23       	and	r27, r27
    1702:	29 f4       	brne	.+10     	; 0x170e <main+0x74e>
    1704:	ee 20       	and	r14, r14
    1706:	19 f4       	brne	.+6      	; 0x170e <main+0x74e>
    1708:	fa ef       	ldi	r31, 0xFA	; 250
    170a:	fc 15       	cp	r31, r12
    170c:	08 f5       	brcc	.+66     	; 0x1750 <main+0x790>
				change_line_type();
    170e:	e7 d7       	rcall	.+4046   	; 0x26de <__data_load_end+0x8c0>
				debounce_b = clock();
    1710:	80 91 b8 00 	lds	r24, 0x00B8
    1714:	80 93 c8 00 	sts	0x00C8, r24
    1718:	80 91 b9 00 	lds	r24, 0x00B9
    171c:	80 93 c9 00 	sts	0x00C9, r24
    1720:	80 91 ba 00 	lds	r24, 0x00BA
    1724:	80 93 ca 00 	sts	0x00CA, r24
    1728:	80 91 bb 00 	lds	r24, 0x00BB
    172c:	80 93 cb 00 	sts	0x00CB, r24
    1730:	80 91 bc 00 	lds	r24, 0x00BC
    1734:	80 93 cc 00 	sts	0x00CC, r24
    1738:	80 91 bd 00 	lds	r24, 0x00BD
    173c:	80 93 cd 00 	sts	0x00CD, r24
    1740:	80 91 be 00 	lds	r24, 0x00BE
    1744:	80 93 ce 00 	sts	0x00CE, r24
    1748:	80 91 bf 00 	lds	r24, 0x00BF
    174c:	80 93 cf 00 	sts	0x00CF, r24
			}
			draw_interface();
    1750:	e8 d9       	rcall	.-3120   	; 0xb22 <draw_interface>
			draw_values_line(ltp);
    1752:	80 91 6a 00 	lds	r24, 0x006A
    1756:	76 da       	rcall	.-2836   	; 0xc44 <draw_values_line>
			draw_update_speed_indicator(usp);
    1758:	80 91 68 00 	lds	r24, 0x0068
    175c:	90 91 69 00 	lds	r25, 0x0069
    1760:	58 d9       	rcall	.-3408   	; 0xa12 <draw_update_speed_indicator>
			draw_bar(ltp, shown_value);
    1762:	60 91 ec 00 	lds	r22, 0x00EC
    1766:	70 91 ed 00 	lds	r23, 0x00ED
    176a:	80 91 6a 00 	lds	r24, 0x006A
    176e:	3f d9       	rcall	.-3458   	; 0x9ee <draw_bar>
			draw_current_value(shown_value);
    1770:	80 91 ec 00 	lds	r24, 0x00EC
    1774:	90 91 ed 00 	lds	r25, 0x00ED
    1778:	24 db       	rcall	.-2488   	; 0xdc2 <draw_current_value>
			draw_chart(ltp);
    177a:	80 91 6a 00 	lds	r24, 0x006A
    177e:	fa d8       	rcall	.-3596   	; 0x974 <draw_chart>
		}
		
		if (vm == HOOKS) {
    1780:	80 91 f6 00 	lds	r24, 0x00F6
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	09 f0       	breq	.+2      	; 0x178a <main+0x7ca>
    1788:	bc c2       	rjmp	.+1400   	; 0x1d02 <main+0xd42>
			lcd_put_string(1, 1, "Hooks", BLACK);
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	42 e6       	ldi	r20, 0x62	; 98
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	e6 da       	rcall	.-2612   	; 0xd60 <lcd_put_string>
    1794:	00 e0       	ldi	r16, 0x00	; 0
    1796:	10 e0       	ldi	r17, 0x00	; 0
			for (int i = 0; i < HOOKS_N; i++) {
				print_hook(i);
    1798:	c8 01       	movw	r24, r16
    179a:	79 db       	rcall	.-2318   	; 0xe8e <print_hook>
			draw_chart(ltp);
		}
		
		if (vm == HOOKS) {
			lcd_put_string(1, 1, "Hooks", BLACK);
			for (int i = 0; i < HOOKS_N; i++) {
    179c:	0f 5f       	subi	r16, 0xFF	; 255
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	04 30       	cpi	r16, 0x04	; 4
    17a2:	11 05       	cpc	r17, r1
    17a4:	c9 f7       	brne	.-14     	; 0x1798 <main+0x7d8>
				print_hook(i);
			}
			
			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    17a6:	98 9b       	sbis	0x13, 0	; 19
    17a8:	f8 c0       	rjmp	.+496    	; 0x199a <main+0x9da>
    17aa:	70 91 b8 00 	lds	r23, 0x00B8
    17ae:	a0 91 b9 00 	lds	r26, 0x00B9
    17b2:	b0 91 ba 00 	lds	r27, 0x00BA
    17b6:	10 91 bb 00 	lds	r17, 0x00BB
    17ba:	00 91 bc 00 	lds	r16, 0x00BC
    17be:	f0 90 bd 00 	lds	r15, 0x00BD
    17c2:	e0 90 be 00 	lds	r14, 0x00BE
    17c6:	90 90 bf 00 	lds	r9, 0x00BF
    17ca:	80 91 c0 00 	lds	r24, 0x00C0
    17ce:	20 91 c1 00 	lds	r18, 0x00C1
    17d2:	30 91 c2 00 	lds	r19, 0x00C2
    17d6:	40 91 c3 00 	lds	r20, 0x00C3
    17da:	50 91 c4 00 	lds	r21, 0x00C4
    17de:	d0 90 c5 00 	lds	r13, 0x00C5
    17e2:	b0 90 c6 00 	lds	r11, 0x00C6
    17e6:	a0 90 c7 00 	lds	r10, 0x00C7
    17ea:	c7 2e       	mov	r12, r23
    17ec:	c8 1a       	sub	r12, r24
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	7c 15       	cp	r23, r12
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <main+0x836>
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	8a 2f       	mov	r24, r26
    17f8:	82 1b       	sub	r24, r18
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	a8 17       	cp	r26, r24
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <main+0x842>
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	f8 2f       	mov	r31, r24
    1804:	f9 1b       	sub	r31, r25
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	8f 17       	cp	r24, r31
    180a:	08 f0       	brcs	.+2      	; 0x180e <main+0x84e>
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	29 2b       	or	r18, r25
    1810:	8b 2f       	mov	r24, r27
    1812:	83 1b       	sub	r24, r19
    1814:	31 e0       	ldi	r19, 0x01	; 1
    1816:	b8 17       	cp	r27, r24
    1818:	08 f0       	brcs	.+2      	; 0x181c <main+0x85c>
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	e8 2f       	mov	r30, r24
    181e:	e2 1b       	sub	r30, r18
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	8e 17       	cp	r24, r30
    1824:	08 f0       	brcs	.+2      	; 0x1828 <main+0x868>
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	39 2b       	or	r19, r25
    182a:	81 2f       	mov	r24, r17
    182c:	84 1b       	sub	r24, r20
    182e:	21 e0       	ldi	r18, 0x01	; 1
    1830:	18 17       	cp	r17, r24
    1832:	08 f0       	brcs	.+2      	; 0x1836 <main+0x876>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	68 2f       	mov	r22, r24
    1838:	63 1b       	sub	r22, r19
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	86 17       	cp	r24, r22
    183e:	08 f0       	brcs	.+2      	; 0x1842 <main+0x882>
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	29 2b       	or	r18, r25
    1844:	80 2f       	mov	r24, r16
    1846:	85 1b       	sub	r24, r21
    1848:	31 e0       	ldi	r19, 0x01	; 1
    184a:	08 17       	cp	r16, r24
    184c:	08 f0       	brcs	.+2      	; 0x1850 <main+0x890>
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	58 2f       	mov	r21, r24
    1852:	52 1b       	sub	r21, r18
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	85 17       	cp	r24, r21
    1858:	08 f0       	brcs	.+2      	; 0x185c <main+0x89c>
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	39 2b       	or	r19, r25
    185e:	8f 2d       	mov	r24, r15
    1860:	8d 19       	sub	r24, r13
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	f8 16       	cp	r15, r24
    1866:	08 f0       	brcs	.+2      	; 0x186a <main+0x8aa>
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	48 2f       	mov	r20, r24
    186c:	43 1b       	sub	r20, r19
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	84 17       	cp	r24, r20
    1872:	08 f0       	brcs	.+2      	; 0x1876 <main+0x8b6>
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	29 2b       	or	r18, r25
    1878:	8e 2d       	mov	r24, r14
    187a:	8b 19       	sub	r24, r11
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	e8 16       	cp	r14, r24
    1880:	08 f0       	brcs	.+2      	; 0x1884 <main+0x8c4>
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	38 2f       	mov	r19, r24
    1886:	32 1b       	sub	r19, r18
    1888:	21 e0       	ldi	r18, 0x01	; 1
    188a:	83 17       	cp	r24, r19
    188c:	08 f0       	brcs	.+2      	; 0x1890 <main+0x8d0>
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	92 2b       	or	r25, r18
    1892:	89 2d       	mov	r24, r9
    1894:	8a 19       	sub	r24, r10
    1896:	89 17       	cp	r24, r25
    1898:	81 f4       	brne	.+32     	; 0x18ba <main+0x8fa>
    189a:	33 23       	and	r19, r19
    189c:	71 f4       	brne	.+28     	; 0x18ba <main+0x8fa>
    189e:	44 23       	and	r20, r20
    18a0:	61 f4       	brne	.+24     	; 0x18ba <main+0x8fa>
    18a2:	55 23       	and	r21, r21
    18a4:	51 f4       	brne	.+20     	; 0x18ba <main+0x8fa>
    18a6:	66 23       	and	r22, r22
    18a8:	41 f4       	brne	.+16     	; 0x18ba <main+0x8fa>
    18aa:	ee 23       	and	r30, r30
    18ac:	31 f4       	brne	.+12     	; 0x18ba <main+0x8fa>
    18ae:	ff 23       	and	r31, r31
    18b0:	21 f4       	brne	.+8      	; 0x18ba <main+0x8fa>
    18b2:	2a ef       	ldi	r18, 0xFA	; 250
    18b4:	2c 15       	cp	r18, r12
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <main+0x8fa>
    18b8:	70 c0       	rjmp	.+224    	; 0x199a <main+0x9da>
				if (hook_edit_stage == 0) {
    18ba:	80 91 f8 00 	lds	r24, 0x00F8
    18be:	88 23       	and	r24, r24
    18c0:	49 f4       	brne	.+18     	; 0x18d4 <main+0x914>
					if (hook_m_ptr > 0) hook_m_ptr--;
    18c2:	80 91 f7 00 	lds	r24, 0x00F7
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <main+0x90c>
    18ca:	57 c0       	rjmp	.+174    	; 0x197a <main+0x9ba>
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	80 93 f7 00 	sts	0x00F7, r24
    18d2:	53 c0       	rjmp	.+166    	; 0x197a <main+0x9ba>
				}
				if (hook_edit_stage == 1) {
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	99 f4       	brne	.+38     	; 0x18fe <main+0x93e>
					if (hooks[hook_m_ptr].op < 4) hooks[hook_m_ptr].op++;
    18d8:	80 91 f7 00 	lds	r24, 0x00F7
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	fc 01       	movw	r30, r24
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	e8 0f       	add	r30, r24
    18ea:	f9 1f       	adc	r31, r25
    18ec:	e1 59       	subi	r30, 0x91	; 145
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	80 81       	ld	r24, Z
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <main+0x938>
    18f6:	41 c0       	rjmp	.+130    	; 0x197a <main+0x9ba>
    18f8:	8f 5f       	subi	r24, 0xFF	; 255
    18fa:	80 83       	st	Z, r24
    18fc:	3e c0       	rjmp	.+124    	; 0x197a <main+0x9ba>
				}
				if (hook_edit_stage == 2) {
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	a9 f4       	brne	.+42     	; 0x192c <main+0x96c>
					if (hooks[hook_m_ptr].value < 99) hooks[hook_m_ptr].value++;
    1902:	80 91 f7 00 	lds	r24, 0x00F7
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	fc 01       	movw	r30, r24
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	e8 0f       	add	r30, r24
    1914:	f9 1f       	adc	r31, r25
    1916:	e1 59       	subi	r30, 0x91	; 145
    1918:	fe 4f       	sbci	r31, 0xFE	; 254
    191a:	81 81       	ldd	r24, Z+1	; 0x01
    191c:	92 81       	ldd	r25, Z+2	; 0x02
    191e:	83 36       	cpi	r24, 0x63	; 99
    1920:	91 05       	cpc	r25, r1
    1922:	5c f5       	brge	.+86     	; 0x197a <main+0x9ba>
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	92 83       	std	Z+2, r25	; 0x02
    1928:	81 83       	std	Z+1, r24	; 0x01
    192a:	27 c0       	rjmp	.+78     	; 0x197a <main+0x9ba>
				}
				if (hook_edit_stage == 3) {
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	91 f4       	brne	.+36     	; 0x1954 <main+0x994>
					if (hooks[hook_m_ptr].act < 2) hooks[hook_m_ptr].act++;
    1930:	80 91 f7 00 	lds	r24, 0x00F7
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	e8 0f       	add	r30, r24
    1942:	f9 1f       	adc	r31, r25
    1944:	e1 59       	subi	r30, 0x91	; 145
    1946:	fe 4f       	sbci	r31, 0xFE	; 254
    1948:	83 81       	ldd	r24, Z+3	; 0x03
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	b0 f4       	brcc	.+44     	; 0x197a <main+0x9ba>
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	83 83       	std	Z+3, r24	; 0x03
    1952:	13 c0       	rjmp	.+38     	; 0x197a <main+0x9ba>
				}
				if (hook_edit_stage == 4) {
    1954:	84 30       	cpi	r24, 0x04	; 4
    1956:	89 f4       	brne	.+34     	; 0x197a <main+0x9ba>
					if (hooks[hook_m_ptr].port < W) hooks[hook_m_ptr].port++;
    1958:	80 91 f7 00 	lds	r24, 0x00F7
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	fc 01       	movw	r30, r24
    1960:	ee 0f       	add	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	e8 0f       	add	r30, r24
    196a:	f9 1f       	adc	r31, r25
    196c:	e1 59       	subi	r30, 0x91	; 145
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	84 81       	ldd	r24, Z+4	; 0x04
    1972:	87 30       	cpi	r24, 0x07	; 7
    1974:	10 f4       	brcc	.+4      	; 0x197a <main+0x9ba>
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	84 83       	std	Z+4, r24	; 0x04
				}
				debounce_a = clock();
    197a:	70 93 c0 00 	sts	0x00C0, r23
    197e:	a0 93 c1 00 	sts	0x00C1, r26
    1982:	b0 93 c2 00 	sts	0x00C2, r27
    1986:	10 93 c3 00 	sts	0x00C3, r17
    198a:	00 93 c4 00 	sts	0x00C4, r16
    198e:	f0 92 c5 00 	sts	0x00C5, r15
    1992:	e0 92 c6 00 	sts	0x00C6, r14
    1996:	90 92 c7 00 	sts	0x00C7, r9
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    199a:	99 9b       	sbis	0x13, 1	; 19
    199c:	f9 c0       	rjmp	.+498    	; 0x1b90 <main+0xbd0>
    199e:	70 91 b8 00 	lds	r23, 0x00B8
    19a2:	a0 91 b9 00 	lds	r26, 0x00B9
    19a6:	b0 91 ba 00 	lds	r27, 0x00BA
    19aa:	10 91 bb 00 	lds	r17, 0x00BB
    19ae:	00 91 bc 00 	lds	r16, 0x00BC
    19b2:	f0 90 bd 00 	lds	r15, 0x00BD
    19b6:	e0 90 be 00 	lds	r14, 0x00BE
    19ba:	90 90 bf 00 	lds	r9, 0x00BF
    19be:	80 91 c8 00 	lds	r24, 0x00C8
    19c2:	20 91 c9 00 	lds	r18, 0x00C9
    19c6:	30 91 ca 00 	lds	r19, 0x00CA
    19ca:	40 91 cb 00 	lds	r20, 0x00CB
    19ce:	50 91 cc 00 	lds	r21, 0x00CC
    19d2:	d0 90 cd 00 	lds	r13, 0x00CD
    19d6:	b0 90 ce 00 	lds	r11, 0x00CE
    19da:	a0 90 cf 00 	lds	r10, 0x00CF
    19de:	c7 2e       	mov	r12, r23
    19e0:	c8 1a       	sub	r12, r24
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	7c 15       	cp	r23, r12
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <main+0xa2a>
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	8a 2f       	mov	r24, r26
    19ec:	82 1b       	sub	r24, r18
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	a8 17       	cp	r26, r24
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <main+0xa36>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	f8 2f       	mov	r31, r24
    19f8:	f9 1b       	sub	r31, r25
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	8f 17       	cp	r24, r31
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <main+0xa42>
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	29 2b       	or	r18, r25
    1a04:	8b 2f       	mov	r24, r27
    1a06:	83 1b       	sub	r24, r19
    1a08:	31 e0       	ldi	r19, 0x01	; 1
    1a0a:	b8 17       	cp	r27, r24
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <main+0xa50>
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	e8 2f       	mov	r30, r24
    1a12:	e2 1b       	sub	r30, r18
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	8e 17       	cp	r24, r30
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <main+0xa5c>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	39 2b       	or	r19, r25
    1a1e:	81 2f       	mov	r24, r17
    1a20:	84 1b       	sub	r24, r20
    1a22:	21 e0       	ldi	r18, 0x01	; 1
    1a24:	18 17       	cp	r17, r24
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <main+0xa6a>
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	68 2f       	mov	r22, r24
    1a2c:	63 1b       	sub	r22, r19
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	86 17       	cp	r24, r22
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <main+0xa76>
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	29 2b       	or	r18, r25
    1a38:	80 2f       	mov	r24, r16
    1a3a:	85 1b       	sub	r24, r21
    1a3c:	31 e0       	ldi	r19, 0x01	; 1
    1a3e:	08 17       	cp	r16, r24
    1a40:	08 f0       	brcs	.+2      	; 0x1a44 <main+0xa84>
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	58 2f       	mov	r21, r24
    1a46:	52 1b       	sub	r21, r18
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	85 17       	cp	r24, r21
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <main+0xa90>
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	39 2b       	or	r19, r25
    1a52:	8f 2d       	mov	r24, r15
    1a54:	8d 19       	sub	r24, r13
    1a56:	21 e0       	ldi	r18, 0x01	; 1
    1a58:	f8 16       	cp	r15, r24
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <main+0xa9e>
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	48 2f       	mov	r20, r24
    1a60:	43 1b       	sub	r20, r19
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	84 17       	cp	r24, r20
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <main+0xaaa>
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	29 2b       	or	r18, r25
    1a6c:	8e 2d       	mov	r24, r14
    1a6e:	8b 19       	sub	r24, r11
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	e8 16       	cp	r14, r24
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <main+0xab8>
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	38 2f       	mov	r19, r24
    1a7a:	32 1b       	sub	r19, r18
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	83 17       	cp	r24, r19
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <main+0xac4>
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	92 2b       	or	r25, r18
    1a86:	89 2d       	mov	r24, r9
    1a88:	8a 19       	sub	r24, r10
    1a8a:	89 17       	cp	r24, r25
    1a8c:	81 f4       	brne	.+32     	; 0x1aae <main+0xaee>
    1a8e:	33 23       	and	r19, r19
    1a90:	71 f4       	brne	.+28     	; 0x1aae <main+0xaee>
    1a92:	44 23       	and	r20, r20
    1a94:	61 f4       	brne	.+24     	; 0x1aae <main+0xaee>
    1a96:	55 23       	and	r21, r21
    1a98:	51 f4       	brne	.+20     	; 0x1aae <main+0xaee>
    1a9a:	66 23       	and	r22, r22
    1a9c:	41 f4       	brne	.+16     	; 0x1aae <main+0xaee>
    1a9e:	ee 23       	and	r30, r30
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <main+0xaee>
    1aa2:	ff 23       	and	r31, r31
    1aa4:	21 f4       	brne	.+8      	; 0x1aae <main+0xaee>
    1aa6:	3a ef       	ldi	r19, 0xFA	; 250
    1aa8:	3c 15       	cp	r19, r12
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <main+0xaee>
    1aac:	71 c0       	rjmp	.+226    	; 0x1b90 <main+0xbd0>
				if (hook_edit_stage == 0) {
    1aae:	80 91 f8 00 	lds	r24, 0x00F8
    1ab2:	88 23       	and	r24, r24
    1ab4:	49 f4       	brne	.+18     	; 0x1ac8 <main+0xb08>
					if (hook_m_ptr < 3) hook_m_ptr++;
    1ab6:	80 91 f7 00 	lds	r24, 0x00F7
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <main+0xb00>
    1abe:	58 c0       	rjmp	.+176    	; 0x1b70 <main+0xbb0>
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	80 93 f7 00 	sts	0x00F7, r24
    1ac6:	54 c0       	rjmp	.+168    	; 0x1b70 <main+0xbb0>
				}
				if (hook_edit_stage == 1) {
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	99 f4       	brne	.+38     	; 0x1af2 <main+0xb32>
					if (hooks[hook_m_ptr].op > 0) hooks[hook_m_ptr].op--;
    1acc:	80 91 f7 00 	lds	r24, 0x00F7
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	e8 0f       	add	r30, r24
    1ade:	f9 1f       	adc	r31, r25
    1ae0:	e1 59       	subi	r30, 0x91	; 145
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <main+0xb2c>
    1aea:	42 c0       	rjmp	.+132    	; 0x1b70 <main+0xbb0>
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	80 83       	st	Z, r24
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <main+0xbb0>
				}
				if (hook_edit_stage == 2) {
    1af2:	82 30       	cpi	r24, 0x02	; 2
    1af4:	b1 f4       	brne	.+44     	; 0x1b22 <main+0xb62>
					if (hooks[hook_m_ptr].value > -55) hooks[hook_m_ptr].value--;
    1af6:	80 91 f7 00 	lds	r24, 0x00F7
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	fc 01       	movw	r30, r24
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	e8 0f       	add	r30, r24
    1b08:	f9 1f       	adc	r31, r25
    1b0a:	e1 59       	subi	r30, 0x91	; 145
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0e:	81 81       	ldd	r24, Z+1	; 0x01
    1b10:	92 81       	ldd	r25, Z+2	; 0x02
    1b12:	4f ef       	ldi	r20, 0xFF	; 255
    1b14:	8a 3c       	cpi	r24, 0xCA	; 202
    1b16:	94 07       	cpc	r25, r20
    1b18:	5c f1       	brlt	.+86     	; 0x1b70 <main+0xbb0>
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	92 83       	std	Z+2, r25	; 0x02
    1b1e:	81 83       	std	Z+1, r24	; 0x01
    1b20:	27 c0       	rjmp	.+78     	; 0x1b70 <main+0xbb0>
				}
				if (hook_edit_stage == 3) {
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 f4       	brne	.+36     	; 0x1b4a <main+0xb8a>
					if (hooks[hook_m_ptr].act > 0) hooks[hook_m_ptr].act--;
    1b26:	80 91 f7 00 	lds	r24, 0x00F7
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e8 0f       	add	r30, r24
    1b38:	f9 1f       	adc	r31, r25
    1b3a:	e1 59       	subi	r30, 0x91	; 145
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	83 81       	ldd	r24, Z+3	; 0x03
    1b40:	88 23       	and	r24, r24
    1b42:	b1 f0       	breq	.+44     	; 0x1b70 <main+0xbb0>
    1b44:	81 50       	subi	r24, 0x01	; 1
    1b46:	83 83       	std	Z+3, r24	; 0x03
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <main+0xbb0>
				}
				if (hook_edit_stage == 4) {
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	89 f4       	brne	.+34     	; 0x1b70 <main+0xbb0>
					if (hooks[hook_m_ptr].port > Z) hooks[hook_m_ptr].port--;
    1b4e:	80 91 f7 00 	lds	r24, 0x00F7
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	e8 0f       	add	r30, r24
    1b60:	f9 1f       	adc	r31, r25
    1b62:	e1 59       	subi	r30, 0x91	; 145
    1b64:	fe 4f       	sbci	r31, 0xFE	; 254
    1b66:	84 81       	ldd	r24, Z+4	; 0x04
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	10 f0       	brcs	.+4      	; 0x1b70 <main+0xbb0>
    1b6c:	81 50       	subi	r24, 0x01	; 1
    1b6e:	84 83       	std	Z+4, r24	; 0x04
				}
				debounce_b = clock();
    1b70:	70 93 c8 00 	sts	0x00C8, r23
    1b74:	a0 93 c9 00 	sts	0x00C9, r26
    1b78:	b0 93 ca 00 	sts	0x00CA, r27
    1b7c:	10 93 cb 00 	sts	0x00CB, r17
    1b80:	00 93 cc 00 	sts	0x00CC, r16
    1b84:	f0 92 cd 00 	sts	0x00CD, r15
    1b88:	e0 92 ce 00 	sts	0x00CE, r14
    1b8c:	90 92 cf 00 	sts	0x00CF, r9
			}
			if (io_read(C) && clock() - debounce_c > DEBOUNCE_T) {
    1b90:	9a 9b       	sbis	0x13, 2	; 19
    1b92:	b1 c0       	rjmp	.+354    	; 0x1cf6 <main+0xd36>
    1b94:	60 91 b8 00 	lds	r22, 0x00B8
    1b98:	70 91 b9 00 	lds	r23, 0x00B9
    1b9c:	a0 91 ba 00 	lds	r26, 0x00BA
    1ba0:	b0 91 bb 00 	lds	r27, 0x00BB
    1ba4:	10 91 bc 00 	lds	r17, 0x00BC
    1ba8:	00 91 bd 00 	lds	r16, 0x00BD
    1bac:	f0 90 be 00 	lds	r15, 0x00BE
    1bb0:	90 90 bf 00 	lds	r9, 0x00BF
    1bb4:	80 91 d0 00 	lds	r24, 0x00D0
    1bb8:	20 91 d1 00 	lds	r18, 0x00D1
    1bbc:	30 91 d2 00 	lds	r19, 0x00D2
    1bc0:	40 91 d3 00 	lds	r20, 0x00D3
    1bc4:	50 91 d4 00 	lds	r21, 0x00D4
    1bc8:	d0 90 d5 00 	lds	r13, 0x00D5
    1bcc:	b0 90 d6 00 	lds	r11, 0x00D6
    1bd0:	a0 90 d7 00 	lds	r10, 0x00D7
    1bd4:	c6 2e       	mov	r12, r22
    1bd6:	c8 1a       	sub	r12, r24
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	6c 15       	cp	r22, r12
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <main+0xc20>
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	87 2f       	mov	r24, r23
    1be2:	82 1b       	sub	r24, r18
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	78 17       	cp	r23, r24
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <main+0xc2c>
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	e8 2e       	mov	r14, r24
    1bee:	e9 1a       	sub	r14, r25
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	8e 15       	cp	r24, r14
    1bf4:	08 f0       	brcs	.+2      	; 0x1bf8 <main+0xc38>
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	29 2b       	or	r18, r25
    1bfa:	8a 2f       	mov	r24, r26
    1bfc:	83 1b       	sub	r24, r19
    1bfe:	31 e0       	ldi	r19, 0x01	; 1
    1c00:	a8 17       	cp	r26, r24
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <main+0xc46>
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f8 2f       	mov	r31, r24
    1c08:	f2 1b       	sub	r31, r18
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	8f 17       	cp	r24, r31
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <main+0xc52>
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	39 2b       	or	r19, r25
    1c14:	8b 2f       	mov	r24, r27
    1c16:	84 1b       	sub	r24, r20
    1c18:	21 e0       	ldi	r18, 0x01	; 1
    1c1a:	b8 17       	cp	r27, r24
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <main+0xc60>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	e8 2f       	mov	r30, r24
    1c22:	e3 1b       	sub	r30, r19
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	8e 17       	cp	r24, r30
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <main+0xc6c>
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	29 2b       	or	r18, r25
    1c2e:	81 2f       	mov	r24, r17
    1c30:	85 1b       	sub	r24, r21
    1c32:	31 e0       	ldi	r19, 0x01	; 1
    1c34:	18 17       	cp	r17, r24
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <main+0xc7a>
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	58 2f       	mov	r21, r24
    1c3c:	52 1b       	sub	r21, r18
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	85 17       	cp	r24, r21
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <main+0xc86>
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	39 2b       	or	r19, r25
    1c48:	80 2f       	mov	r24, r16
    1c4a:	8d 19       	sub	r24, r13
    1c4c:	21 e0       	ldi	r18, 0x01	; 1
    1c4e:	08 17       	cp	r16, r24
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <main+0xc94>
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	48 2f       	mov	r20, r24
    1c56:	43 1b       	sub	r20, r19
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	84 17       	cp	r24, r20
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <main+0xca0>
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	29 2b       	or	r18, r25
    1c62:	8f 2d       	mov	r24, r15
    1c64:	8b 19       	sub	r24, r11
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	f8 16       	cp	r15, r24
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <main+0xcae>
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	38 2f       	mov	r19, r24
    1c70:	32 1b       	sub	r19, r18
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	83 17       	cp	r24, r19
    1c76:	08 f0       	brcs	.+2      	; 0x1c7a <main+0xcba>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	92 2b       	or	r25, r18
    1c7c:	89 2d       	mov	r24, r9
    1c7e:	8a 19       	sub	r24, r10
    1c80:	89 17       	cp	r24, r25
    1c82:	79 f4       	brne	.+30     	; 0x1ca2 <main+0xce2>
    1c84:	33 23       	and	r19, r19
    1c86:	69 f4       	brne	.+26     	; 0x1ca2 <main+0xce2>
    1c88:	44 23       	and	r20, r20
    1c8a:	59 f4       	brne	.+22     	; 0x1ca2 <main+0xce2>
    1c8c:	55 23       	and	r21, r21
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <main+0xce2>
    1c90:	ee 23       	and	r30, r30
    1c92:	39 f4       	brne	.+14     	; 0x1ca2 <main+0xce2>
    1c94:	ff 23       	and	r31, r31
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <main+0xce2>
    1c98:	ee 20       	and	r14, r14
    1c9a:	19 f4       	brne	.+6      	; 0x1ca2 <main+0xce2>
    1c9c:	5a ef       	ldi	r21, 0xFA	; 250
    1c9e:	5c 15       	cp	r21, r12
    1ca0:	50 f5       	brcc	.+84     	; 0x1cf6 <main+0xd36>
				hook_edit_stage++;
    1ca2:	20 91 f8 00 	lds	r18, 0x00F8
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	20 93 f8 00 	sts	0x00F8, r18
				if ((hook_edit_stage > 3 && hooks[hook_m_ptr].act == nop) || (hook_edit_stage > 4 && hooks[hook_m_ptr].act != nop)) hook_edit_stage = 0;
    1cac:	24 30       	cpi	r18, 0x04	; 4
    1cae:	98 f0       	brcs	.+38     	; 0x1cd6 <main+0xd16>
    1cb0:	80 91 f7 00 	lds	r24, 0x00F7
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	ee 0f       	add	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	e8 0f       	add	r30, r24
    1cc2:	f9 1f       	adc	r31, r25
    1cc4:	e1 59       	subi	r30, 0x91	; 145
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	83 81       	ldd	r24, Z+3	; 0x03
    1cca:	88 23       	and	r24, r24
    1ccc:	11 f0       	breq	.+4      	; 0x1cd2 <main+0xd12>
    1cce:	25 30       	cpi	r18, 0x05	; 5
    1cd0:	10 f0       	brcs	.+4      	; 0x1cd6 <main+0xd16>
    1cd2:	10 92 f8 00 	sts	0x00F8, r1
				debounce_c = clock();
    1cd6:	60 93 d0 00 	sts	0x00D0, r22
    1cda:	70 93 d1 00 	sts	0x00D1, r23
    1cde:	a0 93 d2 00 	sts	0x00D2, r26
    1ce2:	b0 93 d3 00 	sts	0x00D3, r27
    1ce6:	10 93 d4 00 	sts	0x00D4, r17
    1cea:	00 93 d5 00 	sts	0x00D5, r16
    1cee:	f0 92 d6 00 	sts	0x00D6, r15
    1cf2:	90 92 d7 00 	sts	0x00D7, r9
			}
			
			draw_hook_ptr(hook_m_ptr + 1, hook_edit_stage);
    1cf6:	80 91 f7 00 	lds	r24, 0x00F7
    1cfa:	8f 5f       	subi	r24, 0xFF	; 255
    1cfc:	60 91 f8 00 	lds	r22, 0x00F8
    1d00:	ae d5       	rcall	.+2908   	; 0x285e <__data_load_end+0xa40>
		}
		
		lcd_update();
    1d02:	bc d1       	rcall	.+888    	; 0x207c <__data_load_end+0x25e>
    1d04:	91 c9       	rjmp	.-3294   	; 0x1028 <main+0x68>

00001d06 <__divmodhi4>:
    1d06:	97 fb       	bst	r25, 7
    1d08:	09 2e       	mov	r0, r25
    1d0a:	07 26       	eor	r0, r23
    1d0c:	0a d0       	rcall	.+20     	; 0x1d22 <__divmodhi4_neg1>
    1d0e:	77 fd       	sbrc	r23, 7
    1d10:	04 d0       	rcall	.+8      	; 0x1d1a <__divmodhi4_neg2>
    1d12:	0c d0       	rcall	.+24     	; 0x1d2c <__udivmodhi4>
    1d14:	06 d0       	rcall	.+12     	; 0x1d22 <__divmodhi4_neg1>
    1d16:	00 20       	and	r0, r0
    1d18:	1a f4       	brpl	.+6      	; 0x1d20 <__divmodhi4_exit>

00001d1a <__divmodhi4_neg2>:
    1d1a:	70 95       	com	r23
    1d1c:	61 95       	neg	r22
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255

00001d20 <__divmodhi4_exit>:
    1d20:	08 95       	ret

00001d22 <__divmodhi4_neg1>:
    1d22:	f6 f7       	brtc	.-4      	; 0x1d20 <__divmodhi4_exit>
    1d24:	90 95       	com	r25
    1d26:	81 95       	neg	r24
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	08 95       	ret

00001d2c <__udivmodhi4>:
    1d2c:	aa 1b       	sub	r26, r26
    1d2e:	bb 1b       	sub	r27, r27
    1d30:	51 e1       	ldi	r21, 0x11	; 17
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <__udivmodhi4_ep>

00001d34 <__udivmodhi4_loop>:
    1d34:	aa 1f       	adc	r26, r26
    1d36:	bb 1f       	adc	r27, r27
    1d38:	a6 17       	cp	r26, r22
    1d3a:	b7 07       	cpc	r27, r23
    1d3c:	10 f0       	brcs	.+4      	; 0x1d42 <__udivmodhi4_ep>
    1d3e:	a6 1b       	sub	r26, r22
    1d40:	b7 0b       	sbc	r27, r23

00001d42 <__udivmodhi4_ep>:
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	5a 95       	dec	r21
    1d48:	a9 f7       	brne	.-22     	; 0x1d34 <__udivmodhi4_loop>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	08 95       	ret

00001d54 <itoa>:
    1d54:	fb 01       	movw	r30, r22
    1d56:	9f 01       	movw	r18, r30
    1d58:	e8 94       	clt
    1d5a:	42 30       	cpi	r20, 0x02	; 2
    1d5c:	bc f0       	brlt	.+46     	; 0x1d8c <itoa+0x38>
    1d5e:	45 32       	cpi	r20, 0x25	; 37
    1d60:	ac f4       	brge	.+42     	; 0x1d8c <itoa+0x38>
    1d62:	4a 30       	cpi	r20, 0x0A	; 10
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <itoa+0x1c>
    1d66:	97 fb       	bst	r25, 7
    1d68:	1e f4       	brtc	.+6      	; 0x1d70 <itoa+0x1c>
    1d6a:	90 95       	com	r25
    1d6c:	81 95       	neg	r24
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	64 2f       	mov	r22, r20
    1d72:	77 27       	eor	r23, r23
    1d74:	db df       	rcall	.-74     	; 0x1d2c <__udivmodhi4>
    1d76:	80 5d       	subi	r24, 0xD0	; 208
    1d78:	8a 33       	cpi	r24, 0x3A	; 58
    1d7a:	0c f0       	brlt	.+2      	; 0x1d7e <itoa+0x2a>
    1d7c:	89 5d       	subi	r24, 0xD9	; 217
    1d7e:	81 93       	st	Z+, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	a9 f7       	brne	.-22     	; 0x1d70 <itoa+0x1c>
    1d86:	16 f4       	brtc	.+4      	; 0x1d8c <itoa+0x38>
    1d88:	5d e2       	ldi	r21, 0x2D	; 45
    1d8a:	51 93       	st	Z+, r21
    1d8c:	10 82       	st	Z, r1
    1d8e:	c9 01       	movw	r24, r18
    1d90:	08 c0       	rjmp	.+16     	; 0x1da2 <strrev>

00001d92 <__eerd_byte_m8>:
    1d92:	e1 99       	sbic	0x1c, 1	; 28
    1d94:	fe cf       	rjmp	.-4      	; 0x1d92 <__eerd_byte_m8>
    1d96:	9f bb       	out	0x1f, r25	; 31
    1d98:	8e bb       	out	0x1e, r24	; 30
    1d9a:	e0 9a       	sbi	0x1c, 0	; 28
    1d9c:	99 27       	eor	r25, r25
    1d9e:	8d b3       	in	r24, 0x1d	; 29
    1da0:	08 95       	ret

00001da2 <strrev>:
    1da2:	dc 01       	movw	r26, r24
    1da4:	fc 01       	movw	r30, r24
    1da6:	67 2f       	mov	r22, r23
    1da8:	71 91       	ld	r23, Z+
    1daa:	77 23       	and	r23, r23
    1dac:	e1 f7       	brne	.-8      	; 0x1da6 <strrev+0x4>
    1dae:	32 97       	sbiw	r30, 0x02	; 2
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <strrev+0x18>
    1db2:	7c 91       	ld	r23, X
    1db4:	6d 93       	st	X+, r22
    1db6:	70 83       	st	Z, r23
    1db8:	62 91       	ld	r22, -Z
    1dba:	ae 17       	cp	r26, r30
    1dbc:	bf 07       	cpc	r27, r31
    1dbe:	c8 f3       	brcs	.-14     	; 0x1db2 <strrev+0x10>
    1dc0:	08 95       	ret

00001dc2 <_exit>:
    1dc2:	f8 94       	cli

00001dc4 <__stop_program>:
    1dc4:	ff cf       	rjmp	.-2      	; 0x1dc4 <__stop_program>
