
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c80  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00001c80  00001d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c2  0080012c  0080012c  00001e00  2**0
                  ALLOC
  3 .eeprom       000001d6  00810000  00810000  00001e00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000498  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001517  00000000  00000000  0000248e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038f  00000000  00000000  000039a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eca  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5a  00000000  00000000  00005423  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000627d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	b7 c3       	rjmp	.+1902   	; 0x782 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e8       	ldi	r30, 0x80	; 128
      3a:	fc e1       	ldi	r31, 0x1C	; 28
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	ac 32       	cpi	r26, 0x2C	; 44
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	13 e0       	ldi	r17, 0x03	; 3
      4a:	ac e2       	ldi	r26, 0x2C	; 44
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ae 3e       	cpi	r26, 0xEE	; 238
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	51 d7       	rcall	.+3746   	; 0xefc <main>
      5a:	10 ce       	rjmp	.-992    	; 0xfffffc7c <__eeprom_end+0xff7efaa6>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <wait>:
int LWM;
int HWM;

void wait(void) {
	for (int i = -32000; i < 32000; i++);
}
      5e:	08 95       	ret

00000060 <lcd_send_data>:

void lcd_send_data(byte data) {
	LCD_PORT &= ~(_BV(LCD_CE_PIN));
      60:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT |= _BV(LCD_DC_PIN);
      62:	c1 9a       	sbi	0x18, 1	; 24
	SPDR = data;
      64:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      66:	77 9b       	sbis	0x0e, 7	; 14
      68:	fe cf       	rjmp	.-4      	; 0x66 <lcd_send_data+0x6>
	LCD_PORT |= _BV(LCD_CE_PIN);
      6a:	c2 9a       	sbi	0x18, 2	; 24
}
      6c:	08 95       	ret

0000006e <lcd_send_cmd>:

void lcd_send_cmd(byte data) {
	LCD_PORT &= ~(_BV(LCD_CE_PIN));
      6e:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT &= ~(_BV(LCD_DC_PIN));
      70:	c1 98       	cbi	0x18, 1	; 24
	SPDR = data;
      72:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      74:	77 9b       	sbis	0x0e, 7	; 14
      76:	fe cf       	rjmp	.-4      	; 0x74 <lcd_send_cmd+0x6>
	LCD_PORT |= _BV(LCD_CE_PIN);
      78:	c2 9a       	sbi	0x18, 2	; 24
}
      7a:	08 95       	ret

0000007c <lcd_update>:
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
	LWM = 0;
	HWM = LCD_CACHE_SIZE - 1;
}

void lcd_update(void) {
      7c:	0f 93       	push	r16
      7e:	1f 93       	push	r17
      80:	cf 93       	push	r28
      82:	df 93       	push	r29
	int i;
	if (LWM < 0) LWM = 0;
      84:	80 91 ec 03 	lds	r24, 0x03EC
      88:	90 91 ed 03 	lds	r25, 0x03ED
      8c:	97 ff       	sbrs	r25, 7
      8e:	05 c0       	rjmp	.+10     	; 0x9a <lcd_update+0x1e>
      90:	10 92 ed 03 	sts	0x03ED, r1
      94:	10 92 ec 03 	sts	0x03EC, r1
      98:	09 c0       	rjmp	.+18     	; 0xac <lcd_update+0x30>
	else if (LWM >= LCD_CACHE_SIZE) LWM = LCD_CACHE_SIZE - 1;
      9a:	88 5f       	subi	r24, 0xF8	; 248
      9c:	91 40       	sbci	r25, 0x01	; 1
      9e:	34 f0       	brlt	.+12     	; 0xac <lcd_update+0x30>
      a0:	87 ef       	ldi	r24, 0xF7	; 247
      a2:	91 e0       	ldi	r25, 0x01	; 1
      a4:	90 93 ed 03 	sts	0x03ED, r25
      a8:	80 93 ec 03 	sts	0x03EC, r24
	if (HWM < 0) HWM = 0;
      ac:	80 91 ea 03 	lds	r24, 0x03EA
      b0:	90 91 eb 03 	lds	r25, 0x03EB
      b4:	97 ff       	sbrs	r25, 7
      b6:	05 c0       	rjmp	.+10     	; 0xc2 <lcd_update+0x46>
      b8:	10 92 eb 03 	sts	0x03EB, r1
      bc:	10 92 ea 03 	sts	0x03EA, r1
      c0:	09 c0       	rjmp	.+18     	; 0xd4 <lcd_update+0x58>
	else if (HWM >= LCD_CACHE_SIZE) HWM = LCD_CACHE_SIZE - 1;
      c2:	88 5f       	subi	r24, 0xF8	; 248
      c4:	91 40       	sbci	r25, 0x01	; 1
      c6:	34 f0       	brlt	.+12     	; 0xd4 <lcd_update+0x58>
      c8:	87 ef       	ldi	r24, 0xF7	; 247
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	90 93 eb 03 	sts	0x03EB, r25
      d0:	80 93 ea 03 	sts	0x03EA, r24
	lcd_send_cmd(0x45);
	lcd_send_cmd(0x20);

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
      d4:	80 91 ec 03 	lds	r24, 0x03EC
      d8:	90 91 ed 03 	lds	r25, 0x03ED
      dc:	64 e5       	ldi	r22, 0x54	; 84
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	6f dd       	rcall	.-1314   	; 0xfffffbc0 <__eeprom_end+0xff7ef9ea>
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	c4 df       	rcall	.-120    	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x40 | (LWM / LCD_W));
      e6:	80 91 ec 03 	lds	r24, 0x03EC
      ea:	90 91 ed 03 	lds	r25, 0x03ED
      ee:	64 e5       	ldi	r22, 0x54	; 84
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	66 dd       	rcall	.-1332   	; 0xfffffbc0 <__eeprom_end+0xff7ef9ea>
      f4:	86 2f       	mov	r24, r22
      f6:	80 64       	ori	r24, 0x40	; 64
      f8:	ba df       	rcall	.-140    	; 0x6e <lcd_send_cmd>
	for (i = LWM; i <= HWM; i++) {
      fa:	c0 91 ec 03 	lds	r28, 0x03EC
      fe:	d0 91 ed 03 	lds	r29, 0x03ED
     102:	8e 01       	movw	r16, r28
     104:	0e 50       	subi	r16, 0x0E	; 14
     106:	1e 4f       	sbci	r17, 0xFE	; 254
     108:	05 c0       	rjmp	.+10     	; 0x114 <lcd_update+0x98>
		lcd_send_data(LCD_CACHE[i]);
     10a:	f8 01       	movw	r30, r16
     10c:	81 91       	ld	r24, Z+
     10e:	8f 01       	movw	r16, r30
     110:	a7 df       	rcall	.-178    	; 0x60 <lcd_send_data>

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
	lcd_send_cmd(0x40 | (LWM / LCD_W));
	for (i = LWM; i <= HWM; i++) {
     112:	21 96       	adiw	r28, 0x01	; 1
     114:	80 91 ea 03 	lds	r24, 0x03EA
     118:	90 91 eb 03 	lds	r25, 0x03EB
     11c:	8c 17       	cp	r24, r28
     11e:	9d 07       	cpc	r25, r29
     120:	a4 f7       	brge	.-24     	; 0x10a <lcd_update+0x8e>
		lcd_send_data(LCD_CACHE[i]);
	}

	#endif

	LWM = LCD_CACHE_SIZE - 1;
     122:	87 ef       	ldi	r24, 0xF7	; 247
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	90 93 ed 03 	sts	0x03ED, r25
     12a:	80 93 ec 03 	sts	0x03EC, r24
	HWM = 0;
     12e:	10 92 eb 03 	sts	0x03EB, r1
     132:	10 92 ea 03 	sts	0x03EA, r1
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	1f 91       	pop	r17
     13c:	0f 91       	pop	r16
     13e:	08 95       	ret

00000140 <lcd_pixel>:
	lcd_send_cmd(0x0C);
	lcd_clear();
	lcd_update();
}

void lcd_pixel(byte x, byte y, Color c) {
     140:	58 2f       	mov	r21, r24
	int index;
	byte offset, data;
	if (x >= LCD_W || y >= LCD_H) return;
     142:	84 35       	cpi	r24, 0x54	; 84
     144:	08 f0       	brcs	.+2      	; 0x148 <lcd_pixel+0x8>
     146:	58 c0       	rjmp	.+176    	; 0x1f8 <lcd_pixel+0xb8>
     148:	60 33       	cpi	r22, 0x30	; 48
     14a:	08 f0       	brcs	.+2      	; 0x14e <lcd_pixel+0xe>
     14c:	55 c0       	rjmp	.+170    	; 0x1f8 <lcd_pixel+0xb8>
	index = ((y / 8) *84) + x;
     14e:	86 2f       	mov	r24, r22
     150:	86 95       	lsr	r24
     152:	86 95       	lsr	r24
     154:	86 95       	lsr	r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	82 9f       	mul	r24, r18
     15e:	d0 01       	movw	r26, r0
     160:	83 9f       	mul	r24, r19
     162:	b0 0d       	add	r27, r0
     164:	92 9f       	mul	r25, r18
     166:	b0 0d       	add	r27, r0
     168:	11 24       	eor	r1, r1
     16a:	a5 0f       	add	r26, r21
     16c:	b1 1d       	adc	r27, r1
	offset = y - ((y / 8) *8);
     16e:	23 e0       	ldi	r18, 0x03	; 3
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a 95       	dec	r18
     176:	e1 f7       	brne	.-8      	; 0x170 <lcd_pixel+0x30>
     178:	68 1b       	sub	r22, r24
	data = LCD_CACHE[index];
     17a:	fd 01       	movw	r30, r26
     17c:	ee 50       	subi	r30, 0x0E	; 14
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	20 81       	ld	r18, Z
	if (c == BLACK) {
     182:	41 30       	cpi	r20, 0x01	; 1
     184:	49 f4       	brne	.+18     	; 0x198 <lcd_pixel+0x58>
		data |= (0x01 << offset);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_pixel+0x50>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <lcd_pixel+0x4c>
     194:	28 2b       	or	r18, r24
     196:	16 c0       	rjmp	.+44     	; 0x1c4 <lcd_pixel+0x84>
	} 
	if (c == WHITE) {
     198:	44 23       	and	r20, r20
     19a:	51 f4       	brne	.+20     	; 0x1b0 <lcd_pixel+0x70>
		data &= (~(0x01 << offset));
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <lcd_pixel+0x66>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <lcd_pixel+0x62>
     1aa:	80 95       	com	r24
     1ac:	28 23       	and	r18, r24
     1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <lcd_pixel+0x84>
	}
	if (c == INVERT) {
     1b0:	42 30       	cpi	r20, 0x02	; 2
     1b2:	41 f4       	brne	.+16     	; 0x1c4 <lcd_pixel+0x84>
        data ^= (0x01 << offset);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_pixel+0x7e>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <lcd_pixel+0x7a>
     1c2:	28 27       	eor	r18, r24
    }

	LCD_CACHE[index] = data;
     1c4:	fd 01       	movw	r30, r26
     1c6:	ee 50       	subi	r30, 0x0E	; 14
     1c8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ca:	20 83       	st	Z, r18
	if (index < LWM) {
     1cc:	80 91 ec 03 	lds	r24, 0x03EC
     1d0:	90 91 ed 03 	lds	r25, 0x03ED
     1d4:	a8 17       	cp	r26, r24
     1d6:	b9 07       	cpc	r27, r25
     1d8:	24 f4       	brge	.+8      	; 0x1e2 <lcd_pixel+0xa2>
		LWM = index;
     1da:	b0 93 ed 03 	sts	0x03ED, r27
     1de:	a0 93 ec 03 	sts	0x03EC, r26
	}

	if (index > HWM) {
     1e2:	80 91 ea 03 	lds	r24, 0x03EA
     1e6:	90 91 eb 03 	lds	r25, 0x03EB
     1ea:	8a 17       	cp	r24, r26
     1ec:	9b 07       	cpc	r25, r27
     1ee:	24 f4       	brge	.+8      	; 0x1f8 <lcd_pixel+0xb8>
		HWM = index;
     1f0:	b0 93 eb 03 	sts	0x03EB, r27
     1f4:	a0 93 ea 03 	sts	0x03EA, r26
     1f8:	08 95       	ret

000001fa <min>:
	}
}

int min(int a, int b) {
     1fa:	ac 01       	movw	r20, r24
     1fc:	9b 01       	movw	r18, r22
     1fe:	46 17       	cp	r20, r22
     200:	57 07       	cpc	r21, r23
     202:	0c f4       	brge	.+2      	; 0x206 <min+0xc>
     204:	9a 01       	movw	r18, r20
	if (a > b) return b;
	return a;
}
     206:	c9 01       	movw	r24, r18
     208:	08 95       	ret

0000020a <max>:

int max(int a, int b) {
     20a:	ac 01       	movw	r20, r24
     20c:	9b 01       	movw	r18, r22
     20e:	64 17       	cp	r22, r20
     210:	75 07       	cpc	r23, r21
     212:	0c f4       	brge	.+2      	; 0x216 <max+0xc>
     214:	9a 01       	movw	r18, r20
	if (a > b) return a;
	return b;
}
     216:	c9 01       	movw	r24, r18
     218:	08 95       	ret

0000021a <lcd_h_line>:

void lcd_h_line(byte x0, byte y0, byte x1, Color c) {
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	d6 2e       	mov	r13, r22
     22a:	f4 2e       	mov	r15, r20
     22c:	e2 2e       	mov	r14, r18
	for (int i = min(x0, x1); i <= max(x0, x1); i++) lcd_pixel(i, y0, c);
     22e:	08 2f       	mov	r16, r24
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	84 2f       	mov	r24, r20
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	9c 01       	movw	r18, r24
     238:	e9 01       	movw	r28, r18
     23a:	02 17       	cp	r16, r18
     23c:	13 07       	cpc	r17, r19
     23e:	3c f4       	brge	.+14     	; 0x24e <lcd_h_line+0x34>
     240:	e8 01       	movw	r28, r16
     242:	05 c0       	rjmp	.+10     	; 0x24e <lcd_h_line+0x34>
     244:	8c 2f       	mov	r24, r28
     246:	6d 2d       	mov	r22, r13
     248:	4e 2d       	mov	r20, r14
     24a:	7a df       	rcall	.-268    	; 0x140 <lcd_pixel>
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	8f 2d       	mov	r24, r15
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9c 01       	movw	r18, r24
     254:	20 17       	cp	r18, r16
     256:	31 07       	cpc	r19, r17
     258:	0c f4       	brge	.+2      	; 0x25c <lcd_h_line+0x42>
     25a:	98 01       	movw	r18, r16
     25c:	2c 17       	cp	r18, r28
     25e:	3d 07       	cpc	r19, r29
     260:	8c f7       	brge	.-30     	; 0x244 <lcd_h_line+0x2a>
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	df 90       	pop	r13
     270:	08 95       	ret

00000272 <lcd_v_line>:

void lcd_v_line(byte x0, byte y0, byte y1, Color c) {
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	d8 2e       	mov	r13, r24
     282:	f4 2e       	mov	r15, r20
     284:	e2 2e       	mov	r14, r18
	for (int i = min(y0, y1); i <= max(y0, y1); i++) lcd_pixel(x0, i, c);
     286:	06 2f       	mov	r16, r22
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	24 2f       	mov	r18, r20
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	c9 01       	movw	r24, r18
     290:	ec 01       	movw	r28, r24
     292:	08 17       	cp	r16, r24
     294:	19 07       	cpc	r17, r25
     296:	3c f4       	brge	.+14     	; 0x2a6 <lcd_v_line+0x34>
     298:	e8 01       	movw	r28, r16
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <lcd_v_line+0x34>
     29c:	8d 2d       	mov	r24, r13
     29e:	6c 2f       	mov	r22, r28
     2a0:	4e 2d       	mov	r20, r14
     2a2:	4e df       	rcall	.-356    	; 0x140 <lcd_pixel>
     2a4:	21 96       	adiw	r28, 0x01	; 1
     2a6:	8f 2d       	mov	r24, r15
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	9c 01       	movw	r18, r24
     2ac:	20 17       	cp	r18, r16
     2ae:	31 07       	cpc	r19, r17
     2b0:	0c f4       	brge	.+2      	; 0x2b4 <lcd_v_line+0x42>
     2b2:	98 01       	movw	r18, r16
     2b4:	2c 17       	cp	r18, r28
     2b6:	3d 07       	cpc	r19, r29
     2b8:	8c f7       	brge	.-30     	; 0x29c <lcd_v_line+0x2a>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	08 95       	ret

000002ca <lcd_line>:

void lcd_line(byte x1, byte y1, byte x2, byte y2, Color c) {
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	98 2e       	mov	r9, r24
     2ee:	86 2e       	mov	r8, r22
     2f0:	44 2e       	mov	r4, r20
     2f2:	52 2e       	mov	r5, r18
     2f4:	30 2e       	mov	r3, r16
	if (x1 == x2) {
     2f6:	84 17       	cp	r24, r20
     2f8:	21 f4       	brne	.+8      	; 0x302 <lcd_line+0x38>
		lcd_v_line(x1, y1, y2, c);
     2fa:	42 2f       	mov	r20, r18
     2fc:	20 2f       	mov	r18, r16
     2fe:	b9 df       	rcall	.-142    	; 0x272 <lcd_v_line>
     300:	61 c0       	rjmp	.+194    	; 0x3c4 <lcd_line+0xfa>
		return;
	}

	if (y1 == y2) {
     302:	62 17       	cp	r22, r18
     304:	19 f4       	brne	.+6      	; 0x30c <lcd_line+0x42>
		lcd_h_line(x1, y1, x2, c);
     306:	20 2f       	mov	r18, r16
     308:	88 df       	rcall	.-240    	; 0x21a <lcd_h_line>
     30a:	5c c0       	rjmp	.+184    	; 0x3c4 <lcd_line+0xfa>
		return;
	}
	int dx, dy, stepx, stepy, fraction;
	dy = y2 - y1;
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	26 1b       	sub	r18, r22
     310:	31 09       	sbc	r19, r1
	dx = x2 - x1;
     312:	84 2f       	mov	r24, r20
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	89 19       	sub	r24, r9
     318:	91 09       	sbc	r25, r1
	if (dy < 0) {
     31a:	37 fd       	sbrc	r19, 7
     31c:	04 c0       	rjmp	.+8      	; 0x326 <lcd_line+0x5c>
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	6e 2e       	mov	r6, r30
     322:	71 2c       	mov	r7, r1
     324:	06 c0       	rjmp	.+12     	; 0x332 <lcd_line+0x68>
		dy = -dy;
     326:	30 95       	com	r19
     328:	21 95       	neg	r18
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	66 24       	eor	r6, r6
     32e:	6a 94       	dec	r6
     330:	76 2c       	mov	r7, r6
		stepy = -1;
	} else {
		stepy = 1;
	}
	if (dx < 0) {
     332:	97 fd       	sbrc	r25, 7
     334:	04 c0       	rjmp	.+8      	; 0x33e <lcd_line+0x74>
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	a7 2e       	mov	r10, r23
     33a:	b1 2c       	mov	r11, r1
     33c:	06 c0       	rjmp	.+12     	; 0x34a <lcd_line+0x80>
		dx = -dx;
     33e:	90 95       	com	r25
     340:	81 95       	neg	r24
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	aa 24       	eor	r10, r10
     346:	aa 94       	dec	r10
     348:	ba 2c       	mov	r11, r10
		stepx = -1;
	} else {
		stepx = 1;
	}
	dx <<= 1;
     34a:	6c 01       	movw	r12, r24
     34c:	cc 0c       	add	r12, r12
     34e:	dd 1c       	adc	r13, r13
	dy <<= 1;
     350:	79 01       	movw	r14, r18
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
	if (dx > dy) {
     356:	ec 14       	cp	r14, r12
     358:	fd 04       	cpc	r15, r13
     35a:	d4 f4       	brge	.+52     	; 0x390 <lcd_line+0xc6>
		fraction = dy - (dx >> 1);
     35c:	c6 01       	movw	r24, r12
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	e7 01       	movw	r28, r14
     364:	c8 1b       	sub	r28, r24
     366:	d9 0b       	sbc	r29, r25
     368:	ba 2c       	mov	r11, r10
     36a:	1a 2d       	mov	r17, r10
     36c:	19 0d       	add	r17, r9
		while (x1 != x2) {
			if (fraction >= 0) {
     36e:	d7 fd       	sbrc	r29, 7
     370:	03 c0       	rjmp	.+6      	; 0x378 <lcd_line+0xae>
				y1 += stepy;
     372:	86 0c       	add	r8, r6
				fraction -= dx;
     374:	cc 19       	sub	r28, r12
     376:	dd 09       	sbc	r29, r13
			}
			x1 += stepx;
			fraction += dy;
			lcd_pixel(x1, y1, c);
     378:	81 2f       	mov	r24, r17
     37a:	68 2d       	mov	r22, r8
     37c:	43 2d       	mov	r20, r3
     37e:	e0 de       	rcall	.-576    	; 0x140 <lcd_pixel>
     380:	1b 0d       	add	r17, r11
	}
	dx <<= 1;
	dy <<= 1;
	if (dx > dy) {
		fraction = dy - (dx >> 1);
		while (x1 != x2) {
     382:	81 2f       	mov	r24, r17
     384:	8b 19       	sub	r24, r11
     386:	84 15       	cp	r24, r4
     388:	e9 f0       	breq	.+58     	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				y1 += stepy;
				fraction -= dx;
			}
			x1 += stepx;
			fraction += dy;
     38a:	ce 0d       	add	r28, r14
     38c:	df 1d       	adc	r29, r15
     38e:	ef cf       	rjmp	.-34     	; 0x36e <lcd_line+0xa4>
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
     390:	c7 01       	movw	r24, r14
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	e6 01       	movw	r28, r12
     398:	c8 1b       	sub	r28, r24
     39a:	d9 0b       	sbc	r29, r25
     39c:	06 2d       	mov	r16, r6
     39e:	16 2d       	mov	r17, r6
     3a0:	18 0d       	add	r17, r8
		while (y1 != y2) {
			if (fraction >= 0) {
     3a2:	d7 fd       	sbrc	r29, 7
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_line+0xe2>
				x1 += stepx;
     3a6:	9a 0c       	add	r9, r10
				fraction -= dy;
     3a8:	ce 19       	sub	r28, r14
     3aa:	df 09       	sbc	r29, r15
			}
			y1 += stepy;
			fraction += dx;
			lcd_pixel(x1, y1, c);
     3ac:	89 2d       	mov	r24, r9
     3ae:	61 2f       	mov	r22, r17
     3b0:	43 2d       	mov	r20, r3
     3b2:	c6 de       	rcall	.-628    	; 0x140 <lcd_pixel>
     3b4:	10 0f       	add	r17, r16
			fraction += dy;
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
		while (y1 != y2) {
     3b6:	81 2f       	mov	r24, r17
     3b8:	80 1b       	sub	r24, r16
     3ba:	85 15       	cp	r24, r5
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
			fraction += dx;
     3be:	cc 0d       	add	r28, r12
     3c0:	dd 1d       	adc	r29, r13
     3c2:	ef cf       	rjmp	.-34     	; 0x3a2 <lcd_line+0xd8>
			lcd_pixel(x1, y1, c);
		}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	4f 90       	pop	r4
     3e4:	3f 90       	pop	r3
     3e6:	08 95       	ret

000003e8 <lcd_draw_v2>:
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}

void lcd_draw_v2(byte *texture, byte x, byte y, byte w, byte h, Color c) {
     3e8:	4f 92       	push	r4
     3ea:	5f 92       	push	r5
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	4c 01       	movw	r8, r24
     40a:	46 2e       	mov	r4, r22
     40c:	54 2e       	mov	r5, r20
     40e:	72 2e       	mov	r7, r18
     410:	6e 2c       	mov	r6, r14
     412:	ee 24       	eor	r14, r14
     414:	ff 24       	eor	r15, r15
     416:	10 e0       	ldi	r17, 0x00	; 0
	for (int j = 0; j < h; j++) {
     418:	a0 2e       	mov	r10, r16
     41a:	bb 24       	eor	r11, r11
		for (int i = 0; i < w; i++) {
     41c:	c2 2e       	mov	r12, r18
     41e:	dd 24       	eor	r13, r13
     420:	20 c0       	rjmp	.+64     	; 0x462 <__stack+0x3>
	}
	return chars_printed;
}

void lcd_draw_v2(byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     422:	2c 2f       	mov	r18, r28
     424:	21 0f       	add	r18, r17
		for (int i = 0; i < w; i++) {
			char addr = j * w + i; 
			if (texture[addr / 8] >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     426:	82 2f       	mov	r24, r18
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	f4 01       	movw	r30, r8
     430:	e8 0f       	add	r30, r24
     432:	f1 1d       	adc	r31, r1
     434:	80 81       	ld	r24, Z
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	27 70       	andi	r18, 0x07	; 7
     43a:	02 c0       	rjmp	.+4      	; 0x440 <lcd_draw_v2+0x58>
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	2a 95       	dec	r18
     442:	e2 f7       	brpl	.-8      	; 0x43c <lcd_draw_v2+0x54>
     444:	80 ff       	sbrs	r24, 0
     446:	05 c0       	rjmp	.+10     	; 0x452 <lcd_draw_v2+0x6a>
     448:	8c 2f       	mov	r24, r28
     44a:	84 0d       	add	r24, r4
     44c:	60 2f       	mov	r22, r16
     44e:	46 2d       	mov	r20, r6
     450:	77 de       	rcall	.-786    	; 0x140 <lcd_pixel>
	return chars_printed;
}

void lcd_draw_v2(byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
		for (int i = 0; i < w; i++) {
     452:	21 96       	adiw	r28, 0x01	; 1
     454:	cc 15       	cp	r28, r12
     456:	dd 05       	cpc	r29, r13
     458:	24 f3       	brlt	.-56     	; 0x422 <lcd_draw_v2+0x3a>
	}
	return chars_printed;
}

void lcd_draw_v2(byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     45a:	08 94       	sec
     45c:	e1 1c       	adc	r14, r1
     45e:	f1 1c       	adc	r15, r1
     460:	17 0d       	add	r17, r7
     462:	ea 14       	cp	r14, r10
     464:	fb 04       	cpc	r15, r11
     466:	2c f4       	brge	.+10     	; 0x472 <__stack+0x13>
		for (int i = 0; i < w; i++) {
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	d0 e0       	ldi	r29, 0x00	; 0
			char addr = j * w + i; 
			if (texture[addr / 8] >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     46c:	05 2d       	mov	r16, r5
     46e:	0e 0d       	add	r16, r14
     470:	f1 cf       	rjmp	.-30     	; 0x454 <lcd_draw_v2+0x6c>
		}
	}
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	bf 90       	pop	r11
     484:	af 90       	pop	r10
     486:	9f 90       	pop	r9
     488:	8f 90       	pop	r8
     48a:	7f 90       	pop	r7
     48c:	6f 90       	pop	r6
     48e:	5f 90       	pop	r5
     490:	4f 90       	pop	r4
     492:	08 95       	ret

00000494 <lcd_draw>:

void lcd_draw(byte *texture, byte x, byte y, byte w, byte h, Color c) {
     494:	4f 92       	push	r4
     496:	5f 92       	push	r5
     498:	6f 92       	push	r6
     49a:	7f 92       	push	r7
     49c:	8f 92       	push	r8
     49e:	9f 92       	push	r9
     4a0:	af 92       	push	r10
     4a2:	bf 92       	push	r11
     4a4:	cf 92       	push	r12
     4a6:	df 92       	push	r13
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	3c 01       	movw	r6, r24
     4b6:	46 2e       	mov	r4, r22
     4b8:	54 2e       	mov	r5, r20
     4ba:	8e 2c       	mov	r8, r14
     4bc:	ee 24       	eor	r14, r14
     4be:	ff 24       	eor	r15, r15
	for (int i = 0; i < w; i++) {
     4c0:	c2 2e       	mov	r12, r18
     4c2:	dd 24       	eor	r13, r13
		for (int j = 0; j < h; j++) {
     4c4:	a0 2e       	mov	r10, r16
     4c6:	bb 24       	eor	r11, r11
     4c8:	12 c0       	rjmp	.+36     	; 0x4ee <lcd_draw+0x5a>
			if (texture[j * w + i] & 1) lcd_pixel(x + i, y + j, c);
     4ca:	f8 01       	movw	r30, r16
     4cc:	80 81       	ld	r24, Z
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <lcd_draw+0x48>
     4d2:	65 2d       	mov	r22, r5
     4d4:	6c 0f       	add	r22, r28
     4d6:	89 2d       	mov	r24, r9
     4d8:	48 2d       	mov	r20, r8
     4da:	32 de       	rcall	.-924    	; 0x140 <lcd_pixel>
	}
}

void lcd_draw(byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int i = 0; i < w; i++) {
		for (int j = 0; j < h; j++) {
     4dc:	21 96       	adiw	r28, 0x01	; 1
     4de:	0c 0d       	add	r16, r12
     4e0:	1d 1d       	adc	r17, r13
     4e2:	ca 15       	cp	r28, r10
     4e4:	db 05       	cpc	r29, r11
     4e6:	8c f3       	brlt	.-30     	; 0x4ca <lcd_draw+0x36>
		}
	}
}

void lcd_draw(byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int i = 0; i < w; i++) {
     4e8:	08 94       	sec
     4ea:	e1 1c       	adc	r14, r1
     4ec:	f1 1c       	adc	r15, r1
     4ee:	ec 14       	cp	r14, r12
     4f0:	fd 04       	cpc	r15, r13
     4f2:	44 f4       	brge	.+16     	; 0x504 <lcd_draw+0x70>
     4f4:	83 01       	movw	r16, r6
     4f6:	0e 0d       	add	r16, r14
     4f8:	1f 1d       	adc	r17, r15
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
		for (int j = 0; j < h; j++) {
			if (texture[j * w + i] & 1) lcd_pixel(x + i, y + j, c);
     4fe:	94 2c       	mov	r9, r4
     500:	9e 0c       	add	r9, r14
     502:	ef cf       	rjmp	.-34     	; 0x4e2 <lcd_draw+0x4e>
		}
	}
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	af 90       	pop	r10
     518:	9f 90       	pop	r9
     51a:	8f 90       	pop	r8
     51c:	7f 90       	pop	r7
     51e:	6f 90       	pop	r6
     520:	5f 90       	pop	r5
     522:	4f 90       	pop	r4
     524:	08 95       	ret

00000526 <dt_test>:
#define READ_DATA 0xBE
#define CONV_TIME 750
#define WRITE_SCRATCHPAD 0x4E

char dt_test(void) {
	unsigned char stack = SREG;
     526:	9f b7       	in	r25, 0x3f	; 63
	cli();
     528:	f8 94       	cli
	char dt;
	DT_DDR |= 1 << DT_SENSOR;
     52a:	89 9a       	sbi	0x11, 1	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     52c:	e8 ee       	ldi	r30, 0xE8	; 232
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	31 97       	sbiw	r30, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <dt_test+0xa>
	_delay_us(500);
	DT_DDR &= ~(1 << DT_SENSOR);
     534:	89 98       	cbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     536:	8a eb       	ldi	r24, 0xBA	; 186
     538:	8a 95       	dec	r24
     53a:	f1 f7       	brne	.-4      	; 0x538 <dt_test+0x12>
	_delay_us(70);
	if ((DT_PIN & (1 << DT_SENSOR)) == 0) {
     53c:	80 b3       	in	r24, 0x10	; 16
		dt = 1;
	} else {
		dt = 0;
	}
	SREG = stack;
     53e:	9f bf       	out	0x3f, r25	; 63
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     540:	e8 e4       	ldi	r30, 0x48	; 72
     542:	f3 e0       	ldi	r31, 0x03	; 3
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <dt_test+0x1e>
     548:	86 95       	lsr	r24
     54a:	80 95       	com	r24
	_delay_us(420);
	return dt;
}
     54c:	81 70       	andi	r24, 0x01	; 1
     54e:	08 95       	ret

00000550 <dt_rx>:

char dt_rx(void) {
	unsigned char stack = SREG;
     550:	2f b7       	in	r18, 0x3f	; 63
	cli();
     552:	f8 94       	cli
	char bit;
	DT_DDR |= 1 << DT_SENSOR;
     554:	89 9a       	sbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	8a 95       	dec	r24
     55a:	f1 f7       	brne	.-4      	; 0x558 <dt_rx+0x8>
	_delay_us(2);
	DT_DDR &= ~(1 << DT_SENSOR);
     55c:	89 98       	cbi	0x11, 1	; 17
     55e:	85 e2       	ldi	r24, 0x25	; 37
     560:	8a 95       	dec	r24
     562:	f1 f7       	brne	.-4      	; 0x560 <dt_rx+0x10>
	_delay_us(14);
	bit = (DT_PIN & (1 << DT_SENSOR)) >> DT_SENSOR;
     564:	80 b3       	in	r24, 0x10	; 16
     566:	98 e7       	ldi	r25, 0x78	; 120
     568:	9a 95       	dec	r25
     56a:	f1 f7       	brne	.-4      	; 0x568 <dt_rx+0x18>
	_delay_us(45);
	SREG = stack;
     56c:	2f bf       	out	0x3f, r18	; 63
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	82 70       	andi	r24, 0x02	; 2
     572:	90 70       	andi	r25, 0x00	; 0
     574:	95 95       	asr	r25
     576:	87 95       	ror	r24
	return bit;
}
     578:	08 95       	ret

0000057a <dt_rx8>:

unsigned char dt_rx8(void) {
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	c0 e0       	ldi	r28, 0x00	; 0
     584:	d0 e0       	ldi	r29, 0x00	; 0
	char c = 0;
	for (char i = 0; i < 8; i++) c |= dt_rx() << i;
     586:	e4 df       	rcall	.-56     	; 0x550 <dt_rx>
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0c 2e       	mov	r0, r28
     58c:	02 c0       	rjmp	.+4      	; 0x592 <dt_rx8+0x18>
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	0a 94       	dec	r0
     594:	e2 f7       	brpl	.-8      	; 0x58e <dt_rx8+0x14>
     596:	18 2b       	or	r17, r24
     598:	21 96       	adiw	r28, 0x01	; 1
     59a:	c8 30       	cpi	r28, 0x08	; 8
     59c:	d1 05       	cpc	r29, r1
     59e:	99 f7       	brne	.-26     	; 0x586 <dt_rx8+0xc>
	return c;
}
     5a0:	81 2f       	mov	r24, r17
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	08 95       	ret

000005aa <dt_tx>:

void dt_tx(char b) {
	char stack = SREG;
     5aa:	2f b7       	in	r18, 0x3f	; 63
	cli();
     5ac:	f8 94       	cli
	DT_DDR |= 1 << DT_SENSOR;
     5ae:	89 9a       	sbi	0x11, 1	; 17
     5b0:	95 e0       	ldi	r25, 0x05	; 5
     5b2:	9a 95       	dec	r25
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <dt_tx+0x8>
	_delay_us(2);
	if (b) DT_DDR &= ~(1 << DT_SENSOR);
     5b6:	81 11       	cpse	r24, r1
     5b8:	89 98       	cbi	0x11, 1	; 17
     5ba:	8d ea       	ldi	r24, 0xAD	; 173
     5bc:	8a 95       	dec	r24
     5be:	f1 f7       	brne	.-4      	; 0x5bc <dt_tx+0x12>
	_delay_us(65);
	DT_DDR &= ~(1 << DT_SENSOR);
     5c0:	89 98       	cbi	0x11, 1	; 17
	SREG = stack;
     5c2:	2f bf       	out	0x3f, r18	; 63
}
     5c4:	08 95       	ret

000005c6 <dt_tx8>:

void dt_tx8(unsigned char b) {
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	c0 e0       	ldi	r28, 0x00	; 0
     5d4:	d0 e0       	ldi	r29, 0x00	; 0
	for (char i = 0; i < 8; i++) {
		if ((b &(1 << i)) == (1 << i)) {
     5d6:	a1 e0       	ldi	r26, 0x01	; 1
     5d8:	ea 2e       	mov	r14, r26
     5da:	f1 2c       	mov	r15, r1
     5dc:	08 2f       	mov	r16, r24
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	97 01       	movw	r18, r14
     5e2:	0c 2e       	mov	r0, r28
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <dt_tx8+0x24>
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <dt_tx8+0x20>
     5ee:	c9 01       	movw	r24, r18
     5f0:	80 23       	and	r24, r16
     5f2:	91 23       	and	r25, r17
     5f4:	82 17       	cp	r24, r18
     5f6:	93 07       	cpc	r25, r19
     5f8:	11 f4       	brne	.+4      	; 0x5fe <dt_tx8+0x38>
			dt_tx(1);
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <dt_tx8+0x3a>
		} else {
			dt_tx(0);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	d4 df       	rcall	.-88     	; 0x5aa <dt_tx>
     602:	21 96       	adiw	r28, 0x01	; 1
	DT_DDR &= ~(1 << DT_SENSOR);
	SREG = stack;
}

void dt_tx8(unsigned char b) {
	for (char i = 0; i < 8; i++) {
     604:	c8 30       	cpi	r28, 0x08	; 8
     606:	d1 05       	cpc	r29, r1
     608:	59 f7       	brne	.-42     	; 0x5e0 <dt_tx8+0x1a>
			dt_tx(1);
		} else {
			dt_tx(0);
		}
	}
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	08 95       	ret

00000618 <dt_convert>:

void dt_convert(void) {
	if (!dt_test()) return;
     618:	86 df       	rcall	.-244    	; 0x526 <dt_test>
     61a:	88 23       	and	r24, r24
     61c:	21 f0       	breq	.+8      	; 0x626 <dt_convert+0xe>
	dt_tx8(NOID);
     61e:	8c ec       	ldi	r24, 0xCC	; 204
     620:	d2 df       	rcall	.-92     	; 0x5c6 <dt_tx8>
	dt_tx8(T_CONVERT);
     622:	84 e4       	ldi	r24, 0x44	; 68
     624:	d0 df       	rcall	.-96     	; 0x5c6 <dt_tx8>
     626:	08 95       	ret

00000628 <dt_read>:
	// then conversion delay
}

int dt_read(void) {
     628:	1f 93       	push	r17
	unsigned char l;
	unsigned int h = 0;
	if (!dt_test()) return 0;
     62a:	7d df       	rcall	.-262    	; 0x526 <dt_test>
     62c:	88 23       	and	r24, r24
     62e:	19 f4       	brne	.+6      	; 0x636 <dt_read+0xe>
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	0d c0       	rjmp	.+26     	; 0x650 <dt_read+0x28>
	dt_tx8(NOID);
     636:	8c ec       	ldi	r24, 0xCC	; 204
     638:	c6 df       	rcall	.-116    	; 0x5c6 <dt_tx8>
	dt_tx8(READ_DATA);
     63a:	8e eb       	ldi	r24, 0xBE	; 190
     63c:	c4 df       	rcall	.-120    	; 0x5c6 <dt_tx8>
	l = dt_rx8();
     63e:	9d df       	rcall	.-198    	; 0x57a <dt_rx8>
     640:	18 2f       	mov	r17, r24
	h = dt_rx8();
     642:	9b df       	rcall	.-202    	; 0x57a <dt_rx8>
	h = (h << 8) | l;
     644:	38 2f       	mov	r19, r24
     646:	20 e0       	ldi	r18, 0x00	; 0
	return h;
     648:	41 2f       	mov	r20, r17
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	42 2b       	or	r20, r18
     64e:	53 2b       	or	r21, r19
}
     650:	ca 01       	movw	r24, r20
     652:	1f 91       	pop	r17
     654:	08 95       	ret

00000656 <t_integer_part>:

unsigned char t_integer_part(int t) {
     656:	29 2f       	mov	r18, r25
     658:	33 27       	eor	r19, r19
     65a:	27 fd       	sbrc	r18, 7
     65c:	3a 95       	dec	r19
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	27 70       	andi	r18, 0x07	; 7
     662:	30 70       	andi	r19, 0x00	; 0
     664:	b4 e0       	ldi	r27, 0x04	; 4
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	ba 95       	dec	r27
     66c:	e1 f7       	brne	.-8      	; 0x666 <t_integer_part+0x10>
     66e:	82 95       	swap	r24
     670:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char l = t & 0xFFFF;
	unsigned char h = (t >> 8) & 0xFFFF;
	
	return (l >> 4) | ((h & 0b111) << 4);
}
     672:	82 2b       	or	r24, r18
     674:	08 95       	ret

00000676 <t_sign>:

char t_sign(int t) {
	return (t >> 15) & 1;
}
     676:	89 2f       	mov	r24, r25
     678:	88 1f       	adc	r24, r24
     67a:	88 27       	eor	r24, r24
     67c:	88 1f       	adc	r24, r24
     67e:	08 95       	ret

00000680 <n_pow2>:

float n_pow2(int power) {
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e8       	ldi	r24, 0x80	; 128
     68c:	9f e3       	ldi	r25, 0x3F	; 63
     68e:	05 c0       	rjmp	.+10     	; 0x69a <n_pow2+0x1a>
	float res = 1;
	while(power--) res /= 2;
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	5f e3       	ldi	r21, 0x3F	; 63
     698:	30 da       	rcall	.-2976   	; 0xfffffafa <__eeprom_end+0xff7ef924>
     69a:	21 97       	sbiw	r28, 0x01	; 1
     69c:	2f ef       	ldi	r18, 0xFF	; 255
     69e:	cf 3f       	cpi	r28, 0xFF	; 255
     6a0:	d2 07       	cpc	r29, r18
     6a2:	b1 f7       	brne	.-20     	; 0x690 <n_pow2+0x10>
	return res;
}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <t_float_part>:

float t_float_part(int t) {
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
	char p = t & 0b1111;
     6ba:	3f e0       	ldi	r19, 0x0F	; 15
     6bc:	d3 2e       	mov	r13, r19
     6be:	d8 22       	and	r13, r24
     6c0:	cc 24       	eor	r12, r12
     6c2:	c3 94       	inc	r12
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ef 2e       	mov	r14, r31
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	0f 2f       	mov	r16, r31
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	1f 2f       	mov	r17, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	1e c0       	rjmp	.+60     	; 0x716 <t_float_part+0x6c>
	char i = 1;
	float sum = 0.0;
	while (p > 0) {
		if (p & 1) sum += n_pow2(i);
     6da:	d0 fe       	sbrs	r13, 0
     6dc:	1a c0       	rjmp	.+52     	; 0x712 <t_float_part+0x68>
     6de:	cc 2d       	mov	r28, r12
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <t_float_part+0x54>
	return (t >> 15) & 1;
}

float n_pow2(int power) {
	float res = 1;
	while(power--) res /= 2;
     6ec:	ca 01       	movw	r24, r20
     6ee:	b9 01       	movw	r22, r18
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	5f e3       	ldi	r21, 0x3F	; 63
     6f8:	00 da       	rcall	.-3072   	; 0xfffffafa <__eeprom_end+0xff7ef924>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	21 97       	sbiw	r28, 0x01	; 1
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	cf 3f       	cpi	r28, 0xFF	; 255
     704:	d8 07       	cpc	r29, r24
     706:	91 f7       	brne	.-28     	; 0x6ec <t_float_part+0x42>
float t_float_part(int t) {
	char p = t & 0b1111;
	char i = 1;
	float sum = 0.0;
	while (p > 0) {
		if (p & 1) sum += n_pow2(i);
     708:	c8 01       	movw	r24, r16
     70a:	b7 01       	movw	r22, r14
     70c:	10 d9       	rcall	.-3552   	; 0xfffff92e <__eeprom_end+0xff7ef758>
     70e:	7b 01       	movw	r14, r22
     710:	8c 01       	movw	r16, r24
		p >>= 1;
     712:	d6 94       	lsr	r13
		i++;
     714:	c3 94       	inc	r12

float t_float_part(int t) {
	char p = t & 0b1111;
	char i = 1;
	float sum = 0.0;
	while (p > 0) {
     716:	dd 20       	and	r13, r13
     718:	01 f7       	brne	.-64     	; 0x6da <t_float_part+0x30>
		if (p & 1) sum += n_pow2(i);
		p >>= 1;
		i++;
	}
	return sum;
}
     71a:	b7 01       	movw	r22, r14
     71c:	c8 01       	movw	r24, r16
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <io_init>:

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, X = 5, Y = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
     730:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
     732:	80 ef       	ldi	r24, 0xF0	; 240
     734:	81 bb       	out	0x11, r24	; 17
}
     736:	08 95       	ret

00000738 <io_write>:

void io_write(Port o, char value) {
     738:	38 2f       	mov	r19, r24
	if (value) {
     73a:	66 23       	and	r22, r22
     73c:	59 f0       	breq	.+22     	; 0x754 <io_write+0x1c>
		IO_PORT |= (1 << o);
     73e:	22 b3       	in	r18, 0x12	; 18
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <io_write+0x12>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	3a 95       	dec	r19
     74c:	e2 f7       	brpl	.-8      	; 0x746 <io_write+0xe>
     74e:	28 2b       	or	r18, r24
     750:	22 bb       	out	0x12, r18	; 18
     752:	08 95       	ret
	} else {
		IO_PORT &= ~(1 << o);
     754:	22 b3       	in	r18, 0x12	; 18
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <io_write+0x28>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	3a 95       	dec	r19
     762:	e2 f7       	brpl	.-8      	; 0x75c <io_write+0x24>
     764:	80 95       	com	r24
     766:	82 23       	and	r24, r18
     768:	82 bb       	out	0x12, r24	; 18
     76a:	08 95       	ret

0000076c <io_read>:
	}
}

int io_read(Button b) { 
	return (IO_PIN >> b) & 1; 
     76c:	23 b3       	in	r18, 0x13	; 19
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	02 c0       	rjmp	.+4      	; 0x776 <io_read+0xa>
     772:	35 95       	asr	r19
     774:	27 95       	ror	r18
     776:	8a 95       	dec	r24
     778:	e2 f7       	brpl	.-8      	; 0x772 <io_read+0x6>
     77a:	21 70       	andi	r18, 0x01	; 1
     77c:	30 70       	andi	r19, 0x00	; 0
}
     77e:	c9 01       	movw	r24, r18
     780:	08 95       	ret

00000782 <__vector_9>:

#define BYTE_MAX 255
#define INTS_P_SEC (TICKS / (BYTE_MAX + 1))
#define RATE (1000 / INTS_P_SEC)

ISR (TIMER0_OVF_vect) {
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	1f 93       	push	r17
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
    __clock__ += RATE;
     7a6:	80 91 2c 01 	lds	r24, 0x012C
     7aa:	20 91 2d 01 	lds	r18, 0x012D
     7ae:	30 91 2e 01 	lds	r19, 0x012E
     7b2:	40 91 2f 01 	lds	r20, 0x012F
     7b6:	60 91 30 01 	lds	r22, 0x0130
     7ba:	e0 91 31 01 	lds	r30, 0x0131
     7be:	a0 91 32 01 	lds	r26, 0x0132
     7c2:	10 91 33 01 	lds	r17, 0x0133
     7c6:	b8 2f       	mov	r27, r24
     7c8:	b8 5f       	subi	r27, 0xF8	; 248
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	b8 17       	cp	r27, r24
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <__vector_9+0x50>
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	f9 2f       	mov	r31, r25
     7d4:	f2 0f       	add	r31, r18
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	f2 17       	cp	r31, r18
     7da:	08 f0       	brcs	.+2      	; 0x7de <__vector_9+0x5c>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	78 2f       	mov	r23, r24
     7e0:	73 0f       	add	r23, r19
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	73 17       	cp	r23, r19
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <__vector_9+0x68>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	58 2f       	mov	r21, r24
     7ec:	54 0f       	add	r21, r20
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	54 17       	cp	r21, r20
     7f2:	08 f0       	brcs	.+2      	; 0x7f6 <__vector_9+0x74>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	38 2f       	mov	r19, r24
     7f8:	36 0f       	add	r19, r22
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	36 17       	cp	r19, r22
     7fe:	08 f0       	brcs	.+2      	; 0x802 <__vector_9+0x80>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	28 2f       	mov	r18, r24
     804:	2e 0f       	add	r18, r30
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	2e 17       	cp	r18, r30
     80a:	08 f0       	brcs	.+2      	; 0x80e <__vector_9+0x8c>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	98 2f       	mov	r25, r24
     810:	9a 0f       	add	r25, r26
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	9a 17       	cp	r25, r26
     816:	08 f0       	brcs	.+2      	; 0x81a <__vector_9+0x98>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	81 0f       	add	r24, r17
     81c:	b0 93 2c 01 	sts	0x012C, r27
     820:	f0 93 2d 01 	sts	0x012D, r31
     824:	70 93 2e 01 	sts	0x012E, r23
     828:	50 93 2f 01 	sts	0x012F, r21
     82c:	30 93 30 01 	sts	0x0130, r19
     830:	20 93 31 01 	sts	0x0131, r18
     834:	90 93 32 01 	sts	0x0132, r25
     838:	80 93 33 01 	sts	0x0133, r24
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	1f 91       	pop	r17
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <clock_init>:

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
     864:	89 b7       	in	r24, 0x39	; 57
     866:	81 60       	ori	r24, 0x01	; 1
     868:	89 bf       	out	0x39, r24	; 57
	sei();
     86a:	78 94       	sei
}
     86c:	08 95       	ret

0000086e <clock>:

timestamp clock(void) {
     86e:	20 91 2c 01 	lds	r18, 0x012C
     872:	30 91 2d 01 	lds	r19, 0x012D
     876:	40 91 2e 01 	lds	r20, 0x012E
     87a:	50 91 2f 01 	lds	r21, 0x012F
     87e:	60 91 30 01 	lds	r22, 0x0130
     882:	70 91 31 01 	lds	r23, 0x0131
	return __clock__;
}
     886:	80 91 32 01 	lds	r24, 0x0132
     88a:	90 91 33 01 	lds	r25, 0x0133
     88e:	08 95       	ret

00000890 <change_upd_speed>:
timestamp debounce_c = 0;
timestamp debounce_d = 0;

UpdateSpeed usp = X3;
void change_upd_speed(void) {
	if (usp == X3) {
     890:	80 91 28 01 	lds	r24, 0x0128
     894:	90 91 29 01 	lds	r25, 0x0129
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	91 05       	cpc	r25, r1
     89c:	19 f4       	brne	.+6      	; 0x8a4 <change_upd_speed+0x14>
		usp = X1;
     89e:	80 e1       	ldi	r24, 0x10	; 16
     8a0:	9e e0       	ldi	r25, 0x0E	; 14
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <change_upd_speed+0x1e>
		return;
	}
	if (usp == X2) {
     8a4:	8c 33       	cpi	r24, 0x3C	; 60
     8a6:	91 05       	cpc	r25, r1
     8a8:	39 f4       	brne	.+14     	; 0x8b8 <change_upd_speed+0x28>
		usp = X3;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	90 93 29 01 	sts	0x0129, r25
     8b2:	80 93 28 01 	sts	0x0128, r24
     8b6:	08 95       	ret
		return;
	}
	if (usp == X1) {
     8b8:	80 51       	subi	r24, 0x10	; 16
     8ba:	9e 40       	sbci	r25, 0x0E	; 14
     8bc:	31 f4       	brne	.+12     	; 0x8ca <change_upd_speed+0x3a>
		usp = X2;
     8be:	8c e3       	ldi	r24, 0x3C	; 60
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 29 01 	sts	0x0129, r25
     8c6:	80 93 28 01 	sts	0x0128, r24
     8ca:	08 95       	ret

000008cc <change_line_type>:
	}
}

LineType ltp = MAX40;
void change_line_type(void) {
	if (ltp == MAX40) {
     8cc:	80 91 2a 01 	lds	r24, 0x012A
     8d0:	88 32       	cpi	r24, 0x28	; 40
     8d2:	11 f4       	brne	.+4      	; 0x8d8 <change_line_type+0xc>
		ltp = MAX80;
     8d4:	80 e5       	ldi	r24, 0x50	; 80
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <change_line_type+0x12>
		return;
	}
	if (ltp == MAX80) {
     8d8:	80 35       	cpi	r24, 0x50	; 80
     8da:	21 f4       	brne	.+8      	; 0x8e4 <change_line_type+0x18>
		ltp = MAX20;
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	80 93 2a 01 	sts	0x012A, r24
     8e2:	08 95       	ret
		return;
	}
	if (ltp == MAX20) {
     8e4:	84 31       	cpi	r24, 0x14	; 20
     8e6:	19 f4       	brne	.+6      	; 0x8ee <change_line_type+0x22>
		ltp = MAX40;
     8e8:	88 e2       	ldi	r24, 0x28	; 40
     8ea:	80 93 2a 01 	sts	0x012A, r24
     8ee:	08 95       	ret

000008f0 <change_view_mode>:
int shown_value = 0;
timestamp last_upd = 0;

ViewMode vm = MAIN;
void change_view_mode(void) {
	if (vm == MAIN) {
     8f0:	80 91 6a 01 	lds	r24, 0x016A
     8f4:	88 23       	and	r24, r24
     8f6:	21 f4       	brne	.+8      	; 0x900 <change_view_mode+0x10>
		vm = HOOKS;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 6a 01 	sts	0x016A, r24
     8fe:	08 95       	ret
		return;
	}
	if (vm == HOOKS) {
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	11 f4       	brne	.+4      	; 0x908 <change_view_mode+0x18>
		vm = MAIN;
     904:	10 92 6a 01 	sts	0x016A, r1
     908:	08 95       	ret

0000090a <hooks_init>:
hook hooks[HOOKS_N];
char hook_m_ptr = 0;

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].act = nop;
     90a:	26 e0       	ldi	r18, 0x06	; 6
     90c:	20 93 e1 01 	sts	0x01E1, r18
		hooks[i].port = Z;
     910:	94 e0       	ldi	r25, 0x04	; 4
     912:	90 93 e2 01 	sts	0x01E2, r25
		hooks[i].op = eq;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 de 01 	sts	0x01DE, r24
hook hooks[HOOKS_N];
char hook_m_ptr = 0;

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].act = nop;
     91c:	20 93 e6 01 	sts	0x01E6, r18
		hooks[i].port = Z;
     920:	90 93 e7 01 	sts	0x01E7, r25
		hooks[i].op = eq;
     924:	80 93 e3 01 	sts	0x01E3, r24
hook hooks[HOOKS_N];
char hook_m_ptr = 0;

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].act = nop;
     928:	20 93 eb 01 	sts	0x01EB, r18
		hooks[i].port = Z;
     92c:	90 93 ec 01 	sts	0x01EC, r25
		hooks[i].op = eq;
     930:	80 93 e8 01 	sts	0x01E8, r24
hook hooks[HOOKS_N];
char hook_m_ptr = 0;

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].act = nop;
     934:	20 93 f0 01 	sts	0x01F0, r18
		hooks[i].port = Z;
     938:	90 93 f1 01 	sts	0x01F1, r25
		hooks[i].op = eq;
     93c:	80 93 ed 01 	sts	0x01ED, r24
	}
}
     940:	08 95       	ret

00000942 <draw_hook_ptr>:
	}

	return 0;
}

void draw_hook_ptr(char ptr) {
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
	for (int i = 2; i < 11; i++) {
		lcd_line(0, ptr * 9 + i, 83, ptr * 9 + i, INVERT);
     94a:	99 e0       	ldi	r25, 0x09	; 9
     94c:	89 9f       	mul	r24, r25
     94e:	10 2d       	mov	r17, r0
     950:	11 24       	eor	r1, r1
     952:	c2 e0       	ldi	r28, 0x02	; 2
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	21 2f       	mov	r18, r17
     958:	2c 0f       	add	r18, r28
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	62 2f       	mov	r22, r18
     95e:	43 e5       	ldi	r20, 0x53	; 83
     960:	02 e0       	ldi	r16, 0x02	; 2
     962:	b3 dc       	rcall	.-1690   	; 0x2ca <lcd_line>

	return 0;
}

void draw_hook_ptr(char ptr) {
	for (int i = 2; i < 11; i++) {
     964:	21 96       	adiw	r28, 0x01	; 1
     966:	cb 30       	cpi	r28, 0x0B	; 11
     968:	d1 05       	cpc	r29, r1
     96a:	a9 f7       	brne	.-22     	; 0x956 <draw_hook_ptr+0x14>
		lcd_line(0, ptr * 9 + i, 83, ptr * 9 + i, INVERT);
	}
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <print_hook>:
	if (hooks[index].port == W) {
		lcd_put_char(68, py, 'W', BLACK);
	}
	*/

}
     976:	08 95       	ret

00000978 <sc_top>:

int sc_top(LineType lt, int value) {
     978:	e8 2f       	mov	r30, r24
	int divs = 0;
	if (t_sign(value)) {
     97a:	77 ff       	sbrs	r23, 7
     97c:	1d c0       	rjmp	.+58     	; 0x9b8 <sc_top+0x40>
		divs = -(t_integer_part(~value) * 16 / lt);
     97e:	ab 01       	movw	r20, r22
     980:	40 95       	com	r20
     982:	50 95       	com	r21
     984:	25 2f       	mov	r18, r21
     986:	33 27       	eor	r19, r19
     988:	27 fd       	sbrc	r18, 7
     98a:	3a 95       	dec	r19
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	27 70       	andi	r18, 0x07	; 7
     990:	30 70       	andi	r19, 0x00	; 0
     992:	b4 e0       	ldi	r27, 0x04	; 4
     994:	22 0f       	add	r18, r18
     996:	33 1f       	adc	r19, r19
     998:	ba 95       	dec	r27
     99a:	e1 f7       	brne	.-8      	; 0x994 <sc_top+0x1c>
     99c:	42 95       	swap	r20
     99e:	4f 70       	andi	r20, 0x0F	; 15
     9a0:	84 2f       	mov	r24, r20
     9a2:	82 2b       	or	r24, r18
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	a4 e0       	ldi	r26, 0x04	; 4
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	aa 95       	dec	r26
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <sc_top+0x30>
     9b0:	90 95       	com	r25
     9b2:	81 95       	neg	r24
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <sc_top+0x6c>
	} else {
		divs = t_integer_part(value) * 16 / lt;
     9b8:	27 2f       	mov	r18, r23
     9ba:	33 27       	eor	r19, r19
     9bc:	27 fd       	sbrc	r18, 7
     9be:	3a 95       	dec	r19
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	27 70       	andi	r18, 0x07	; 7
     9c4:	30 70       	andi	r19, 0x00	; 0
     9c6:	54 e0       	ldi	r21, 0x04	; 4
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	5a 95       	dec	r21
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <sc_top+0x50>
     9d0:	86 2f       	mov	r24, r22
     9d2:	82 95       	swap	r24
     9d4:	8f 70       	andi	r24, 0x0F	; 15
     9d6:	82 2b       	or	r24, r18
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	44 e0       	ldi	r20, 0x04	; 4
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	4a 95       	dec	r20
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <sc_top+0x64>
     9e4:	6e 2f       	mov	r22, r30
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	eb d8       	rcall	.-3626   	; 0xfffffbc0 <__eeprom_end+0xff7ef9ea>
	}
	int scale_top = 38 - (divs + ZERO_H);
     9ea:	2a e1       	ldi	r18, 0x1A	; 26
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	26 1b       	sub	r18, r22
     9f0:	37 0b       	sbc	r19, r23
	ovf_flag = 0;
     9f2:	10 92 5d 01 	sts	0x015D, r1
	if (scale_top < 2) {
     9f6:	22 30       	cpi	r18, 0x02	; 2
     9f8:	31 05       	cpc	r19, r1
     9fa:	34 f4       	brge	.+12     	; 0xa08 <sc_top+0x90>
		scale_top = 2;
		ovf_flag = 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 5d 01 	sts	0x015D, r24
     a02:	22 e0       	ldi	r18, 0x02	; 2
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <sc_top+0xa0>
	}
	if (scale_top > 37) {
     a08:	26 32       	cpi	r18, 0x26	; 38
     a0a:	31 05       	cpc	r19, r1
     a0c:	2c f0       	brlt	.+10     	; 0xa18 <sc_top+0xa0>
		scale_top = 37;
		ovf_flag = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 5d 01 	sts	0x015D, r24
     a14:	25 e2       	ldi	r18, 0x25	; 37
     a16:	30 e0       	ldi	r19, 0x00	; 0
	}
	return scale_top;
}
     a18:	c9 01       	movw	r24, r18
     a1a:	08 95       	ret

00000a1c <draw_chart>:

void draw_chart(LineType lt) {
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	e8 2e       	mov	r14, r24
     a2a:	cc e6       	ldi	r28, 0x6C	; 108
     a2c:	d1 e0       	ldi	r29, 0x01	; 1
     a2e:	02 e0       	ldi	r16, 0x02	; 2
	for (byte i = 0; i < CHART_W - 1; i++) {
		lcd_line(
     a30:	68 81       	ld	r22, Y
     a32:	79 81       	ldd	r23, Y+1	; 0x01
     a34:	8e 2d       	mov	r24, r14
     a36:	a0 df       	rcall	.-192    	; 0x978 <sc_top>
     a38:	18 2f       	mov	r17, r24
     a3a:	f0 2e       	mov	r15, r16
     a3c:	f3 94       	inc	r15
     a3e:	6a 81       	ldd	r22, Y+2	; 0x02
     a40:	7b 81       	ldd	r23, Y+3	; 0x03
     a42:	8e 2d       	mov	r24, r14
     a44:	99 df       	rcall	.-206    	; 0x978 <sc_top>
     a46:	28 2f       	mov	r18, r24
     a48:	80 2f       	mov	r24, r16
     a4a:	61 2f       	mov	r22, r17
     a4c:	4f 2d       	mov	r20, r15
     a4e:	01 e0       	ldi	r16, 0x01	; 1
     a50:	3c dc       	rcall	.-1928   	; 0x2ca <lcd_line>
     a52:	22 96       	adiw	r28, 0x02	; 2
     a54:	0f 2d       	mov	r16, r15
	}
	return scale_top;
}

void draw_chart(LineType lt) {
	for (byte i = 0; i < CHART_W - 1; i++) {
     a56:	0a 33       	cpi	r16, 0x3A	; 58
     a58:	59 f7       	brne	.-42     	; 0xa30 <draw_chart+0x14>
			i + 2, sc_top(lt, values_for_chart[i]), 
			i + 3, sc_top(lt, values_for_chart[i + 1]), 
			BLACK
		);
	}
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	08 95       	ret

00000a68 <add_new_chart_value>:

void add_new_chart_value(int new_value) {
     a68:	9c 01       	movw	r18, r24
     a6a:	ec e6       	ldi	r30, 0x6C	; 108
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	81 93       	st	Z+, r24
     a74:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	ec 3d       	cpi	r30, 0xDC	; 220
     a7a:	f8 07       	cpc	r31, r24
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <add_new_chart_value+0x6>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
     a7e:	31 83       	std	Z+1, r19	; 0x01
     a80:	20 83       	st	Z, r18
}
     a82:	08 95       	ret

00000a84 <clear_chart>:

void clear_chart() {
     a84:	ec e6       	ldi	r30, 0x6C	; 108
     a86:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < CHART_W; i++) {
		values_for_chart[i] = 0;
     a88:	11 92       	st	Z+, r1
     a8a:	11 92       	st	Z+, r1
	}
	values_for_chart[CHART_W - 1] = new_value;
}

void clear_chart() {
	for (int i = 0; i < CHART_W; i++) {
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	ee 3d       	cpi	r30, 0xDE	; 222
     a90:	f8 07       	cpc	r31, r24
     a92:	d1 f7       	brne	.-12     	; 0xa88 <clear_chart+0x4>
		values_for_chart[i] = 0;
	}
}
     a94:	08 95       	ret

00000a96 <draw_bar>:

void draw_bar(LineType lt, int value) {
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
	byte scale_top = sc_top(lt, value);
     a9a:	6e df       	rcall	.-292    	; 0x978 <sc_top>
     a9c:	18 2f       	mov	r17, r24
	lcd_line(78, scale_top, 78, 37, BLACK);
     a9e:	8e e4       	ldi	r24, 0x4E	; 78
     aa0:	61 2f       	mov	r22, r17
     aa2:	4e e4       	ldi	r20, 0x4E	; 78
     aa4:	25 e2       	ldi	r18, 0x25	; 37
     aa6:	01 e0       	ldi	r16, 0x01	; 1
     aa8:	10 dc       	rcall	.-2016   	; 0x2ca <lcd_line>
	lcd_line(79, scale_top, 79, 37, BLACK);
     aaa:	8f e4       	ldi	r24, 0x4F	; 79
     aac:	61 2f       	mov	r22, r17
     aae:	4f e4       	ldi	r20, 0x4F	; 79
     ab0:	25 e2       	ldi	r18, 0x25	; 37
     ab2:	0b dc       	rcall	.-2026   	; 0x2ca <lcd_line>
}
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <draw_update_speed_indicator>:
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
}

void draw_update_speed_indicator(UpdateSpeed us) {
     aba:	0f 93       	push	r16
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
	lcd_line(62, 43, 62, 45, BLACK);
     ac2:	8e e3       	ldi	r24, 0x3E	; 62
     ac4:	6b e2       	ldi	r22, 0x2B	; 43
     ac6:	4e e3       	ldi	r20, 0x3E	; 62
     ac8:	2d e2       	ldi	r18, 0x2D	; 45
     aca:	01 e0       	ldi	r16, 0x01	; 1
     acc:	fe db       	rcall	.-2052   	; 0x2ca <lcd_line>
	lcd_line(63, 43, 63, 45, BLACK);
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	6b e2       	ldi	r22, 0x2B	; 43
     ad2:	4f e3       	ldi	r20, 0x3F	; 63
     ad4:	2d e2       	ldi	r18, 0x2D	; 45
     ad6:	f9 db       	rcall	.-2062   	; 0x2ca <lcd_line>
	if (us == X1) return;
     ad8:	8e e0       	ldi	r24, 0x0E	; 14
     ada:	c0 31       	cpi	r28, 0x10	; 16
     adc:	d8 07       	cpc	r29, r24
     ade:	b1 f0       	breq	.+44     	; 0xb0c <draw_update_speed_indicator+0x52>
	lcd_line(65, 42, 65, 45, BLACK);
     ae0:	81 e4       	ldi	r24, 0x41	; 65
     ae2:	6a e2       	ldi	r22, 0x2A	; 42
     ae4:	41 e4       	ldi	r20, 0x41	; 65
     ae6:	2d e2       	ldi	r18, 0x2D	; 45
     ae8:	f0 db       	rcall	.-2080   	; 0x2ca <lcd_line>
	lcd_line(66, 42, 66, 45, BLACK);
     aea:	82 e4       	ldi	r24, 0x42	; 66
     aec:	6a e2       	ldi	r22, 0x2A	; 42
     aee:	42 e4       	ldi	r20, 0x42	; 66
     af0:	2d e2       	ldi	r18, 0x2D	; 45
     af2:	eb db       	rcall	.-2090   	; 0x2ca <lcd_line>
	if (us == X2) return;
     af4:	ec 97       	sbiw	r28, 0x3c	; 60
     af6:	51 f0       	breq	.+20     	; 0xb0c <draw_update_speed_indicator+0x52>
	lcd_line(68, 41, 68, 45, BLACK);
     af8:	84 e4       	ldi	r24, 0x44	; 68
     afa:	69 e2       	ldi	r22, 0x29	; 41
     afc:	44 e4       	ldi	r20, 0x44	; 68
     afe:	2d e2       	ldi	r18, 0x2D	; 45
     b00:	e4 db       	rcall	.-2104   	; 0x2ca <lcd_line>
	lcd_line(69, 41, 69, 45, BLACK);
     b02:	85 e4       	ldi	r24, 0x45	; 69
     b04:	69 e2       	ldi	r22, 0x29	; 41
     b06:	45 e4       	ldi	r20, 0x45	; 69
     b08:	2d e2       	ldi	r18, 0x2D	; 45
     b0a:	df db       	rcall	.-2114   	; 0x2ca <lcd_line>
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <draw_values_line>:

void draw_values_line(LineType lt) {
     b14:	ef 92       	push	r14
     b16:	0f 93       	push	r16
	switch (lt) {
     b18:	84 31       	cpi	r24, 0x14	; 20
     b1a:	19 f0       	breq	.+6      	; 0xb22 <draw_values_line+0xe>
     b1c:	80 35       	cpi	r24, 0x50	; 80
     b1e:	41 f5       	brne	.+80     	; 0xb70 <draw_values_line+0x5c>
     b20:	15 c0       	rjmp	.+42     	; 0xb4c <draw_values_line+0x38>
		case MAX20:
			lcd_draw(small_two, 66, 8, 3, 5, BLACK);
     b22:	8a e7       	ldi	r24, 0x7A	; 122
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	62 e4       	ldi	r22, 0x42	; 66
     b28:	48 e0       	ldi	r20, 0x08	; 8
     b2a:	23 e0       	ldi	r18, 0x03	; 3
     b2c:	05 e0       	ldi	r16, 0x05	; 5
     b2e:	ee 24       	eor	r14, r14
     b30:	e3 94       	inc	r14
     b32:	b0 dc       	rcall	.-1696   	; 0x494 <lcd_draw>
			lcd_draw(small_one, 66, 16, 2, 5, BLACK);
     b34:	88 e9       	ldi	r24, 0x98	; 152
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	62 e4       	ldi	r22, 0x42	; 66
     b3a:	40 e1       	ldi	r20, 0x10	; 16
     b3c:	22 e0       	ldi	r18, 0x02	; 2
     b3e:	aa dc       	rcall	.-1708   	; 0x494 <lcd_draw>
			lcd_draw(small_one, 66, 32, 2, 5, BLACK);
     b40:	88 e9       	ldi	r24, 0x98	; 152
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	62 e4       	ldi	r22, 0x42	; 66
     b46:	40 e2       	ldi	r20, 0x20	; 32
     b48:	22 e0       	ldi	r18, 0x02	; 2
     b4a:	26 c0       	rjmp	.+76     	; 0xb98 <draw_values_line+0x84>
			break;
		case MAX80:
			lcd_draw(small_eight, 66, 8, 3, 5, BLACK);
     b4c:	82 ea       	ldi	r24, 0xA2	; 162
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	62 e4       	ldi	r22, 0x42	; 66
     b52:	48 e0       	ldi	r20, 0x08	; 8
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	05 e0       	ldi	r16, 0x05	; 5
     b58:	ee 24       	eor	r14, r14
     b5a:	e3 94       	inc	r14
     b5c:	9b dc       	rcall	.-1738   	; 0x494 <lcd_draw>
			lcd_draw(small_four, 66, 16, 3, 5, BLACK);
     b5e:	89 e8       	ldi	r24, 0x89	; 137
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	62 e4       	ldi	r22, 0x42	; 66
     b64:	40 e1       	ldi	r20, 0x10	; 16
     b66:	23 e0       	ldi	r18, 0x03	; 3
     b68:	95 dc       	rcall	.-1750   	; 0x494 <lcd_draw>
			lcd_draw(small_four, 66, 32, 3, 5, BLACK);
     b6a:	89 e8       	ldi	r24, 0x89	; 137
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	11 c0       	rjmp	.+34     	; 0xb92 <draw_values_line+0x7e>
			break;
		case MAX40:
		default:
			lcd_draw(small_four, 66, 8, 3, 5, BLACK);
     b70:	89 e8       	ldi	r24, 0x89	; 137
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	62 e4       	ldi	r22, 0x42	; 66
     b76:	48 e0       	ldi	r20, 0x08	; 8
     b78:	23 e0       	ldi	r18, 0x03	; 3
     b7a:	05 e0       	ldi	r16, 0x05	; 5
     b7c:	ee 24       	eor	r14, r14
     b7e:	e3 94       	inc	r14
     b80:	89 dc       	rcall	.-1774   	; 0x494 <lcd_draw>
			lcd_draw(small_two, 66, 16, 3, 5, BLACK);
     b82:	8a e7       	ldi	r24, 0x7A	; 122
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	62 e4       	ldi	r22, 0x42	; 66
     b88:	40 e1       	ldi	r20, 0x10	; 16
     b8a:	23 e0       	ldi	r18, 0x03	; 3
     b8c:	83 dc       	rcall	.-1786   	; 0x494 <lcd_draw>
			lcd_draw(small_two, 66, 32, 3, 5, BLACK);
     b8e:	8a e7       	ldi	r24, 0x7A	; 122
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	62 e4       	ldi	r22, 0x42	; 66
     b94:	40 e2       	ldi	r20, 0x20	; 32
     b96:	23 e0       	ldi	r18, 0x03	; 3
     b98:	7d dc       	rcall	.-1798   	; 0x494 <lcd_draw>
	}
}
     b9a:	0f 91       	pop	r16
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <draw_interface>:

void draw_interface() {
     ba0:	ef 92       	push	r14
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
	lcd_line(1, 1, 59, 1, BLACK);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	4b e3       	ldi	r20, 0x3B	; 59
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	01 e0       	ldi	r16, 0x01	; 1
     bb4:	8a db       	rcall	.-2284   	; 0x2ca <lcd_line>
	lcd_line(1, 38, 59, 38, BLACK);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	66 e2       	ldi	r22, 0x26	; 38
     bba:	4b e3       	ldi	r20, 0x3B	; 59
     bbc:	26 e2       	ldi	r18, 0x26	; 38
     bbe:	85 db       	rcall	.-2294   	; 0x2ca <lcd_line>
	lcd_line(1, 1, 1, 38, BLACK);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	26 e2       	ldi	r18, 0x26	; 38
     bc8:	80 db       	rcall	.-2304   	; 0x2ca <lcd_line>
	lcd_line(59, 1, 59, 38, BLACK);
     bca:	8b e3       	ldi	r24, 0x3B	; 59
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	4b e3       	ldi	r20, 0x3B	; 59
     bd0:	26 e2       	ldi	r18, 0x26	; 38
     bd2:	7b db       	rcall	.-2314   	; 0x2ca <lcd_line>
     bd4:	c1 e0       	ldi	r28, 0x01	; 1
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 1; i <= 59; i++) {
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
     bd8:	c0 ff       	sbrs	r28, 0
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <draw_interface+0x44>
     bdc:	8c 2f       	mov	r24, r28
     bde:	6a e1       	ldi	r22, 0x1A	; 26
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	ae da       	rcall	.-2724   	; 0x140 <lcd_pixel>
void draw_interface() {
	lcd_line(1, 1, 59, 1, BLACK);
	lcd_line(1, 38, 59, 38, BLACK);
	lcd_line(1, 1, 1, 38, BLACK);
	lcd_line(59, 1, 59, 38, BLACK);
	for (int i = 1; i <= 59; i++) {
     be4:	21 96       	adiw	r28, 0x01	; 1
     be6:	cc 33       	cpi	r28, 0x3C	; 60
     be8:	d1 05       	cpc	r29, r1
     bea:	b1 f7       	brne	.-20     	; 0xbd8 <draw_interface+0x38>
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
	}
	lcd_line(77, 2, 77, 38, BLACK);
     bec:	8d e4       	ldi	r24, 0x4D	; 77
     bee:	62 e0       	ldi	r22, 0x02	; 2
     bf0:	4d e4       	ldi	r20, 0x4D	; 77
     bf2:	26 e2       	ldi	r18, 0x26	; 38
     bf4:	01 e0       	ldi	r16, 0x01	; 1
     bf6:	69 db       	rcall	.-2350   	; 0x2ca <lcd_line>
	lcd_line(80, 2, 80, 38, BLACK);
     bf8:	80 e5       	ldi	r24, 0x50	; 80
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	40 e5       	ldi	r20, 0x50	; 80
     bfe:	26 e2       	ldi	r18, 0x26	; 38
     c00:	64 db       	rcall	.-2360   	; 0x2ca <lcd_line>
	lcd_line(78, 1, 79, 1, BLACK);
     c02:	8e e4       	ldi	r24, 0x4E	; 78
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	4f e4       	ldi	r20, 0x4F	; 79
     c08:	21 e0       	ldi	r18, 0x01	; 1
     c0a:	5f db       	rcall	.-2370   	; 0x2ca <lcd_line>
	lcd_line(78, 38, 79, 38, BLACK);
     c0c:	8e e4       	ldi	r24, 0x4E	; 78
     c0e:	66 e2       	ldi	r22, 0x26	; 38
     c10:	4f e4       	ldi	r20, 0x4F	; 79
     c12:	26 e2       	ldi	r18, 0x26	; 38
     c14:	5a db       	rcall	.-2380   	; 0x2ca <lcd_line>
     c16:	c1 e0       	ldi	r28, 0x01	; 1
     c18:	d0 e0       	ldi	r29, 0x00	; 0
     c1a:	16 e0       	ldi	r17, 0x06	; 6
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
     c1c:	8c e4       	ldi	r24, 0x4C	; 76
     c1e:	61 2f       	mov	r22, r17
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	8e da       	rcall	.-2788   	; 0x140 <lcd_pixel>
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
     c24:	c0 fd       	sbrc	r28, 0
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <draw_interface+0x90>
     c28:	8b e4       	ldi	r24, 0x4B	; 75
     c2a:	61 2f       	mov	r22, r17
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	88 da       	rcall	.-2800   	; 0x140 <lcd_pixel>
	}
	lcd_line(77, 2, 77, 38, BLACK);
	lcd_line(80, 2, 80, 38, BLACK);
	lcd_line(78, 1, 79, 1, BLACK);
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
     c30:	21 96       	adiw	r28, 0x01	; 1
     c32:	1c 5f       	subi	r17, 0xFC	; 252
     c34:	16 32       	cpi	r17, 0x26	; 38
     c36:	91 f7       	brne	.-28     	; 0xc1c <draw_interface+0x7c>
     c38:	18 e0       	ldi	r17, 0x08	; 8
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
     c3a:	86 e6       	ldi	r24, 0x66	; 102
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	66 e4       	ldi	r22, 0x46	; 70
     c40:	41 2f       	mov	r20, r17
     c42:	24 e0       	ldi	r18, 0x04	; 4
     c44:	05 e0       	ldi	r16, 0x05	; 5
     c46:	ee 24       	eor	r14, r14
     c48:	e3 94       	inc	r14
     c4a:	24 dc       	rcall	.-1976   	; 0x494 <lcd_draw>
     c4c:	18 5f       	subi	r17, 0xF8	; 248
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
     c4e:	18 32       	cpi	r17, 0x28	; 40
     c50:	a1 f7       	brne	.-24     	; 0xc3a <draw_interface+0x9a>
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
	}
	lcd_line(62, 34, 64, 34, BLACK);
     c52:	8e e3       	ldi	r24, 0x3E	; 62
     c54:	62 e2       	ldi	r22, 0x22	; 34
     c56:	40 e4       	ldi	r20, 0x40	; 64
     c58:	22 e2       	ldi	r18, 0x22	; 34
     c5a:	01 e0       	ldi	r16, 0x01	; 1
     c5c:	36 db       	rcall	.-2452   	; 0x2ca <lcd_line>
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
     c5e:	8f ec       	ldi	r24, 0xCF	; 207
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	6b e4       	ldi	r22, 0x4B	; 75
     c64:	47 e2       	ldi	r20, 0x27	; 39
     c66:	28 e0       	ldi	r18, 0x08	; 8
     c68:	08 e0       	ldi	r16, 0x08	; 8
     c6a:	14 dc       	rcall	.-2008   	; 0x494 <lcd_draw>
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
     c6c:	81 eb       	ldi	r24, 0xB1	; 177
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	66 e3       	ldi	r22, 0x36	; 54
     c72:	49 e2       	ldi	r20, 0x29	; 41
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	05 e0       	ldi	r16, 0x05	; 5
     c78:	0d dc       	rcall	.-2022   	; 0x494 <lcd_draw>
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
     c7a:	80 ec       	ldi	r24, 0xC0	; 192
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	6a e3       	ldi	r22, 0x3A	; 58
     c80:	49 e2       	ldi	r20, 0x29	; 41
     c82:	23 e0       	ldi	r18, 0x03	; 3
     c84:	07 dc       	rcall	.-2034   	; 0x494 <lcd_draw>
	if (ovf_flag) {
     c86:	80 91 5d 01 	lds	r24, 0x015D
     c8a:	88 23       	and	r24, r24
     c8c:	a1 f0       	breq	.+40     	; 0xcb6 <draw_interface+0x116>
     c8e:	12 e4       	ldi	r17, 0x42	; 66
		for (int i = 66; i <= 70; i++) {
			lcd_line(i, 1, i, 6, BLACK);
     c90:	81 2f       	mov	r24, r17
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	41 2f       	mov	r20, r17
     c96:	26 e0       	ldi	r18, 0x06	; 6
     c98:	01 e0       	ldi	r16, 0x01	; 1
     c9a:	17 db       	rcall	.-2514   	; 0x2ca <lcd_line>
     c9c:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_line(62, 34, 64, 34, BLACK);
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
	if (ovf_flag) {
		for (int i = 66; i <= 70; i++) {
     c9e:	17 34       	cpi	r17, 0x47	; 71
     ca0:	b9 f7       	brne	.-18     	; 0xc90 <draw_interface+0xf0>
			lcd_line(i, 1, i, 6, BLACK);
		}
		lcd_line(68, 2, 68, 5, WHITE);
     ca2:	84 e4       	ldi	r24, 0x44	; 68
     ca4:	62 e0       	ldi	r22, 0x02	; 2
     ca6:	44 e4       	ldi	r20, 0x44	; 68
     ca8:	25 e0       	ldi	r18, 0x05	; 5
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	0e db       	rcall	.-2532   	; 0x2ca <lcd_line>
		lcd_pixel(68, 4, BLACK);
     cae:	84 e4       	ldi	r24, 0x44	; 68
     cb0:	64 e0       	ldi	r22, 0x04	; 4
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	45 da       	rcall	.-2934   	; 0x140 <lcd_pixel>
	}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <lcd_put_char>:
			lcd_pixel(x1, y1, c);
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	f8 2e       	mov	r15, r24
     cda:	96 2e       	mov	r9, r22
     cdc:	a2 2e       	mov	r10, r18
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     cde:	85 e0       	ldi	r24, 0x05	; 5
     ce0:	48 9f       	mul	r20, r24
     ce2:	a0 01       	movw	r20, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	8a 01       	movw	r16, r20
     ce8:	00 5a       	subi	r16, 0xA0	; 160
     cea:	10 40       	sbci	r17, 0x00	; 0
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     cec:	95 e6       	ldi	r25, 0x65	; 101
     cee:	c9 2e       	mov	r12, r25
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	d9 2e       	mov	r13, r25
     cf4:	c4 0e       	add	r12, r20
     cf6:	d5 1e       	adc	r13, r21
     cf8:	1b c0       	rjmp	.+54     	; 0xd30 <lcd_put_char+0x6e>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     cfa:	8b 2d       	mov	r24, r11
     cfc:	9e 2d       	mov	r25, r14
     cfe:	a6 d7       	rcall	.+3916   	; 0x1c4c <__eerd_byte_m8>
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0c 2e       	mov	r0, r28
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <lcd_put_char+0x48>
     d06:	95 95       	asr	r25
     d08:	87 95       	ror	r24
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <lcd_put_char+0x44>
     d0e:	80 ff       	sbrs	r24, 0
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <lcd_put_char+0x5a>
     d12:	69 2d       	mov	r22, r9
     d14:	6c 0f       	add	r22, r28
     d16:	8f 2d       	mov	r24, r15
     d18:	4a 2d       	mov	r20, r10
     d1a:	12 da       	rcall	.-3036   	; 0x140 <lcd_pixel>
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
     d1c:	21 96       	adiw	r28, 0x01	; 1
     d1e:	c8 30       	cpi	r28, 0x08	; 8
     d20:	d1 05       	cpc	r29, r1
     d22:	59 f7       	brne	.-42     	; 0xcfa <lcd_put_char+0x38>
     d24:	0f 5f       	subi	r16, 0xFF	; 255
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	f3 94       	inc	r15
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     d2a:	0c 15       	cp	r16, r12
     d2c:	1d 05       	cpc	r17, r13
     d2e:	29 f0       	breq	.+10     	; 0xd3a <lcd_put_char+0x78>
     d30:	b0 2e       	mov	r11, r16
     d32:	e1 2e       	mov	r14, r17
     d34:	c0 e0       	ldi	r28, 0x00	; 0
     d36:	d0 e0       	ldi	r29, 0x00	; 0
     d38:	e0 cf       	rjmp	.-64     	; 0xcfa <lcd_put_char+0x38>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
		}
	}
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	08 95       	ret

00000d52 <lcd_put_string>:

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	d8 2e       	mov	r13, r24
     d66:	b6 2e       	mov	r11, r22
     d68:	7a 01       	movw	r14, r20
     d6a:	c2 2e       	mov	r12, r18
	int chars_printed = strlen(s);
     d6c:	ea 01       	movw	r28, r20
     d6e:	09 90       	ld	r0, Y+
     d70:	00 20       	and	r0, r0
     d72:	e9 f7       	brne	.-6      	; 0xd6e <lcd_put_string+0x1c>
     d74:	21 97       	sbiw	r28, 0x01	; 1
     d76:	c4 1b       	sub	r28, r20
     d78:	d5 0b       	sbc	r29, r21
     d7a:	00 e0       	ldi	r16, 0x00	; 0
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	0c c0       	rjmp	.+24     	; 0xd98 <lcd_put_string+0x46>
	for (int i = 0; i< chars_printed; i++) {
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
     d80:	f7 01       	movw	r30, r14
     d82:	e0 0f       	add	r30, r16
     d84:	f1 1f       	adc	r31, r17
     d86:	8d 2d       	mov	r24, r13
     d88:	6b 2d       	mov	r22, r11
     d8a:	40 81       	ld	r20, Z
     d8c:	2c 2d       	mov	r18, r12
     d8e:	99 df       	rcall	.-206    	; 0xcc2 <lcd_put_char>
	}
}

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
	int chars_printed = strlen(s);
	for (int i = 0; i< chars_printed; i++) {
     d90:	0f 5f       	subi	r16, 0xFF	; 255
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	d8 0e       	add	r13, r24
     d98:	0c 17       	cp	r16, r28
     d9a:	1d 07       	cpc	r17, r29
     d9c:	8c f3       	brlt	.-30     	; 0xd80 <lcd_put_string+0x2e>
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}
     d9e:	ce 01       	movw	r24, r28
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	08 95       	ret

00000db4 <draw_current_value>:
	byte scale_top = sc_top(lt, value);
	lcd_line(78, scale_top, 78, 37, BLACK);
	lcd_line(79, scale_top, 79, 37, BLACK);
}
 
void draw_current_value(int value) {
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <draw_current_value+0x12>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <draw_current_value+0x14>
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	6c 01       	movw	r12, r24
	char buf[5];
	const char py = 40;
	char lcd_print_ptr = 1;
	int work_value = value;
	char is_negative = t_sign(work_value);
	if (is_negative) {
     dd0:	d7 fc       	sbrc	r13, 7
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <draw_current_value+0x24>
     dd4:	11 e0       	ldi	r17, 0x01	; 1
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <draw_current_value+0x36>
		lcd_put_char(lcd_print_ptr, py, '-', BLACK);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	68 e2       	ldi	r22, 0x28	; 40
     ddc:	4d e2       	ldi	r20, 0x2D	; 45
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	70 df       	rcall	.-288    	; 0xcc2 <lcd_put_char>
		lcd_print_ptr += 6;
		work_value = ~work_value;
     de2:	c6 01       	movw	r24, r12
     de4:	80 95       	com	r24
     de6:	90 95       	com	r25
     de8:	17 e0       	ldi	r17, 0x07	; 7
	}
	itoa(t_integer_part(work_value), buf, 10);
     dea:	29 2f       	mov	r18, r25
     dec:	33 27       	eor	r19, r19
     dee:	27 fd       	sbrc	r18, 7
     df0:	3a 95       	dec	r19
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	27 70       	andi	r18, 0x07	; 7
     df6:	30 70       	andi	r19, 0x00	; 0
     df8:	44 e0       	ldi	r20, 0x04	; 4
     dfa:	22 0f       	add	r18, r18
     dfc:	33 1f       	adc	r19, r19
     dfe:	4a 95       	dec	r20
     e00:	e1 f7       	brne	.-8      	; 0xdfa <draw_current_value+0x46>
     e02:	82 95       	swap	r24
     e04:	8f 70       	andi	r24, 0x0F	; 15
     e06:	82 2b       	or	r24, r18
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	7e 01       	movw	r14, r28
     e0c:	08 94       	sec
     e0e:	e1 1c       	adc	r14, r1
     e10:	f1 1c       	adc	r15, r1
     e12:	b7 01       	movw	r22, r14
     e14:	4a e0       	ldi	r20, 0x0A	; 10
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	fa d6       	rcall	.+3572   	; 0x1c0e <itoa>
	char chars_printed = lcd_put_string(lcd_print_ptr, py, buf, BLACK);
     e1a:	81 2f       	mov	r24, r17
     e1c:	68 e2       	ldi	r22, 0x28	; 40
     e1e:	a7 01       	movw	r20, r14
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	97 df       	rcall	.-210    	; 0xd52 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e24:	06 e0       	ldi	r16, 0x06	; 6
     e26:	80 9f       	mul	r24, r16
     e28:	c0 01       	movw	r24, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	18 0f       	add	r17, r24
	lcd_put_char(lcd_print_ptr, py, '.', BLACK);
     e2e:	81 2f       	mov	r24, r17
     e30:	68 e2       	ldi	r22, 0x28	; 40
     e32:	4e e2       	ldi	r20, 0x2E	; 46
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	45 df       	rcall	.-374    	; 0xcc2 <lcd_put_char>
	lcd_print_ptr += 6;
     e38:	1a 5f       	subi	r17, 0xFA	; 250
	itoa((int)(t_float_part(value) * 10.0), buf, 10);
     e3a:	c6 01       	movw	r24, r12
     e3c:	36 dc       	rcall	.-1940   	; 0x6aa <t_float_part>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	59 d6       	rcall	.+3250   	; 0x1afa <__mulsf3>
     e48:	d6 d5       	rcall	.+2988   	; 0x19f6 <__fixsfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	b7 01       	movw	r22, r14
     e50:	4a e0       	ldi	r20, 0x0A	; 10
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	dc d6       	rcall	.+3512   	; 0x1c0e <itoa>
	chars_printed = lcd_put_string(lcd_print_ptr, py, buf, BLACK);
     e56:	81 2f       	mov	r24, r17
     e58:	68 e2       	ldi	r22, 0x28	; 40
     e5a:	a7 01       	movw	r20, r14
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	79 df       	rcall	.-270    	; 0xd52 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e60:	80 9f       	mul	r24, r16
     e62:	c0 01       	movw	r24, r0
     e64:	11 24       	eor	r1, r1
     e66:	18 0f       	add	r17, r24
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
     e68:	87 e1       	ldi	r24, 0x17	; 23
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	61 2f       	mov	r22, r17
     e6e:	48 e2       	ldi	r20, 0x28	; 40
     e70:	25 e0       	ldi	r18, 0x05	; 5
     e72:	03 e0       	ldi	r16, 0x03	; 3
     e74:	ee 24       	eor	r14, r14
     e76:	e3 94       	inc	r14
     e78:	0d db       	rcall	.-2534   	; 0x494 <lcd_draw>
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
     e7a:	81 2f       	mov	r24, r17
     e7c:	8a 5f       	subi	r24, 0xFA	; 250
     e7e:	68 e2       	ldi	r22, 0x28	; 40
     e80:	43 e4       	ldi	r20, 0x43	; 67
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	1e df       	rcall	.-452    	; 0xcc2 <lcd_put_char>
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	08 95       	ret

00000ea2 <lcd_clear>:
	while ((SPSR & 0x80) != 0x80);
	LCD_PORT |= _BV(LCD_CE_PIN);
}

void lcd_clear(void) {
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
     ea2:	88 ef       	ldi	r24, 0xF8	; 248
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	e2 ef       	ldi	r30, 0xF2	; 242
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	df 01       	movw	r26, r30
     eac:	9c 01       	movw	r18, r24
     eae:	1d 92       	st	X+, r1
     eb0:	21 50       	subi	r18, 0x01	; 1
     eb2:	30 40       	sbci	r19, 0x00	; 0
     eb4:	e1 f7       	brne	.-8      	; 0xeae <lcd_clear+0xc>
	LWM = 0;
     eb6:	10 92 ed 03 	sts	0x03ED, r1
     eba:	10 92 ec 03 	sts	0x03EC, r1
	HWM = LCD_CACHE_SIZE - 1;
     ebe:	87 ef       	ldi	r24, 0xF7	; 247
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	90 93 eb 03 	sts	0x03EB, r25
     ec6:	80 93 ea 03 	sts	0x03EA, r24
}
     eca:	08 95       	ret

00000ecc <lcd_init>:
	LWM = LCD_CACHE_SIZE - 1;
	HWM = 0;
}

void lcd_init(void) {
	LCD_PORT |= _BV(LCD_RST_PIN);
     ecc:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DDR |= _BV(LCD_RST_PIN) | _BV(LCD_DC_PIN) | _BV(LCD_CE_PIN) | _BV(SPI_MOSI_PIN) | _BV(SPI_CLK_PIN);
     ece:	87 b3       	in	r24, 0x17	; 23
     ed0:	8e 63       	ori	r24, 0x3E	; 62
     ed2:	87 bb       	out	0x17, r24	; 23
	wait();
	LCD_PORT &= ~(_BV(LCD_RST_PIN));
     ed4:	c4 98       	cbi	0x18, 4	; 24
	wait();
	LCD_PORT |= _BV(LCD_RST_PIN);
     ed6:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = 0x50;
     ed8:	80 e5       	ldi	r24, 0x50	; 80
     eda:	8d b9       	out	0x0d, r24	; 13
	LCD_PORT |= _BV(LCD_CE_PIN);
     edc:	c2 9a       	sbi	0x18, 2	; 24
	lcd_send_cmd(0x21);
     ede:	81 e2       	ldi	r24, 0x21	; 33
     ee0:	c6 d8       	rcall	.-3700   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0xC8);
     ee2:	88 ec       	ldi	r24, 0xC8	; 200
     ee4:	c4 d8       	rcall	.-3704   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x06);
     ee6:	86 e0       	ldi	r24, 0x06	; 6
     ee8:	c2 d8       	rcall	.-3708   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x13);
     eea:	83 e1       	ldi	r24, 0x13	; 19
     eec:	c0 d8       	rcall	.-3712   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x20);
     eee:	80 e2       	ldi	r24, 0x20	; 32
     ef0:	be d8       	rcall	.-3716   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x0C);
     ef2:	8c e0       	ldi	r24, 0x0C	; 12
     ef4:	bc d8       	rcall	.-3720   	; 0x6e <lcd_send_cmd>
	lcd_clear();
     ef6:	d5 df       	rcall	.-86     	; 0xea2 <lcd_clear>
	lcd_update();
     ef8:	c1 d8       	rcall	.-3710   	; 0x7c <lcd_update>
}
     efa:	08 95       	ret

00000efc <main>:
	}
}

void print_hook(int);

int main(void) {
     efc:	2f 92       	push	r2
     efe:	3f 92       	push	r3
     f00:	4f 92       	push	r4
     f02:	5f 92       	push	r5
     f04:	6f 92       	push	r6
     f06:	7f 92       	push	r7
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     f26:	d2 df       	rcall	.-92     	; 0xecc <lcd_init>

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, X = 5, Y = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
     f28:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
     f2a:	80 ef       	ldi	r24, 0xF0	; 240
     f2c:	81 bb       	out	0x11, r24	; 17
ISR (TIMER0_OVF_vect) {
    __clock__ += RATE;
}

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
     f32:	89 b7       	in	r24, 0x39	; 57
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	89 bf       	out	0x39, r24	; 57
	sei();
     f38:	78 94       	sei
	io_init();
	clock_init();
	hooks_init();
     f3a:	e7 dc       	rcall	.-1586   	; 0x90a <hooks_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	9e e4       	ldi	r25, 0x4E	; 78
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <main+0x44>
		
		/* 
		 * Non-blocking temp conversion
		 */
		 
		if (!conversion) {
     f44:	80 91 5c 01 	lds	r24, 0x015C
     f48:	88 23       	and	r24, r24
     f4a:	21 f5       	brne	.+72     	; 0xf94 <main+0x98>
			dt_convert();
     f4c:	65 db       	rcall	.-2358   	; 0x618 <dt_convert>
			conversion = 1;
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	20 93 5c 01 	sts	0x015C, r18
			conversion_start = clock();
     f54:	80 91 2c 01 	lds	r24, 0x012C
     f58:	80 93 54 01 	sts	0x0154, r24
     f5c:	80 91 2d 01 	lds	r24, 0x012D
     f60:	80 93 55 01 	sts	0x0155, r24
     f64:	80 91 2e 01 	lds	r24, 0x012E
     f68:	80 93 56 01 	sts	0x0156, r24
     f6c:	80 91 2f 01 	lds	r24, 0x012F
     f70:	80 93 57 01 	sts	0x0157, r24
     f74:	80 91 30 01 	lds	r24, 0x0130
     f78:	80 93 58 01 	sts	0x0158, r24
     f7c:	80 91 31 01 	lds	r24, 0x0131
     f80:	80 93 59 01 	sts	0x0159, r24
     f84:	80 91 32 01 	lds	r24, 0x0132
     f88:	80 93 5a 01 	sts	0x015A, r24
     f8c:	80 91 33 01 	lds	r24, 0x0133
     f90:	80 93 5b 01 	sts	0x015B, r24
		}
		
		if (clock() - conversion_start > CONV_TIME) {
     f94:	90 91 2c 01 	lds	r25, 0x012C
     f98:	40 91 2d 01 	lds	r20, 0x012D
     f9c:	70 91 2e 01 	lds	r23, 0x012E
     fa0:	f0 91 2f 01 	lds	r31, 0x012F
     fa4:	b0 91 30 01 	lds	r27, 0x0130
     fa8:	00 91 31 01 	lds	r16, 0x0131
     fac:	e0 90 32 01 	lds	r14, 0x0132
     fb0:	60 91 33 01 	lds	r22, 0x0133
     fb4:	80 91 54 01 	lds	r24, 0x0154
     fb8:	20 91 55 01 	lds	r18, 0x0155
     fbc:	e0 91 56 01 	lds	r30, 0x0156
     fc0:	a0 91 57 01 	lds	r26, 0x0157
     fc4:	f0 90 58 01 	lds	r15, 0x0158
     fc8:	d0 90 59 01 	lds	r13, 0x0159
     fcc:	b0 90 5a 01 	lds	r11, 0x015A
     fd0:	a0 90 5b 01 	lds	r10, 0x015B
     fd4:	c9 2e       	mov	r12, r25
     fd6:	c8 1a       	sub	r12, r24
     fd8:	31 e0       	ldi	r19, 0x01	; 1
     fda:	9c 15       	cp	r25, r12
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <main+0xe4>
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	84 2f       	mov	r24, r20
     fe2:	82 1b       	sub	r24, r18
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	48 17       	cp	r20, r24
     fe8:	08 f0       	brcs	.+2      	; 0xfec <main+0xf0>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	58 2f       	mov	r21, r24
     fee:	53 1b       	sub	r21, r19
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	85 17       	cp	r24, r21
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <main+0xfc>
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	29 2b       	or	r18, r25
     ffa:	87 2f       	mov	r24, r23
     ffc:	8e 1b       	sub	r24, r30
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	78 17       	cp	r23, r24
    1002:	08 f0       	brcs	.+2      	; 0x1006 <main+0x10a>
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	18 2f       	mov	r17, r24
    1008:	12 1b       	sub	r17, r18
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	81 17       	cp	r24, r17
    100e:	08 f0       	brcs	.+2      	; 0x1012 <main+0x116>
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	39 2b       	or	r19, r25
    1014:	8f 2f       	mov	r24, r31
    1016:	8a 1b       	sub	r24, r26
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	f8 17       	cp	r31, r24
    101c:	08 f0       	brcs	.+2      	; 0x1020 <main+0x124>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	e8 2f       	mov	r30, r24
    1022:	e3 1b       	sub	r30, r19
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	8e 17       	cp	r24, r30
    1028:	08 f0       	brcs	.+2      	; 0x102c <main+0x130>
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	29 2b       	or	r18, r25
    102e:	8b 2f       	mov	r24, r27
    1030:	8f 19       	sub	r24, r15
    1032:	31 e0       	ldi	r19, 0x01	; 1
    1034:	b8 17       	cp	r27, r24
    1036:	08 f0       	brcs	.+2      	; 0x103a <main+0x13e>
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	78 2f       	mov	r23, r24
    103c:	72 1b       	sub	r23, r18
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	87 17       	cp	r24, r23
    1042:	08 f0       	brcs	.+2      	; 0x1046 <main+0x14a>
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	39 2b       	or	r19, r25
    1048:	80 2f       	mov	r24, r16
    104a:	8d 19       	sub	r24, r13
    104c:	21 e0       	ldi	r18, 0x01	; 1
    104e:	08 17       	cp	r16, r24
    1050:	08 f0       	brcs	.+2      	; 0x1054 <main+0x158>
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	48 2f       	mov	r20, r24
    1056:	43 1b       	sub	r20, r19
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	84 17       	cp	r24, r20
    105c:	08 f0       	brcs	.+2      	; 0x1060 <main+0x164>
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	29 2b       	or	r18, r25
    1062:	8e 2d       	mov	r24, r14
    1064:	8b 19       	sub	r24, r11
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	e8 16       	cp	r14, r24
    106a:	08 f0       	brcs	.+2      	; 0x106e <main+0x172>
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	38 2f       	mov	r19, r24
    1070:	32 1b       	sub	r19, r18
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	83 17       	cp	r24, r19
    1076:	08 f0       	brcs	.+2      	; 0x107a <main+0x17e>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	92 2b       	or	r25, r18
    107c:	6a 19       	sub	r22, r10
    107e:	69 17       	cp	r22, r25
    1080:	89 f4       	brne	.+34     	; 0x10a4 <main+0x1a8>
    1082:	33 23       	and	r19, r19
    1084:	79 f4       	brne	.+30     	; 0x10a4 <main+0x1a8>
    1086:	44 23       	and	r20, r20
    1088:	69 f4       	brne	.+26     	; 0x10a4 <main+0x1a8>
    108a:	77 23       	and	r23, r23
    108c:	59 f4       	brne	.+22     	; 0x10a4 <main+0x1a8>
    108e:	ee 23       	and	r30, r30
    1090:	49 f4       	brne	.+18     	; 0x10a4 <main+0x1a8>
    1092:	11 23       	and	r17, r17
    1094:	39 f4       	brne	.+14     	; 0x10a4 <main+0x1a8>
    1096:	53 30       	cpi	r21, 0x03	; 3
    1098:	28 f4       	brcc	.+10     	; 0x10a4 <main+0x1a8>
    109a:	52 30       	cpi	r21, 0x02	; 2
    109c:	51 f4       	brne	.+20     	; 0x10b2 <main+0x1b6>
    109e:	3e ee       	ldi	r19, 0xEE	; 238
    10a0:	3c 15       	cp	r19, r12
    10a2:	38 f4       	brcc	.+14     	; 0x10b2 <main+0x1b6>
			actual_t = dt_read();
    10a4:	c1 da       	rcall	.-2686   	; 0x628 <dt_read>
    10a6:	90 93 5f 01 	sts	0x015F, r25
    10aa:	80 93 5e 01 	sts	0x015E, r24
			conversion = 0;
    10ae:	10 92 5c 01 	sts	0x015C, r1
}

timestamp clock(void) {
	return __clock__;
    10b2:	c0 90 2c 01 	lds	r12, 0x012C
    10b6:	b0 90 2d 01 	lds	r11, 0x012D
    10ba:	a0 90 2e 01 	lds	r10, 0x012E
    10be:	90 90 2f 01 	lds	r9, 0x012F
    10c2:	80 90 30 01 	lds	r8, 0x0130
    10c6:	70 90 31 01 	lds	r7, 0x0131
    10ca:	60 90 32 01 	lds	r6, 0x0132
    10ce:	40 91 33 01 	lds	r20, 0x0133
    10d2:	49 83       	std	Y+1, r20	; 0x01
		
		/*
		 * Value update with chosen period
		 */
		
		if (clock() - last_upd >= ((usp * 1000) - CYCLE_CORRECTION)) {
    10d4:	80 91 28 01 	lds	r24, 0x0128
    10d8:	90 91 29 01 	lds	r25, 0x0129
    10dc:	fc 01       	movw	r30, r24
    10de:	28 ee       	ldi	r18, 0xE8	; 232
    10e0:	33 e0       	ldi	r19, 0x03	; 3
    10e2:	e2 9f       	mul	r30, r18
    10e4:	c0 01       	movw	r24, r0
    10e6:	e3 9f       	mul	r30, r19
    10e8:	90 0d       	add	r25, r0
    10ea:	f2 9f       	mul	r31, r18
    10ec:	90 0d       	add	r25, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	84 56       	subi	r24, 0x64	; 100
    10f2:	90 40       	sbci	r25, 0x00	; 0
    10f4:	8c 01       	movw	r16, r24
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	80 91 62 01 	lds	r24, 0x0162
    1106:	e0 91 63 01 	lds	r30, 0x0163
    110a:	f0 91 64 01 	lds	r31, 0x0164
    110e:	a0 91 65 01 	lds	r26, 0x0165
    1112:	b0 91 66 01 	lds	r27, 0x0166
    1116:	50 90 67 01 	lds	r5, 0x0167
    111a:	40 90 68 01 	lds	r4, 0x0168
    111e:	20 90 69 01 	lds	r2, 0x0169
    1122:	3c 2c       	mov	r3, r12
    1124:	38 1a       	sub	r3, r24
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	c3 14       	cp	r12, r3
    112a:	08 f0       	brcs	.+2      	; 0x112e <main+0x232>
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	8b 2d       	mov	r24, r11
    1130:	8e 1b       	sub	r24, r30
    1132:	e1 e0       	ldi	r30, 0x01	; 1
    1134:	b8 16       	cp	r11, r24
    1136:	08 f0       	brcs	.+2      	; 0x113a <main+0x23e>
    1138:	e0 e0       	ldi	r30, 0x00	; 0
    113a:	d8 2e       	mov	r13, r24
    113c:	d9 1a       	sub	r13, r25
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	8d 15       	cp	r24, r13
    1142:	08 f0       	brcs	.+2      	; 0x1146 <main+0x24a>
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	e9 2b       	or	r30, r25
    1148:	8a 2d       	mov	r24, r10
    114a:	8f 1b       	sub	r24, r31
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	a8 16       	cp	r10, r24
    1150:	08 f0       	brcs	.+2      	; 0x1154 <main+0x258>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	f8 2e       	mov	r15, r24
    1156:	fe 1a       	sub	r15, r30
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	8f 15       	cp	r24, r15
    115c:	08 f0       	brcs	.+2      	; 0x1160 <main+0x264>
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	f9 2b       	or	r31, r25
    1162:	89 2d       	mov	r24, r9
    1164:	8a 1b       	sub	r24, r26
    1166:	e1 e0       	ldi	r30, 0x01	; 1
    1168:	98 16       	cp	r9, r24
    116a:	08 f0       	brcs	.+2      	; 0x116e <main+0x272>
    116c:	e0 e0       	ldi	r30, 0x00	; 0
    116e:	e8 2e       	mov	r14, r24
    1170:	ef 1a       	sub	r14, r31
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	8e 15       	cp	r24, r14
    1176:	08 f0       	brcs	.+2      	; 0x117a <main+0x27e>
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	e9 2b       	or	r30, r25
    117c:	88 2d       	mov	r24, r8
    117e:	8b 1b       	sub	r24, r27
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	88 16       	cp	r8, r24
    1184:	08 f0       	brcs	.+2      	; 0x1188 <main+0x28c>
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	b8 2f       	mov	r27, r24
    118a:	be 1b       	sub	r27, r30
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	8b 17       	cp	r24, r27
    1190:	08 f0       	brcs	.+2      	; 0x1194 <main+0x298>
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	f9 2b       	or	r31, r25
    1196:	87 2d       	mov	r24, r7
    1198:	85 19       	sub	r24, r5
    119a:	e1 e0       	ldi	r30, 0x01	; 1
    119c:	78 16       	cp	r7, r24
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <main+0x2a6>
    11a0:	e0 e0       	ldi	r30, 0x00	; 0
    11a2:	a8 2f       	mov	r26, r24
    11a4:	af 1b       	sub	r26, r31
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	8a 17       	cp	r24, r26
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <main+0x2b2>
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	e9 2b       	or	r30, r25
    11b0:	86 2d       	mov	r24, r6
    11b2:	84 19       	sub	r24, r4
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	68 16       	cp	r6, r24
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <main+0x2c0>
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	58 2e       	mov	r5, r24
    11be:	5e 1a       	sub	r5, r30
    11c0:	e1 e0       	ldi	r30, 0x01	; 1
    11c2:	85 15       	cp	r24, r5
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <main+0x2cc>
    11c6:	e0 e0       	ldi	r30, 0x00	; 0
    11c8:	9e 2b       	or	r25, r30
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	82 19       	sub	r24, r2
    11ce:	89 1b       	sub	r24, r25
    11d0:	87 17       	cp	r24, r23
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <main+0x2da>
    11d4:	41 c0       	rjmp	.+130    	; 0x1258 <main+0x35c>
    11d6:	78 17       	cp	r23, r24
    11d8:	d1 f4       	brne	.+52     	; 0x120e <main+0x312>
    11da:	56 16       	cp	r5, r22
    11dc:	e8 f1       	brcs	.+122    	; 0x1258 <main+0x35c>
    11de:	65 15       	cp	r22, r5
    11e0:	b1 f4       	brne	.+44     	; 0x120e <main+0x312>
    11e2:	a5 17       	cp	r26, r21
    11e4:	c8 f1       	brcs	.+114    	; 0x1258 <main+0x35c>
    11e6:	5a 17       	cp	r21, r26
    11e8:	91 f4       	brne	.+36     	; 0x120e <main+0x312>
    11ea:	b4 17       	cp	r27, r20
    11ec:	a8 f1       	brcs	.+106    	; 0x1258 <main+0x35c>
    11ee:	4b 17       	cp	r20, r27
    11f0:	71 f4       	brne	.+28     	; 0x120e <main+0x312>
    11f2:	e3 16       	cp	r14, r19
    11f4:	88 f1       	brcs	.+98     	; 0x1258 <main+0x35c>
    11f6:	3e 15       	cp	r19, r14
    11f8:	51 f4       	brne	.+20     	; 0x120e <main+0x312>
    11fa:	f2 16       	cp	r15, r18
    11fc:	68 f1       	brcs	.+90     	; 0x1258 <main+0x35c>
    11fe:	2f 15       	cp	r18, r15
    1200:	31 f4       	brne	.+12     	; 0x120e <main+0x312>
    1202:	d1 16       	cp	r13, r17
    1204:	48 f1       	brcs	.+82     	; 0x1258 <main+0x35c>
    1206:	1d 15       	cp	r17, r13
    1208:	11 f4       	brne	.+4      	; 0x120e <main+0x312>
    120a:	30 16       	cp	r3, r16
    120c:	28 f1       	brcs	.+74     	; 0x1258 <main+0x35c>
			shown_value = actual_t;
    120e:	20 91 5e 01 	lds	r18, 0x015E
    1212:	30 91 5f 01 	lds	r19, 0x015F
    1216:	30 93 61 01 	sts	0x0161, r19
    121a:	20 93 60 01 	sts	0x0160, r18
    121e:	ec e6       	ldi	r30, 0x6C	; 108
    1220:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	81 93       	st	Z+, r24
    1228:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	ec 3d       	cpi	r30, 0xDC	; 220
    122e:	f4 07       	cpc	r31, r20
    1230:	c1 f7       	brne	.-16     	; 0x1222 <main+0x326>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
    1232:	31 83       	std	Z+1, r19	; 0x01
    1234:	20 83       	st	Z, r18
		 */
		
		if (clock() - last_upd >= ((usp * 1000) - CYCLE_CORRECTION)) {
			shown_value = actual_t;
 			add_new_chart_value(shown_value);
			last_upd = clock();
    1236:	c0 92 62 01 	sts	0x0162, r12
    123a:	b0 92 63 01 	sts	0x0163, r11
    123e:	a0 92 64 01 	sts	0x0164, r10
    1242:	90 92 65 01 	sts	0x0165, r9
    1246:	80 92 66 01 	sts	0x0166, r8
    124a:	70 92 67 01 	sts	0x0167, r7
    124e:	60 92 68 01 	sts	0x0168, r6
    1252:	59 81       	ldd	r21, Y+1	; 0x01
    1254:	50 93 69 01 	sts	0x0169, r21
		}
		
		lcd_clear();
    1258:	24 de       	rcall	.-952    	; 0xea2 <lcd_clear>
		
		if (io_read(D) && clock() - debounce_d > DEBOUNCE_T) {
    125a:	9b 9b       	sbis	0x13, 3	; 19
    125c:	a7 c0       	rjmp	.+334    	; 0x13ac <main+0x4b0>
    125e:	90 91 2c 01 	lds	r25, 0x012C
    1262:	40 91 2d 01 	lds	r20, 0x012D
    1266:	60 91 2e 01 	lds	r22, 0x012E
    126a:	e0 91 2f 01 	lds	r30, 0x012F
    126e:	a0 91 30 01 	lds	r26, 0x0130
    1272:	10 91 31 01 	lds	r17, 0x0131
    1276:	f0 90 32 01 	lds	r15, 0x0132
    127a:	50 91 33 01 	lds	r21, 0x0133
    127e:	80 91 4c 01 	lds	r24, 0x014C
    1282:	20 91 4d 01 	lds	r18, 0x014D
    1286:	70 91 4e 01 	lds	r23, 0x014E
    128a:	f0 91 4f 01 	lds	r31, 0x014F
    128e:	00 91 50 01 	lds	r16, 0x0150
    1292:	d0 90 51 01 	lds	r13, 0x0151
    1296:	b0 90 52 01 	lds	r11, 0x0152
    129a:	a0 90 53 01 	lds	r10, 0x0153
    129e:	c9 2e       	mov	r12, r25
    12a0:	c8 1a       	sub	r12, r24
    12a2:	31 e0       	ldi	r19, 0x01	; 1
    12a4:	9c 15       	cp	r25, r12
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <main+0x3ae>
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	84 2f       	mov	r24, r20
    12ac:	82 1b       	sub	r24, r18
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	48 17       	cp	r20, r24
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <main+0x3ba>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	e8 2e       	mov	r14, r24
    12b8:	e3 1a       	sub	r14, r19
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	8e 15       	cp	r24, r14
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <main+0x3c6>
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	29 2b       	or	r18, r25
    12c4:	86 2f       	mov	r24, r22
    12c6:	87 1b       	sub	r24, r23
    12c8:	31 e0       	ldi	r19, 0x01	; 1
    12ca:	68 17       	cp	r22, r24
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <main+0x3d4>
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	b8 2f       	mov	r27, r24
    12d2:	b2 1b       	sub	r27, r18
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	8b 17       	cp	r24, r27
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <main+0x3e0>
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	39 2b       	or	r19, r25
    12de:	8e 2f       	mov	r24, r30
    12e0:	8f 1b       	sub	r24, r31
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	e8 17       	cp	r30, r24
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <main+0x3ee>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	78 2f       	mov	r23, r24
    12ec:	73 1b       	sub	r23, r19
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	87 17       	cp	r24, r23
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <main+0x3fa>
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	29 2b       	or	r18, r25
    12f8:	8a 2f       	mov	r24, r26
    12fa:	80 1b       	sub	r24, r16
    12fc:	31 e0       	ldi	r19, 0x01	; 1
    12fe:	a8 17       	cp	r26, r24
    1300:	08 f0       	brcs	.+2      	; 0x1304 <main+0x408>
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	68 2f       	mov	r22, r24
    1306:	62 1b       	sub	r22, r18
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	86 17       	cp	r24, r22
    130c:	08 f0       	brcs	.+2      	; 0x1310 <main+0x414>
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	39 2b       	or	r19, r25
    1312:	81 2f       	mov	r24, r17
    1314:	8d 19       	sub	r24, r13
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	18 17       	cp	r17, r24
    131a:	08 f0       	brcs	.+2      	; 0x131e <main+0x422>
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	48 2f       	mov	r20, r24
    1320:	43 1b       	sub	r20, r19
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	84 17       	cp	r24, r20
    1326:	08 f0       	brcs	.+2      	; 0x132a <main+0x42e>
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	29 2b       	or	r18, r25
    132c:	8f 2d       	mov	r24, r15
    132e:	8b 19       	sub	r24, r11
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	f8 16       	cp	r15, r24
    1334:	08 f0       	brcs	.+2      	; 0x1338 <main+0x43c>
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	38 2f       	mov	r19, r24
    133a:	32 1b       	sub	r19, r18
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	83 17       	cp	r24, r19
    1340:	08 f0       	brcs	.+2      	; 0x1344 <main+0x448>
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	92 2b       	or	r25, r18
    1346:	5a 19       	sub	r21, r10
    1348:	59 17       	cp	r21, r25
    134a:	79 f4       	brne	.+30     	; 0x136a <main+0x46e>
    134c:	33 23       	and	r19, r19
    134e:	69 f4       	brne	.+26     	; 0x136a <main+0x46e>
    1350:	44 23       	and	r20, r20
    1352:	59 f4       	brne	.+22     	; 0x136a <main+0x46e>
    1354:	66 23       	and	r22, r22
    1356:	49 f4       	brne	.+18     	; 0x136a <main+0x46e>
    1358:	77 23       	and	r23, r23
    135a:	39 f4       	brne	.+14     	; 0x136a <main+0x46e>
    135c:	bb 23       	and	r27, r27
    135e:	29 f4       	brne	.+10     	; 0x136a <main+0x46e>
    1360:	ee 20       	and	r14, r14
    1362:	19 f4       	brne	.+6      	; 0x136a <main+0x46e>
    1364:	8a ef       	ldi	r24, 0xFA	; 250
    1366:	8c 15       	cp	r24, r12
    1368:	08 f5       	brcc	.+66     	; 0x13ac <main+0x4b0>
			change_view_mode();
    136a:	c2 da       	rcall	.-2684   	; 0x8f0 <change_view_mode>
			debounce_d = clock();
    136c:	80 91 2c 01 	lds	r24, 0x012C
    1370:	80 93 4c 01 	sts	0x014C, r24
    1374:	80 91 2d 01 	lds	r24, 0x012D
    1378:	80 93 4d 01 	sts	0x014D, r24
    137c:	80 91 2e 01 	lds	r24, 0x012E
    1380:	80 93 4e 01 	sts	0x014E, r24
    1384:	80 91 2f 01 	lds	r24, 0x012F
    1388:	80 93 4f 01 	sts	0x014F, r24
    138c:	80 91 30 01 	lds	r24, 0x0130
    1390:	80 93 50 01 	sts	0x0150, r24
    1394:	80 91 31 01 	lds	r24, 0x0131
    1398:	80 93 51 01 	sts	0x0151, r24
    139c:	80 91 32 01 	lds	r24, 0x0132
    13a0:	80 93 52 01 	sts	0x0152, r24
    13a4:	80 91 33 01 	lds	r24, 0x0133
    13a8:	80 93 53 01 	sts	0x0153, r24
		}
		
		if (vm == MAIN) {
    13ac:	80 91 6a 01 	lds	r24, 0x016A
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <main+0x4ba>
    13b4:	6b c1       	rjmp	.+726    	; 0x168c <main+0x790>

			/*
			 * Handle buttons
			 */

			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    13b6:	98 9b       	sbis	0x13, 0	; 19
    13b8:	a7 c0       	rjmp	.+334    	; 0x1508 <main+0x60c>
    13ba:	90 91 2c 01 	lds	r25, 0x012C
    13be:	40 91 2d 01 	lds	r20, 0x012D
    13c2:	60 91 2e 01 	lds	r22, 0x012E
    13c6:	e0 91 2f 01 	lds	r30, 0x012F
    13ca:	a0 91 30 01 	lds	r26, 0x0130
    13ce:	10 91 31 01 	lds	r17, 0x0131
    13d2:	f0 90 32 01 	lds	r15, 0x0132
    13d6:	50 91 33 01 	lds	r21, 0x0133
    13da:	80 91 34 01 	lds	r24, 0x0134
    13de:	20 91 35 01 	lds	r18, 0x0135
    13e2:	70 91 36 01 	lds	r23, 0x0136
    13e6:	f0 91 37 01 	lds	r31, 0x0137
    13ea:	00 91 38 01 	lds	r16, 0x0138
    13ee:	d0 90 39 01 	lds	r13, 0x0139
    13f2:	b0 90 3a 01 	lds	r11, 0x013A
    13f6:	a0 90 3b 01 	lds	r10, 0x013B
    13fa:	c9 2e       	mov	r12, r25
    13fc:	c8 1a       	sub	r12, r24
    13fe:	31 e0       	ldi	r19, 0x01	; 1
    1400:	9c 15       	cp	r25, r12
    1402:	08 f0       	brcs	.+2      	; 0x1406 <main+0x50a>
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	84 2f       	mov	r24, r20
    1408:	82 1b       	sub	r24, r18
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	48 17       	cp	r20, r24
    140e:	08 f0       	brcs	.+2      	; 0x1412 <main+0x516>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	e8 2e       	mov	r14, r24
    1414:	e3 1a       	sub	r14, r19
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	8e 15       	cp	r24, r14
    141a:	08 f0       	brcs	.+2      	; 0x141e <main+0x522>
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	29 2b       	or	r18, r25
    1420:	86 2f       	mov	r24, r22
    1422:	87 1b       	sub	r24, r23
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	68 17       	cp	r22, r24
    1428:	08 f0       	brcs	.+2      	; 0x142c <main+0x530>
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	b8 2f       	mov	r27, r24
    142e:	b2 1b       	sub	r27, r18
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	8b 17       	cp	r24, r27
    1434:	08 f0       	brcs	.+2      	; 0x1438 <main+0x53c>
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	39 2b       	or	r19, r25
    143a:	8e 2f       	mov	r24, r30
    143c:	8f 1b       	sub	r24, r31
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	e8 17       	cp	r30, r24
    1442:	08 f0       	brcs	.+2      	; 0x1446 <main+0x54a>
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	78 2f       	mov	r23, r24
    1448:	73 1b       	sub	r23, r19
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	87 17       	cp	r24, r23
    144e:	08 f0       	brcs	.+2      	; 0x1452 <main+0x556>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	29 2b       	or	r18, r25
    1454:	8a 2f       	mov	r24, r26
    1456:	80 1b       	sub	r24, r16
    1458:	31 e0       	ldi	r19, 0x01	; 1
    145a:	a8 17       	cp	r26, r24
    145c:	08 f0       	brcs	.+2      	; 0x1460 <main+0x564>
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	68 2f       	mov	r22, r24
    1462:	62 1b       	sub	r22, r18
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	86 17       	cp	r24, r22
    1468:	08 f0       	brcs	.+2      	; 0x146c <main+0x570>
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	39 2b       	or	r19, r25
    146e:	81 2f       	mov	r24, r17
    1470:	8d 19       	sub	r24, r13
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	18 17       	cp	r17, r24
    1476:	08 f0       	brcs	.+2      	; 0x147a <main+0x57e>
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	48 2f       	mov	r20, r24
    147c:	43 1b       	sub	r20, r19
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	84 17       	cp	r24, r20
    1482:	08 f0       	brcs	.+2      	; 0x1486 <main+0x58a>
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	29 2b       	or	r18, r25
    1488:	8f 2d       	mov	r24, r15
    148a:	8b 19       	sub	r24, r11
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	f8 16       	cp	r15, r24
    1490:	08 f0       	brcs	.+2      	; 0x1494 <main+0x598>
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	38 2f       	mov	r19, r24
    1496:	32 1b       	sub	r19, r18
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	83 17       	cp	r24, r19
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <main+0x5a4>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	92 2b       	or	r25, r18
    14a2:	5a 19       	sub	r21, r10
    14a4:	59 17       	cp	r21, r25
    14a6:	79 f4       	brne	.+30     	; 0x14c6 <main+0x5ca>
    14a8:	33 23       	and	r19, r19
    14aa:	69 f4       	brne	.+26     	; 0x14c6 <main+0x5ca>
    14ac:	44 23       	and	r20, r20
    14ae:	59 f4       	brne	.+22     	; 0x14c6 <main+0x5ca>
    14b0:	66 23       	and	r22, r22
    14b2:	49 f4       	brne	.+18     	; 0x14c6 <main+0x5ca>
    14b4:	77 23       	and	r23, r23
    14b6:	39 f4       	brne	.+14     	; 0x14c6 <main+0x5ca>
    14b8:	bb 23       	and	r27, r27
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <main+0x5ca>
    14bc:	ee 20       	and	r14, r14
    14be:	19 f4       	brne	.+6      	; 0x14c6 <main+0x5ca>
    14c0:	ea ef       	ldi	r30, 0xFA	; 250
    14c2:	ec 15       	cp	r30, r12
    14c4:	08 f5       	brcc	.+66     	; 0x1508 <main+0x60c>
				change_upd_speed();
    14c6:	e4 d9       	rcall	.-3128   	; 0x890 <change_upd_speed>
				debounce_a = clock();
    14c8:	80 91 2c 01 	lds	r24, 0x012C
    14cc:	80 93 34 01 	sts	0x0134, r24
    14d0:	80 91 2d 01 	lds	r24, 0x012D
    14d4:	80 93 35 01 	sts	0x0135, r24
    14d8:	80 91 2e 01 	lds	r24, 0x012E
    14dc:	80 93 36 01 	sts	0x0136, r24
    14e0:	80 91 2f 01 	lds	r24, 0x012F
    14e4:	80 93 37 01 	sts	0x0137, r24
    14e8:	80 91 30 01 	lds	r24, 0x0130
    14ec:	80 93 38 01 	sts	0x0138, r24
    14f0:	80 91 31 01 	lds	r24, 0x0131
    14f4:	80 93 39 01 	sts	0x0139, r24
    14f8:	80 91 32 01 	lds	r24, 0x0132
    14fc:	80 93 3a 01 	sts	0x013A, r24
    1500:	80 91 33 01 	lds	r24, 0x0133
    1504:	80 93 3b 01 	sts	0x013B, r24
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    1508:	99 9b       	sbis	0x13, 1	; 19
    150a:	a7 c0       	rjmp	.+334    	; 0x165a <main+0x75e>
    150c:	90 91 2c 01 	lds	r25, 0x012C
    1510:	40 91 2d 01 	lds	r20, 0x012D
    1514:	60 91 2e 01 	lds	r22, 0x012E
    1518:	e0 91 2f 01 	lds	r30, 0x012F
    151c:	a0 91 30 01 	lds	r26, 0x0130
    1520:	10 91 31 01 	lds	r17, 0x0131
    1524:	f0 90 32 01 	lds	r15, 0x0132
    1528:	50 91 33 01 	lds	r21, 0x0133
    152c:	80 91 3c 01 	lds	r24, 0x013C
    1530:	20 91 3d 01 	lds	r18, 0x013D
    1534:	70 91 3e 01 	lds	r23, 0x013E
    1538:	f0 91 3f 01 	lds	r31, 0x013F
    153c:	00 91 40 01 	lds	r16, 0x0140
    1540:	d0 90 41 01 	lds	r13, 0x0141
    1544:	b0 90 42 01 	lds	r11, 0x0142
    1548:	a0 90 43 01 	lds	r10, 0x0143
    154c:	c9 2e       	mov	r12, r25
    154e:	c8 1a       	sub	r12, r24
    1550:	31 e0       	ldi	r19, 0x01	; 1
    1552:	9c 15       	cp	r25, r12
    1554:	08 f0       	brcs	.+2      	; 0x1558 <main+0x65c>
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	84 2f       	mov	r24, r20
    155a:	82 1b       	sub	r24, r18
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	48 17       	cp	r20, r24
    1560:	08 f0       	brcs	.+2      	; 0x1564 <main+0x668>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	e8 2e       	mov	r14, r24
    1566:	e3 1a       	sub	r14, r19
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	8e 15       	cp	r24, r14
    156c:	08 f0       	brcs	.+2      	; 0x1570 <main+0x674>
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	29 2b       	or	r18, r25
    1572:	86 2f       	mov	r24, r22
    1574:	87 1b       	sub	r24, r23
    1576:	31 e0       	ldi	r19, 0x01	; 1
    1578:	68 17       	cp	r22, r24
    157a:	08 f0       	brcs	.+2      	; 0x157e <main+0x682>
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	b8 2f       	mov	r27, r24
    1580:	b2 1b       	sub	r27, r18
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	8b 17       	cp	r24, r27
    1586:	08 f0       	brcs	.+2      	; 0x158a <main+0x68e>
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	39 2b       	or	r19, r25
    158c:	8e 2f       	mov	r24, r30
    158e:	8f 1b       	sub	r24, r31
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	e8 17       	cp	r30, r24
    1594:	08 f0       	brcs	.+2      	; 0x1598 <main+0x69c>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	78 2f       	mov	r23, r24
    159a:	73 1b       	sub	r23, r19
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	87 17       	cp	r24, r23
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <main+0x6a8>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	29 2b       	or	r18, r25
    15a6:	8a 2f       	mov	r24, r26
    15a8:	80 1b       	sub	r24, r16
    15aa:	31 e0       	ldi	r19, 0x01	; 1
    15ac:	a8 17       	cp	r26, r24
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <main+0x6b6>
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	68 2f       	mov	r22, r24
    15b4:	62 1b       	sub	r22, r18
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	86 17       	cp	r24, r22
    15ba:	08 f0       	brcs	.+2      	; 0x15be <main+0x6c2>
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	39 2b       	or	r19, r25
    15c0:	81 2f       	mov	r24, r17
    15c2:	8d 19       	sub	r24, r13
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	18 17       	cp	r17, r24
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <main+0x6d0>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	48 2f       	mov	r20, r24
    15ce:	43 1b       	sub	r20, r19
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	84 17       	cp	r24, r20
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <main+0x6dc>
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	29 2b       	or	r18, r25
    15da:	8f 2d       	mov	r24, r15
    15dc:	8b 19       	sub	r24, r11
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	f8 16       	cp	r15, r24
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <main+0x6ea>
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	38 2f       	mov	r19, r24
    15e8:	32 1b       	sub	r19, r18
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	83 17       	cp	r24, r19
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <main+0x6f6>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	92 2b       	or	r25, r18
    15f4:	5a 19       	sub	r21, r10
    15f6:	59 17       	cp	r21, r25
    15f8:	79 f4       	brne	.+30     	; 0x1618 <main+0x71c>
    15fa:	33 23       	and	r19, r19
    15fc:	69 f4       	brne	.+26     	; 0x1618 <main+0x71c>
    15fe:	44 23       	and	r20, r20
    1600:	59 f4       	brne	.+22     	; 0x1618 <main+0x71c>
    1602:	66 23       	and	r22, r22
    1604:	49 f4       	brne	.+18     	; 0x1618 <main+0x71c>
    1606:	77 23       	and	r23, r23
    1608:	39 f4       	brne	.+14     	; 0x1618 <main+0x71c>
    160a:	bb 23       	and	r27, r27
    160c:	29 f4       	brne	.+10     	; 0x1618 <main+0x71c>
    160e:	ee 20       	and	r14, r14
    1610:	19 f4       	brne	.+6      	; 0x1618 <main+0x71c>
    1612:	fa ef       	ldi	r31, 0xFA	; 250
    1614:	fc 15       	cp	r31, r12
    1616:	08 f5       	brcc	.+66     	; 0x165a <main+0x75e>
				change_line_type();
    1618:	59 d9       	rcall	.-3406   	; 0x8cc <change_line_type>
				debounce_b = clock();
    161a:	80 91 2c 01 	lds	r24, 0x012C
    161e:	80 93 3c 01 	sts	0x013C, r24
    1622:	80 91 2d 01 	lds	r24, 0x012D
    1626:	80 93 3d 01 	sts	0x013D, r24
    162a:	80 91 2e 01 	lds	r24, 0x012E
    162e:	80 93 3e 01 	sts	0x013E, r24
    1632:	80 91 2f 01 	lds	r24, 0x012F
    1636:	80 93 3f 01 	sts	0x013F, r24
    163a:	80 91 30 01 	lds	r24, 0x0130
    163e:	80 93 40 01 	sts	0x0140, r24
    1642:	80 91 31 01 	lds	r24, 0x0131
    1646:	80 93 41 01 	sts	0x0141, r24
    164a:	80 91 32 01 	lds	r24, 0x0132
    164e:	80 93 42 01 	sts	0x0142, r24
    1652:	80 91 33 01 	lds	r24, 0x0133
    1656:	80 93 43 01 	sts	0x0143, r24
			}
			draw_interface();
    165a:	a2 da       	rcall	.-2748   	; 0xba0 <draw_interface>
			draw_values_line(ltp);
    165c:	80 91 2a 01 	lds	r24, 0x012A
    1660:	59 da       	rcall	.-2894   	; 0xb14 <draw_values_line>
			draw_update_speed_indicator(usp);
    1662:	80 91 28 01 	lds	r24, 0x0128
    1666:	90 91 29 01 	lds	r25, 0x0129
    166a:	27 da       	rcall	.-2994   	; 0xaba <draw_update_speed_indicator>
			draw_bar(ltp, shown_value);
    166c:	60 91 60 01 	lds	r22, 0x0160
    1670:	70 91 61 01 	lds	r23, 0x0161
    1674:	80 91 2a 01 	lds	r24, 0x012A
    1678:	0e da       	rcall	.-3044   	; 0xa96 <draw_bar>
			//draw_current_value(shown_value);
			//draw_chart(ltp);
			
			lcd_draw_v2(_tball, 10, 10, 8, 8, BLACK);
    167a:	8f e0       	ldi	r24, 0x0F	; 15
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	6a e0       	ldi	r22, 0x0A	; 10
    1680:	4a e0       	ldi	r20, 0x0A	; 10
    1682:	28 e0       	ldi	r18, 0x08	; 8
    1684:	08 e0       	ldi	r16, 0x08	; 8
    1686:	ee 24       	eor	r14, r14
    1688:	e3 94       	inc	r14
    168a:	ae d6       	rcall	.+3420   	; 0x23e8 <__data_load_end+0x69c>
		}
		
		if (vm == HOOKS) {
    168c:	80 91 6a 01 	lds	r24, 0x016A
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	09 f0       	breq	.+2      	; 0x1696 <main+0x79a>
    1694:	49 c1       	rjmp	.+658    	; 0x1928 <main+0xa2c>
			lcd_put_string(1, 1, "Hooks", BLACK);
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	40 e6       	ldi	r20, 0x60	; 96
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	59 db       	rcall	.-2382   	; 0xd52 <lcd_put_string>
			for (int i = 0; i < HOOKS_N; i++) {
				print_hook(i);
			}
			
			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    16a0:	98 9b       	sbis	0x13, 0	; 19
    16a2:	9e c0       	rjmp	.+316    	; 0x17e0 <main+0x8e4>
    16a4:	60 91 2c 01 	lds	r22, 0x012C
    16a8:	70 91 2d 01 	lds	r23, 0x012D
    16ac:	e0 91 2e 01 	lds	r30, 0x012E
    16b0:	f0 91 2f 01 	lds	r31, 0x012F
    16b4:	a0 91 30 01 	lds	r26, 0x0130
    16b8:	b0 91 31 01 	lds	r27, 0x0131
    16bc:	10 91 32 01 	lds	r17, 0x0132
    16c0:	90 90 33 01 	lds	r9, 0x0133
    16c4:	80 91 34 01 	lds	r24, 0x0134
    16c8:	20 91 35 01 	lds	r18, 0x0135
    16cc:	30 91 36 01 	lds	r19, 0x0136
    16d0:	40 91 37 01 	lds	r20, 0x0137
    16d4:	50 91 38 01 	lds	r21, 0x0138
    16d8:	d0 90 39 01 	lds	r13, 0x0139
    16dc:	b0 90 3a 01 	lds	r11, 0x013A
    16e0:	a0 90 3b 01 	lds	r10, 0x013B
    16e4:	c6 2e       	mov	r12, r22
    16e6:	c8 1a       	sub	r12, r24
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	6c 15       	cp	r22, r12
    16ec:	08 f0       	brcs	.+2      	; 0x16f0 <main+0x7f4>
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	87 2f       	mov	r24, r23
    16f2:	82 1b       	sub	r24, r18
    16f4:	21 e0       	ldi	r18, 0x01	; 1
    16f6:	78 17       	cp	r23, r24
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <main+0x800>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	e8 2e       	mov	r14, r24
    16fe:	e9 1a       	sub	r14, r25
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	8e 15       	cp	r24, r14
    1704:	08 f0       	brcs	.+2      	; 0x1708 <main+0x80c>
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	29 2b       	or	r18, r25
    170a:	8e 2f       	mov	r24, r30
    170c:	83 1b       	sub	r24, r19
    170e:	31 e0       	ldi	r19, 0x01	; 1
    1710:	e8 17       	cp	r30, r24
    1712:	08 f0       	brcs	.+2      	; 0x1716 <main+0x81a>
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	f8 2e       	mov	r15, r24
    1718:	f2 1a       	sub	r15, r18
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	8f 15       	cp	r24, r15
    171e:	08 f0       	brcs	.+2      	; 0x1722 <main+0x826>
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	39 2b       	or	r19, r25
    1724:	8f 2f       	mov	r24, r31
    1726:	84 1b       	sub	r24, r20
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	f8 17       	cp	r31, r24
    172c:	08 f0       	brcs	.+2      	; 0x1730 <main+0x834>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	08 2f       	mov	r16, r24
    1732:	03 1b       	sub	r16, r19
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	80 17       	cp	r24, r16
    1738:	08 f0       	brcs	.+2      	; 0x173c <main+0x840>
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	29 2b       	or	r18, r25
    173e:	8a 2f       	mov	r24, r26
    1740:	85 1b       	sub	r24, r21
    1742:	31 e0       	ldi	r19, 0x01	; 1
    1744:	a8 17       	cp	r26, r24
    1746:	08 f0       	brcs	.+2      	; 0x174a <main+0x84e>
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	58 2f       	mov	r21, r24
    174c:	52 1b       	sub	r21, r18
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	85 17       	cp	r24, r21
    1752:	08 f0       	brcs	.+2      	; 0x1756 <main+0x85a>
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	39 2b       	or	r19, r25
    1758:	8b 2f       	mov	r24, r27
    175a:	8d 19       	sub	r24, r13
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	b8 17       	cp	r27, r24
    1760:	08 f0       	brcs	.+2      	; 0x1764 <main+0x868>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	48 2f       	mov	r20, r24
    1766:	43 1b       	sub	r20, r19
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	84 17       	cp	r24, r20
    176c:	08 f0       	brcs	.+2      	; 0x1770 <main+0x874>
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	29 2b       	or	r18, r25
    1772:	81 2f       	mov	r24, r17
    1774:	8b 19       	sub	r24, r11
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	18 17       	cp	r17, r24
    177a:	08 f0       	brcs	.+2      	; 0x177e <main+0x882>
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	38 2f       	mov	r19, r24
    1780:	32 1b       	sub	r19, r18
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	83 17       	cp	r24, r19
    1786:	08 f0       	brcs	.+2      	; 0x178a <main+0x88e>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	92 2b       	or	r25, r18
    178c:	89 2d       	mov	r24, r9
    178e:	8a 19       	sub	r24, r10
    1790:	89 17       	cp	r24, r25
    1792:	79 f4       	brne	.+30     	; 0x17b2 <main+0x8b6>
    1794:	33 23       	and	r19, r19
    1796:	69 f4       	brne	.+26     	; 0x17b2 <main+0x8b6>
    1798:	44 23       	and	r20, r20
    179a:	59 f4       	brne	.+22     	; 0x17b2 <main+0x8b6>
    179c:	55 23       	and	r21, r21
    179e:	49 f4       	brne	.+18     	; 0x17b2 <main+0x8b6>
    17a0:	00 23       	and	r16, r16
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <main+0x8b6>
    17a4:	ff 20       	and	r15, r15
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <main+0x8b6>
    17a8:	ee 20       	and	r14, r14
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <main+0x8b6>
    17ac:	2a ef       	ldi	r18, 0xFA	; 250
    17ae:	2c 15       	cp	r18, r12
    17b0:	b8 f4       	brcc	.+46     	; 0x17e0 <main+0x8e4>
				if (hook_m_ptr > 0) hook_m_ptr--;
    17b2:	80 91 6b 01 	lds	r24, 0x016B
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <main+0x8c4>
    17ba:	81 50       	subi	r24, 0x01	; 1
    17bc:	80 93 6b 01 	sts	0x016B, r24
				debounce_a = clock();
    17c0:	60 93 34 01 	sts	0x0134, r22
    17c4:	70 93 35 01 	sts	0x0135, r23
    17c8:	e0 93 36 01 	sts	0x0136, r30
    17cc:	f0 93 37 01 	sts	0x0137, r31
    17d0:	a0 93 38 01 	sts	0x0138, r26
    17d4:	b0 93 39 01 	sts	0x0139, r27
    17d8:	10 93 3a 01 	sts	0x013A, r17
    17dc:	90 92 3b 01 	sts	0x013B, r9
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    17e0:	99 9b       	sbis	0x13, 1	; 19
    17e2:	9e c0       	rjmp	.+316    	; 0x1920 <main+0xa24>
    17e4:	60 91 2c 01 	lds	r22, 0x012C
    17e8:	70 91 2d 01 	lds	r23, 0x012D
    17ec:	e0 91 2e 01 	lds	r30, 0x012E
    17f0:	f0 91 2f 01 	lds	r31, 0x012F
    17f4:	a0 91 30 01 	lds	r26, 0x0130
    17f8:	b0 91 31 01 	lds	r27, 0x0131
    17fc:	10 91 32 01 	lds	r17, 0x0132
    1800:	90 90 33 01 	lds	r9, 0x0133
    1804:	80 91 3c 01 	lds	r24, 0x013C
    1808:	20 91 3d 01 	lds	r18, 0x013D
    180c:	30 91 3e 01 	lds	r19, 0x013E
    1810:	40 91 3f 01 	lds	r20, 0x013F
    1814:	50 91 40 01 	lds	r21, 0x0140
    1818:	d0 90 41 01 	lds	r13, 0x0141
    181c:	b0 90 42 01 	lds	r11, 0x0142
    1820:	a0 90 43 01 	lds	r10, 0x0143
    1824:	c6 2e       	mov	r12, r22
    1826:	c8 1a       	sub	r12, r24
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	6c 15       	cp	r22, r12
    182c:	08 f0       	brcs	.+2      	; 0x1830 <main+0x934>
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	87 2f       	mov	r24, r23
    1832:	82 1b       	sub	r24, r18
    1834:	21 e0       	ldi	r18, 0x01	; 1
    1836:	78 17       	cp	r23, r24
    1838:	08 f0       	brcs	.+2      	; 0x183c <main+0x940>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	e8 2e       	mov	r14, r24
    183e:	e9 1a       	sub	r14, r25
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	8e 15       	cp	r24, r14
    1844:	08 f0       	brcs	.+2      	; 0x1848 <main+0x94c>
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	29 2b       	or	r18, r25
    184a:	8e 2f       	mov	r24, r30
    184c:	83 1b       	sub	r24, r19
    184e:	31 e0       	ldi	r19, 0x01	; 1
    1850:	e8 17       	cp	r30, r24
    1852:	08 f0       	brcs	.+2      	; 0x1856 <main+0x95a>
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	f8 2e       	mov	r15, r24
    1858:	f2 1a       	sub	r15, r18
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	8f 15       	cp	r24, r15
    185e:	08 f0       	brcs	.+2      	; 0x1862 <main+0x966>
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	39 2b       	or	r19, r25
    1864:	8f 2f       	mov	r24, r31
    1866:	84 1b       	sub	r24, r20
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	f8 17       	cp	r31, r24
    186c:	08 f0       	brcs	.+2      	; 0x1870 <main+0x974>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	08 2f       	mov	r16, r24
    1872:	03 1b       	sub	r16, r19
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	80 17       	cp	r24, r16
    1878:	08 f0       	brcs	.+2      	; 0x187c <main+0x980>
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	29 2b       	or	r18, r25
    187e:	8a 2f       	mov	r24, r26
    1880:	85 1b       	sub	r24, r21
    1882:	31 e0       	ldi	r19, 0x01	; 1
    1884:	a8 17       	cp	r26, r24
    1886:	08 f0       	brcs	.+2      	; 0x188a <main+0x98e>
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	58 2f       	mov	r21, r24
    188c:	52 1b       	sub	r21, r18
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	85 17       	cp	r24, r21
    1892:	08 f0       	brcs	.+2      	; 0x1896 <main+0x99a>
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	39 2b       	or	r19, r25
    1898:	8b 2f       	mov	r24, r27
    189a:	8d 19       	sub	r24, r13
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	b8 17       	cp	r27, r24
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <main+0x9a8>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	48 2f       	mov	r20, r24
    18a6:	43 1b       	sub	r20, r19
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	84 17       	cp	r24, r20
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <main+0x9b4>
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	29 2b       	or	r18, r25
    18b2:	81 2f       	mov	r24, r17
    18b4:	8b 19       	sub	r24, r11
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	18 17       	cp	r17, r24
    18ba:	08 f0       	brcs	.+2      	; 0x18be <main+0x9c2>
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	38 2f       	mov	r19, r24
    18c0:	32 1b       	sub	r19, r18
    18c2:	21 e0       	ldi	r18, 0x01	; 1
    18c4:	83 17       	cp	r24, r19
    18c6:	08 f0       	brcs	.+2      	; 0x18ca <main+0x9ce>
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	92 2b       	or	r25, r18
    18cc:	89 2d       	mov	r24, r9
    18ce:	8a 19       	sub	r24, r10
    18d0:	89 17       	cp	r24, r25
    18d2:	79 f4       	brne	.+30     	; 0x18f2 <main+0x9f6>
    18d4:	33 23       	and	r19, r19
    18d6:	69 f4       	brne	.+26     	; 0x18f2 <main+0x9f6>
    18d8:	44 23       	and	r20, r20
    18da:	59 f4       	brne	.+22     	; 0x18f2 <main+0x9f6>
    18dc:	55 23       	and	r21, r21
    18de:	49 f4       	brne	.+18     	; 0x18f2 <main+0x9f6>
    18e0:	00 23       	and	r16, r16
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <main+0x9f6>
    18e4:	ff 20       	and	r15, r15
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <main+0x9f6>
    18e8:	ee 20       	and	r14, r14
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <main+0x9f6>
    18ec:	3a ef       	ldi	r19, 0xFA	; 250
    18ee:	3c 15       	cp	r19, r12
    18f0:	b8 f4       	brcc	.+46     	; 0x1920 <main+0xa24>
				if (hook_m_ptr < 3) hook_m_ptr++;
    18f2:	80 91 6b 01 	lds	r24, 0x016B
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	18 f4       	brcc	.+6      	; 0x1900 <main+0xa04>
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 6b 01 	sts	0x016B, r24
				debounce_b = clock();
    1900:	60 93 3c 01 	sts	0x013C, r22
    1904:	70 93 3d 01 	sts	0x013D, r23
    1908:	e0 93 3e 01 	sts	0x013E, r30
    190c:	f0 93 3f 01 	sts	0x013F, r31
    1910:	a0 93 40 01 	sts	0x0140, r26
    1914:	b0 93 41 01 	sts	0x0141, r27
    1918:	10 93 42 01 	sts	0x0142, r17
    191c:	90 92 43 01 	sts	0x0143, r9
			}
			
			draw_hook_ptr(hook_m_ptr + 1);
    1920:	80 91 6b 01 	lds	r24, 0x016B
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	0d d8       	rcall	.-4070   	; 0x942 <draw_hook_ptr>
		}
		
		lcd_update();
    1928:	a9 d3       	rcall	.+1874   	; 0x207c <__data_load_end+0x330>
    192a:	08 cb       	rjmp	.-2544   	; 0xf3c <main+0x40>

0000192c <__subsf3>:
    192c:	50 58       	subi	r21, 0x80	; 128

0000192e <__addsf3>:
    192e:	bb 27       	eor	r27, r27
    1930:	aa 27       	eor	r26, r26
    1932:	0e d0       	rcall	.+28     	; 0x1950 <__addsf3x>
    1934:	a8 c0       	rjmp	.+336    	; 0x1a86 <__fp_round>
    1936:	99 d0       	rcall	.+306    	; 0x1a6a <__fp_pscA>
    1938:	30 f0       	brcs	.+12     	; 0x1946 <__addsf3+0x18>
    193a:	9e d0       	rcall	.+316    	; 0x1a78 <__fp_pscB>
    193c:	20 f0       	brcs	.+8      	; 0x1946 <__addsf3+0x18>
    193e:	31 f4       	brne	.+12     	; 0x194c <__addsf3+0x1e>
    1940:	9f 3f       	cpi	r25, 0xFF	; 255
    1942:	11 f4       	brne	.+4      	; 0x1948 <__addsf3+0x1a>
    1944:	1e f4       	brtc	.+6      	; 0x194c <__addsf3+0x1e>
    1946:	8e c0       	rjmp	.+284    	; 0x1a64 <__fp_nan>
    1948:	0e f4       	brtc	.+2      	; 0x194c <__addsf3+0x1e>
    194a:	e0 95       	com	r30
    194c:	e7 fb       	bst	r30, 7
    194e:	84 c0       	rjmp	.+264    	; 0x1a58 <__fp_inf>

00001950 <__addsf3x>:
    1950:	e9 2f       	mov	r30, r25
    1952:	aa d0       	rcall	.+340    	; 0x1aa8 <__fp_split3>
    1954:	80 f3       	brcs	.-32     	; 0x1936 <__addsf3+0x8>
    1956:	ba 17       	cp	r27, r26
    1958:	62 07       	cpc	r22, r18
    195a:	73 07       	cpc	r23, r19
    195c:	84 07       	cpc	r24, r20
    195e:	95 07       	cpc	r25, r21
    1960:	18 f0       	brcs	.+6      	; 0x1968 <__addsf3x+0x18>
    1962:	71 f4       	brne	.+28     	; 0x1980 <__addsf3x+0x30>
    1964:	9e f5       	brtc	.+102    	; 0x19cc <__addsf3x+0x7c>
    1966:	c2 c0       	rjmp	.+388    	; 0x1aec <__fp_zero>
    1968:	0e f4       	brtc	.+2      	; 0x196c <__addsf3x+0x1c>
    196a:	e0 95       	com	r30
    196c:	0b 2e       	mov	r0, r27
    196e:	ba 2f       	mov	r27, r26
    1970:	a0 2d       	mov	r26, r0
    1972:	0b 01       	movw	r0, r22
    1974:	b9 01       	movw	r22, r18
    1976:	90 01       	movw	r18, r0
    1978:	0c 01       	movw	r0, r24
    197a:	ca 01       	movw	r24, r20
    197c:	a0 01       	movw	r20, r0
    197e:	11 24       	eor	r1, r1
    1980:	ff 27       	eor	r31, r31
    1982:	59 1b       	sub	r21, r25
    1984:	99 f0       	breq	.+38     	; 0x19ac <__addsf3x+0x5c>
    1986:	59 3f       	cpi	r21, 0xF9	; 249
    1988:	50 f4       	brcc	.+20     	; 0x199e <__addsf3x+0x4e>
    198a:	50 3e       	cpi	r21, 0xE0	; 224
    198c:	68 f1       	brcs	.+90     	; 0x19e8 <__addsf3x+0x98>
    198e:	1a 16       	cp	r1, r26
    1990:	f0 40       	sbci	r31, 0x00	; 0
    1992:	a2 2f       	mov	r26, r18
    1994:	23 2f       	mov	r18, r19
    1996:	34 2f       	mov	r19, r20
    1998:	44 27       	eor	r20, r20
    199a:	58 5f       	subi	r21, 0xF8	; 248
    199c:	f3 cf       	rjmp	.-26     	; 0x1984 <__addsf3x+0x34>
    199e:	46 95       	lsr	r20
    19a0:	37 95       	ror	r19
    19a2:	27 95       	ror	r18
    19a4:	a7 95       	ror	r26
    19a6:	f0 40       	sbci	r31, 0x00	; 0
    19a8:	53 95       	inc	r21
    19aa:	c9 f7       	brne	.-14     	; 0x199e <__addsf3x+0x4e>
    19ac:	7e f4       	brtc	.+30     	; 0x19cc <__addsf3x+0x7c>
    19ae:	1f 16       	cp	r1, r31
    19b0:	ba 0b       	sbc	r27, r26
    19b2:	62 0b       	sbc	r22, r18
    19b4:	73 0b       	sbc	r23, r19
    19b6:	84 0b       	sbc	r24, r20
    19b8:	ba f0       	brmi	.+46     	; 0x19e8 <__addsf3x+0x98>
    19ba:	91 50       	subi	r25, 0x01	; 1
    19bc:	a1 f0       	breq	.+40     	; 0x19e6 <__addsf3x+0x96>
    19be:	ff 0f       	add	r31, r31
    19c0:	bb 1f       	adc	r27, r27
    19c2:	66 1f       	adc	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	c2 f7       	brpl	.-16     	; 0x19ba <__addsf3x+0x6a>
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <__addsf3x+0x98>
    19cc:	ba 0f       	add	r27, r26
    19ce:	62 1f       	adc	r22, r18
    19d0:	73 1f       	adc	r23, r19
    19d2:	84 1f       	adc	r24, r20
    19d4:	48 f4       	brcc	.+18     	; 0x19e8 <__addsf3x+0x98>
    19d6:	87 95       	ror	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	b7 95       	ror	r27
    19de:	f7 95       	ror	r31
    19e0:	9e 3f       	cpi	r25, 0xFE	; 254
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <__addsf3x+0x96>
    19e4:	b3 cf       	rjmp	.-154    	; 0x194c <__addsf3+0x1e>
    19e6:	93 95       	inc	r25
    19e8:	88 0f       	add	r24, r24
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <__addsf3x+0x9e>
    19ec:	99 27       	eor	r25, r25
    19ee:	ee 0f       	add	r30, r30
    19f0:	97 95       	ror	r25
    19f2:	87 95       	ror	r24
    19f4:	08 95       	ret

000019f6 <__fixsfsi>:
    19f6:	04 d0       	rcall	.+8      	; 0x1a00 <__fixunssfsi>
    19f8:	68 94       	set
    19fa:	b1 11       	cpse	r27, r1
    19fc:	78 c0       	rjmp	.+240    	; 0x1aee <__fp_szero>
    19fe:	08 95       	ret

00001a00 <__fixunssfsi>:
    1a00:	5b d0       	rcall	.+182    	; 0x1ab8 <__fp_splitA>
    1a02:	88 f0       	brcs	.+34     	; 0x1a26 <__fixunssfsi+0x26>
    1a04:	9f 57       	subi	r25, 0x7F	; 127
    1a06:	90 f0       	brcs	.+36     	; 0x1a2c <__fixunssfsi+0x2c>
    1a08:	b9 2f       	mov	r27, r25
    1a0a:	99 27       	eor	r25, r25
    1a0c:	b7 51       	subi	r27, 0x17	; 23
    1a0e:	a0 f0       	brcs	.+40     	; 0x1a38 <__fixunssfsi+0x38>
    1a10:	d1 f0       	breq	.+52     	; 0x1a46 <__fixunssfsi+0x46>
    1a12:	66 0f       	add	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	1a f0       	brmi	.+6      	; 0x1a22 <__fixunssfsi+0x22>
    1a1c:	ba 95       	dec	r27
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__fixunssfsi+0x12>
    1a20:	12 c0       	rjmp	.+36     	; 0x1a46 <__fixunssfsi+0x46>
    1a22:	b1 30       	cpi	r27, 0x01	; 1
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <__fixunssfsi+0x46>
    1a26:	62 d0       	rcall	.+196    	; 0x1aec <__fp_zero>
    1a28:	b1 e0       	ldi	r27, 0x01	; 1
    1a2a:	08 95       	ret
    1a2c:	5f c0       	rjmp	.+190    	; 0x1aec <__fp_zero>
    1a2e:	67 2f       	mov	r22, r23
    1a30:	78 2f       	mov	r23, r24
    1a32:	88 27       	eor	r24, r24
    1a34:	b8 5f       	subi	r27, 0xF8	; 248
    1a36:	39 f0       	breq	.+14     	; 0x1a46 <__fixunssfsi+0x46>
    1a38:	b9 3f       	cpi	r27, 0xF9	; 249
    1a3a:	cc f3       	brlt	.-14     	; 0x1a2e <__fixunssfsi+0x2e>
    1a3c:	86 95       	lsr	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b3 95       	inc	r27
    1a44:	d9 f7       	brne	.-10     	; 0x1a3c <__fixunssfsi+0x3c>
    1a46:	3e f4       	brtc	.+14     	; 0x1a56 <__fixunssfsi+0x56>
    1a48:	90 95       	com	r25
    1a4a:	80 95       	com	r24
    1a4c:	70 95       	com	r23
    1a4e:	61 95       	neg	r22
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__fp_inf>:
    1a58:	97 f9       	bld	r25, 7
    1a5a:	9f 67       	ori	r25, 0x7F	; 127
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	08 95       	ret

00001a64 <__fp_nan>:
    1a64:	9f ef       	ldi	r25, 0xFF	; 255
    1a66:	80 ec       	ldi	r24, 0xC0	; 192
    1a68:	08 95       	ret

00001a6a <__fp_pscA>:
    1a6a:	00 24       	eor	r0, r0
    1a6c:	0a 94       	dec	r0
    1a6e:	16 16       	cp	r1, r22
    1a70:	17 06       	cpc	r1, r23
    1a72:	18 06       	cpc	r1, r24
    1a74:	09 06       	cpc	r0, r25
    1a76:	08 95       	ret

00001a78 <__fp_pscB>:
    1a78:	00 24       	eor	r0, r0
    1a7a:	0a 94       	dec	r0
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	14 06       	cpc	r1, r20
    1a82:	05 06       	cpc	r0, r21
    1a84:	08 95       	ret

00001a86 <__fp_round>:
    1a86:	09 2e       	mov	r0, r25
    1a88:	03 94       	inc	r0
    1a8a:	00 0c       	add	r0, r0
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__fp_round+0xc>
    1a8e:	88 23       	and	r24, r24
    1a90:	52 f0       	brmi	.+20     	; 0x1aa6 <__fp_round+0x20>
    1a92:	bb 0f       	add	r27, r27
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <__fp_round+0x20>
    1a96:	bf 2b       	or	r27, r31
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__fp_round+0x18>
    1a9a:	60 ff       	sbrs	r22, 0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <__fp_round+0x20>
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	08 95       	ret

00001aa8 <__fp_split3>:
    1aa8:	57 fd       	sbrc	r21, 7
    1aaa:	90 58       	subi	r25, 0x80	; 128
    1aac:	44 0f       	add	r20, r20
    1aae:	55 1f       	adc	r21, r21
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <__fp_splitA+0x10>
    1ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <__fp_splitA+0x1a>
    1ab6:	47 95       	ror	r20

00001ab8 <__fp_splitA>:
    1ab8:	88 0f       	add	r24, r24
    1aba:	97 fb       	bst	r25, 7
    1abc:	99 1f       	adc	r25, r25
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <__fp_splitA+0x20>
    1ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ac2:	79 f0       	breq	.+30     	; 0x1ae2 <__fp_splitA+0x2a>
    1ac4:	87 95       	ror	r24
    1ac6:	08 95       	ret
    1ac8:	12 16       	cp	r1, r18
    1aca:	13 06       	cpc	r1, r19
    1acc:	14 06       	cpc	r1, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	f2 cf       	rjmp	.-28     	; 0x1ab6 <__fp_split3+0xe>
    1ad2:	46 95       	lsr	r20
    1ad4:	f1 df       	rcall	.-30     	; 0x1ab8 <__fp_splitA>
    1ad6:	08 c0       	rjmp	.+16     	; 0x1ae8 <__fp_splitA+0x30>
    1ad8:	16 16       	cp	r1, r22
    1ada:	17 06       	cpc	r1, r23
    1adc:	18 06       	cpc	r1, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	f1 cf       	rjmp	.-30     	; 0x1ac4 <__fp_splitA+0xc>
    1ae2:	86 95       	lsr	r24
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	08 94       	sec
    1aea:	08 95       	ret

00001aec <__fp_zero>:
    1aec:	e8 94       	clt

00001aee <__fp_szero>:
    1aee:	bb 27       	eor	r27, r27
    1af0:	66 27       	eor	r22, r22
    1af2:	77 27       	eor	r23, r23
    1af4:	cb 01       	movw	r24, r22
    1af6:	97 f9       	bld	r25, 7
    1af8:	08 95       	ret

00001afa <__mulsf3>:
    1afa:	0b d0       	rcall	.+22     	; 0x1b12 <__mulsf3x>
    1afc:	c4 cf       	rjmp	.-120    	; 0x1a86 <__fp_round>
    1afe:	b5 df       	rcall	.-150    	; 0x1a6a <__fp_pscA>
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <__mulsf3+0x12>
    1b02:	ba df       	rcall	.-140    	; 0x1a78 <__fp_pscB>
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__mulsf3+0x12>
    1b06:	95 23       	and	r25, r21
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <__mulsf3+0x12>
    1b0a:	a6 cf       	rjmp	.-180    	; 0x1a58 <__fp_inf>
    1b0c:	ab cf       	rjmp	.-170    	; 0x1a64 <__fp_nan>
    1b0e:	11 24       	eor	r1, r1
    1b10:	ee cf       	rjmp	.-36     	; 0x1aee <__fp_szero>

00001b12 <__mulsf3x>:
    1b12:	ca df       	rcall	.-108    	; 0x1aa8 <__fp_split3>
    1b14:	a0 f3       	brcs	.-24     	; 0x1afe <__mulsf3+0x4>

00001b16 <__mulsf3_pse>:
    1b16:	95 9f       	mul	r25, r21
    1b18:	d1 f3       	breq	.-12     	; 0x1b0e <__mulsf3+0x14>
    1b1a:	95 0f       	add	r25, r21
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	55 1f       	adc	r21, r21
    1b20:	62 9f       	mul	r22, r18
    1b22:	f0 01       	movw	r30, r0
    1b24:	72 9f       	mul	r23, r18
    1b26:	bb 27       	eor	r27, r27
    1b28:	f0 0d       	add	r31, r0
    1b2a:	b1 1d       	adc	r27, r1
    1b2c:	63 9f       	mul	r22, r19
    1b2e:	aa 27       	eor	r26, r26
    1b30:	f0 0d       	add	r31, r0
    1b32:	b1 1d       	adc	r27, r1
    1b34:	aa 1f       	adc	r26, r26
    1b36:	64 9f       	mul	r22, r20
    1b38:	66 27       	eor	r22, r22
    1b3a:	b0 0d       	add	r27, r0
    1b3c:	a1 1d       	adc	r26, r1
    1b3e:	66 1f       	adc	r22, r22
    1b40:	82 9f       	mul	r24, r18
    1b42:	22 27       	eor	r18, r18
    1b44:	b0 0d       	add	r27, r0
    1b46:	a1 1d       	adc	r26, r1
    1b48:	62 1f       	adc	r22, r18
    1b4a:	73 9f       	mul	r23, r19
    1b4c:	b0 0d       	add	r27, r0
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	62 1f       	adc	r22, r18
    1b52:	83 9f       	mul	r24, r19
    1b54:	a0 0d       	add	r26, r0
    1b56:	61 1d       	adc	r22, r1
    1b58:	22 1f       	adc	r18, r18
    1b5a:	74 9f       	mul	r23, r20
    1b5c:	33 27       	eor	r19, r19
    1b5e:	a0 0d       	add	r26, r0
    1b60:	61 1d       	adc	r22, r1
    1b62:	23 1f       	adc	r18, r19
    1b64:	84 9f       	mul	r24, r20
    1b66:	60 0d       	add	r22, r0
    1b68:	21 1d       	adc	r18, r1
    1b6a:	82 2f       	mov	r24, r18
    1b6c:	76 2f       	mov	r23, r22
    1b6e:	6a 2f       	mov	r22, r26
    1b70:	11 24       	eor	r1, r1
    1b72:	9f 57       	subi	r25, 0x7F	; 127
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	8a f0       	brmi	.+34     	; 0x1b9a <__mulsf3_pse+0x84>
    1b78:	e1 f0       	breq	.+56     	; 0x1bb2 <__mulsf3_pse+0x9c>
    1b7a:	88 23       	and	r24, r24
    1b7c:	4a f0       	brmi	.+18     	; 0x1b90 <__mulsf3_pse+0x7a>
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	bb 1f       	adc	r27, r27
    1b84:	66 1f       	adc	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	91 50       	subi	r25, 0x01	; 1
    1b8c:	50 40       	sbci	r21, 0x00	; 0
    1b8e:	a9 f7       	brne	.-22     	; 0x1b7a <__mulsf3_pse+0x64>
    1b90:	9e 3f       	cpi	r25, 0xFE	; 254
    1b92:	51 05       	cpc	r21, r1
    1b94:	70 f0       	brcs	.+28     	; 0x1bb2 <__mulsf3_pse+0x9c>
    1b96:	60 cf       	rjmp	.-320    	; 0x1a58 <__fp_inf>
    1b98:	aa cf       	rjmp	.-172    	; 0x1aee <__fp_szero>
    1b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9c:	ec f3       	brlt	.-6      	; 0x1b98 <__mulsf3_pse+0x82>
    1b9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ba0:	dc f3       	brlt	.-10     	; 0x1b98 <__mulsf3_pse+0x82>
    1ba2:	86 95       	lsr	r24
    1ba4:	77 95       	ror	r23
    1ba6:	67 95       	ror	r22
    1ba8:	b7 95       	ror	r27
    1baa:	f7 95       	ror	r31
    1bac:	e7 95       	ror	r30
    1bae:	9f 5f       	subi	r25, 0xFF	; 255
    1bb0:	c1 f7       	brne	.-16     	; 0x1ba2 <__mulsf3_pse+0x8c>
    1bb2:	fe 2b       	or	r31, r30
    1bb4:	88 0f       	add	r24, r24
    1bb6:	91 1d       	adc	r25, r1
    1bb8:	96 95       	lsr	r25
    1bba:	87 95       	ror	r24
    1bbc:	97 f9       	bld	r25, 7
    1bbe:	08 95       	ret

00001bc0 <__divmodhi4>:
    1bc0:	97 fb       	bst	r25, 7
    1bc2:	09 2e       	mov	r0, r25
    1bc4:	07 26       	eor	r0, r23
    1bc6:	0a d0       	rcall	.+20     	; 0x1bdc <__divmodhi4_neg1>
    1bc8:	77 fd       	sbrc	r23, 7
    1bca:	04 d0       	rcall	.+8      	; 0x1bd4 <__divmodhi4_neg2>
    1bcc:	0c d0       	rcall	.+24     	; 0x1be6 <__udivmodhi4>
    1bce:	06 d0       	rcall	.+12     	; 0x1bdc <__divmodhi4_neg1>
    1bd0:	00 20       	and	r0, r0
    1bd2:	1a f4       	brpl	.+6      	; 0x1bda <__divmodhi4_exit>

00001bd4 <__divmodhi4_neg2>:
    1bd4:	70 95       	com	r23
    1bd6:	61 95       	neg	r22
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bda <__divmodhi4_exit>:
    1bda:	08 95       	ret

00001bdc <__divmodhi4_neg1>:
    1bdc:	f6 f7       	brtc	.-4      	; 0x1bda <__divmodhi4_exit>
    1bde:	90 95       	com	r25
    1be0:	81 95       	neg	r24
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	08 95       	ret

00001be6 <__udivmodhi4>:
    1be6:	aa 1b       	sub	r26, r26
    1be8:	bb 1b       	sub	r27, r27
    1bea:	51 e1       	ldi	r21, 0x11	; 17
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <__udivmodhi4_ep>

00001bee <__udivmodhi4_loop>:
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	a6 17       	cp	r26, r22
    1bf4:	b7 07       	cpc	r27, r23
    1bf6:	10 f0       	brcs	.+4      	; 0x1bfc <__udivmodhi4_ep>
    1bf8:	a6 1b       	sub	r26, r22
    1bfa:	b7 0b       	sbc	r27, r23

00001bfc <__udivmodhi4_ep>:
    1bfc:	88 1f       	adc	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	5a 95       	dec	r21
    1c02:	a9 f7       	brne	.-22     	; 0x1bee <__udivmodhi4_loop>
    1c04:	80 95       	com	r24
    1c06:	90 95       	com	r25
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	08 95       	ret

00001c0e <itoa>:
    1c0e:	fb 01       	movw	r30, r22
    1c10:	9f 01       	movw	r18, r30
    1c12:	e8 94       	clt
    1c14:	42 30       	cpi	r20, 0x02	; 2
    1c16:	bc f0       	brlt	.+46     	; 0x1c46 <itoa+0x38>
    1c18:	45 32       	cpi	r20, 0x25	; 37
    1c1a:	ac f4       	brge	.+42     	; 0x1c46 <itoa+0x38>
    1c1c:	4a 30       	cpi	r20, 0x0A	; 10
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <itoa+0x1c>
    1c20:	97 fb       	bst	r25, 7
    1c22:	1e f4       	brtc	.+6      	; 0x1c2a <itoa+0x1c>
    1c24:	90 95       	com	r25
    1c26:	81 95       	neg	r24
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	64 2f       	mov	r22, r20
    1c2c:	77 27       	eor	r23, r23
    1c2e:	db df       	rcall	.-74     	; 0x1be6 <__udivmodhi4>
    1c30:	80 5d       	subi	r24, 0xD0	; 208
    1c32:	8a 33       	cpi	r24, 0x3A	; 58
    1c34:	0c f0       	brlt	.+2      	; 0x1c38 <itoa+0x2a>
    1c36:	89 5d       	subi	r24, 0xD9	; 217
    1c38:	81 93       	st	Z+, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	a9 f7       	brne	.-22     	; 0x1c2a <itoa+0x1c>
    1c40:	16 f4       	brtc	.+4      	; 0x1c46 <itoa+0x38>
    1c42:	5d e2       	ldi	r21, 0x2D	; 45
    1c44:	51 93       	st	Z+, r21
    1c46:	10 82       	st	Z, r1
    1c48:	c9 01       	movw	r24, r18
    1c4a:	08 c0       	rjmp	.+16     	; 0x1c5c <strrev>

00001c4c <__eerd_byte_m8>:
    1c4c:	e1 99       	sbic	0x1c, 1	; 28
    1c4e:	fe cf       	rjmp	.-4      	; 0x1c4c <__eerd_byte_m8>
    1c50:	9f bb       	out	0x1f, r25	; 31
    1c52:	8e bb       	out	0x1e, r24	; 30
    1c54:	e0 9a       	sbi	0x1c, 0	; 28
    1c56:	99 27       	eor	r25, r25
    1c58:	8d b3       	in	r24, 0x1d	; 29
    1c5a:	08 95       	ret

00001c5c <strrev>:
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	fc 01       	movw	r30, r24
    1c60:	67 2f       	mov	r22, r23
    1c62:	71 91       	ld	r23, Z+
    1c64:	77 23       	and	r23, r23
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <strrev+0x4>
    1c68:	32 97       	sbiw	r30, 0x02	; 2
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <strrev+0x18>
    1c6c:	7c 91       	ld	r23, X
    1c6e:	6d 93       	st	X+, r22
    1c70:	70 83       	st	Z, r23
    1c72:	62 91       	ld	r22, -Z
    1c74:	ae 17       	cp	r26, r30
    1c76:	bf 07       	cpc	r27, r31
    1c78:	c8 f3       	brcs	.-14     	; 0x1c6c <strrev+0x10>
    1c7a:	08 95       	ret

00001c7c <_exit>:
    1c7c:	f8 94       	cli

00001c7e <__stop_program>:
    1c7e:	ff cf       	rjmp	.-2      	; 0x1c7e <__stop_program>
