
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00001f2e  00001fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c8  00800114  00800114  00002096  2**0
                  ALLOC
  3 .eeprom       000001f5  00810000  00810000  00002096  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_aranges 00000020  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000510  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b5  00000000  00000000  000027bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c4  00000000  00000000  00004223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000052e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d82  00000000  00000000  00005b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	c9 c2       	rjmp	.+1426   	; 0x5a6 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ee e2       	ldi	r30, 0x2E	; 46
      3a:	ff e1       	ldi	r31, 0x1F	; 31
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a4 31       	cpi	r26, 0x14	; 20
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	13 e0       	ldi	r17, 0x03	; 3
      4a:	a4 e1       	ldi	r26, 0x14	; 20
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ac 3d       	cpi	r26, 0xDC	; 220
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	cf d7       	rcall	.+3998   	; 0xff8 <main>
      5a:	67 cf       	rjmp	.-306    	; 0xffffff2a <__eeprom_end+0xff7efd35>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <wait>:
int LWM;
int HWM;

void wait(void) {
	for (int i = -32000; i < 32000; i++);
}
      5e:	08 95       	ret

00000060 <lcd_send_data>:

void lcd_send_data(byte data) {
	LCD_PORT &= ~(1 << LCD_CE_PIN);
      60:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT |= (1 << LCD_DC_PIN);
      62:	c1 9a       	sbi	0x18, 1	; 24
	SPDR = data;
      64:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      66:	77 9b       	sbis	0x0e, 7	; 14
      68:	fe cf       	rjmp	.-4      	; 0x66 <lcd_send_data+0x6>
	LCD_PORT |= (1 << LCD_CE_PIN);
      6a:	c2 9a       	sbi	0x18, 2	; 24
}
      6c:	08 95       	ret

0000006e <lcd_send_cmd>:

void lcd_send_cmd(byte data) {
	LCD_PORT &= ~(1 << LCD_CE_PIN);
      6e:	c2 98       	cbi	0x18, 2	; 24
	LCD_PORT &= ~(1 << LCD_DC_PIN);
      70:	c1 98       	cbi	0x18, 1	; 24
	SPDR = data;
      72:	8f b9       	out	0x0f, r24	; 15
	while ((SPSR & 0x80) != 0x80);
      74:	77 9b       	sbis	0x0e, 7	; 14
      76:	fe cf       	rjmp	.-4      	; 0x74 <lcd_send_cmd+0x6>
	LCD_PORT |= (1 << LCD_CE_PIN);
      78:	c2 9a       	sbi	0x18, 2	; 24
}
      7a:	08 95       	ret

0000007c <lcd_update>:
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
	LWM = 0;
	HWM = LCD_CACHE_SIZE - 1;
}

void lcd_update(void) {
      7c:	0f 93       	push	r16
      7e:	1f 93       	push	r17
      80:	cf 93       	push	r28
      82:	df 93       	push	r29
	int i;
	if (LWM < 0) LWM = 0;
      84:	80 91 da 03 	lds	r24, 0x03DA
      88:	90 91 db 03 	lds	r25, 0x03DB
      8c:	97 ff       	sbrs	r25, 7
      8e:	05 c0       	rjmp	.+10     	; 0x9a <lcd_update+0x1e>
      90:	10 92 db 03 	sts	0x03DB, r1
      94:	10 92 da 03 	sts	0x03DA, r1
      98:	09 c0       	rjmp	.+18     	; 0xac <lcd_update+0x30>
	else if (LWM >= LCD_CACHE_SIZE) LWM = LCD_CACHE_SIZE - 1;
      9a:	88 5f       	subi	r24, 0xF8	; 248
      9c:	91 40       	sbci	r25, 0x01	; 1
      9e:	34 f0       	brlt	.+12     	; 0xac <lcd_update+0x30>
      a0:	87 ef       	ldi	r24, 0xF7	; 247
      a2:	91 e0       	ldi	r25, 0x01	; 1
      a4:	90 93 db 03 	sts	0x03DB, r25
      a8:	80 93 da 03 	sts	0x03DA, r24
	if (HWM < 0) HWM = 0;
      ac:	80 91 d8 03 	lds	r24, 0x03D8
      b0:	90 91 d9 03 	lds	r25, 0x03D9
      b4:	97 ff       	sbrs	r25, 7
      b6:	05 c0       	rjmp	.+10     	; 0xc2 <lcd_update+0x46>
      b8:	10 92 d9 03 	sts	0x03D9, r1
      bc:	10 92 d8 03 	sts	0x03D8, r1
      c0:	09 c0       	rjmp	.+18     	; 0xd4 <lcd_update+0x58>
	else if (HWM >= LCD_CACHE_SIZE) HWM = LCD_CACHE_SIZE - 1;
      c2:	88 5f       	subi	r24, 0xF8	; 248
      c4:	91 40       	sbci	r25, 0x01	; 1
      c6:	34 f0       	brlt	.+12     	; 0xd4 <lcd_update+0x58>
      c8:	87 ef       	ldi	r24, 0xF7	; 247
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	90 93 d9 03 	sts	0x03D9, r25
      d0:	80 93 d8 03 	sts	0x03D8, r24
	lcd_send_cmd(0x45);
	lcd_send_cmd(0x20);

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
      d4:	80 91 da 03 	lds	r24, 0x03DA
      d8:	90 91 db 03 	lds	r25, 0x03DB
      dc:	64 e5       	ldi	r22, 0x54	; 84
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	c6 de       	rcall	.-628    	; 0xfffffe6e <__eeprom_end+0xff7efc79>
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	c4 df       	rcall	.-120    	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x40 | (LWM / LCD_W));
      e6:	80 91 da 03 	lds	r24, 0x03DA
      ea:	90 91 db 03 	lds	r25, 0x03DB
      ee:	64 e5       	ldi	r22, 0x54	; 84
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	bd de       	rcall	.-646    	; 0xfffffe6e <__eeprom_end+0xff7efc79>
      f4:	86 2f       	mov	r24, r22
      f6:	80 64       	ori	r24, 0x40	; 64
      f8:	ba df       	rcall	.-140    	; 0x6e <lcd_send_cmd>
	for (i = LWM; i <= HWM; i++) {
      fa:	c0 91 da 03 	lds	r28, 0x03DA
      fe:	d0 91 db 03 	lds	r29, 0x03DB
     102:	8e 01       	movw	r16, r28
     104:	00 52       	subi	r16, 0x20	; 32
     106:	1e 4f       	sbci	r17, 0xFE	; 254
     108:	05 c0       	rjmp	.+10     	; 0x114 <lcd_update+0x98>
		lcd_send_data(LCD_CACHE[i]);
     10a:	f8 01       	movw	r30, r16
     10c:	81 91       	ld	r24, Z+
     10e:	8f 01       	movw	r16, r30
     110:	a7 df       	rcall	.-178    	; 0x60 <lcd_send_data>

	#else

	lcd_send_cmd(0x80 | (LWM % LCD_W));
	lcd_send_cmd(0x40 | (LWM / LCD_W));
	for (i = LWM; i <= HWM; i++) {
     112:	21 96       	adiw	r28, 0x01	; 1
     114:	80 91 d8 03 	lds	r24, 0x03D8
     118:	90 91 d9 03 	lds	r25, 0x03D9
     11c:	8c 17       	cp	r24, r28
     11e:	9d 07       	cpc	r25, r29
     120:	a4 f7       	brge	.-24     	; 0x10a <lcd_update+0x8e>
		lcd_send_data(LCD_CACHE[i]);
	}

	#endif

	LWM = LCD_CACHE_SIZE - 1;
     122:	87 ef       	ldi	r24, 0xF7	; 247
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	90 93 db 03 	sts	0x03DB, r25
     12a:	80 93 da 03 	sts	0x03DA, r24
	HWM = 0;
     12e:	10 92 d9 03 	sts	0x03D9, r1
     132:	10 92 d8 03 	sts	0x03D8, r1
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	1f 91       	pop	r17
     13c:	0f 91       	pop	r16
     13e:	08 95       	ret

00000140 <lcd_pixel>:
	lcd_send_cmd(0x0C);
	lcd_clear();
	lcd_update();
}

void lcd_pixel(byte x, byte y, Color c) {
     140:	58 2f       	mov	r21, r24
	int index;
	byte offset, data;
	if (x >= LCD_W || y >= LCD_H) return;
     142:	84 35       	cpi	r24, 0x54	; 84
     144:	08 f0       	brcs	.+2      	; 0x148 <lcd_pixel+0x8>
     146:	58 c0       	rjmp	.+176    	; 0x1f8 <lcd_pixel+0xb8>
     148:	60 33       	cpi	r22, 0x30	; 48
     14a:	08 f0       	brcs	.+2      	; 0x14e <lcd_pixel+0xe>
     14c:	55 c0       	rjmp	.+170    	; 0x1f8 <lcd_pixel+0xb8>
	index = ((y / 8) *84) + x;
     14e:	86 2f       	mov	r24, r22
     150:	86 95       	lsr	r24
     152:	86 95       	lsr	r24
     154:	86 95       	lsr	r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	82 9f       	mul	r24, r18
     15e:	d0 01       	movw	r26, r0
     160:	83 9f       	mul	r24, r19
     162:	b0 0d       	add	r27, r0
     164:	92 9f       	mul	r25, r18
     166:	b0 0d       	add	r27, r0
     168:	11 24       	eor	r1, r1
     16a:	a5 0f       	add	r26, r21
     16c:	b1 1d       	adc	r27, r1
	offset = y - ((y / 8) *8);
     16e:	23 e0       	ldi	r18, 0x03	; 3
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a 95       	dec	r18
     176:	e1 f7       	brne	.-8      	; 0x170 <lcd_pixel+0x30>
     178:	68 1b       	sub	r22, r24
	data = LCD_CACHE[index];
     17a:	fd 01       	movw	r30, r26
     17c:	e0 52       	subi	r30, 0x20	; 32
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	20 81       	ld	r18, Z
	if (c == BLACK) {
     182:	41 30       	cpi	r20, 0x01	; 1
     184:	49 f4       	brne	.+18     	; 0x198 <lcd_pixel+0x58>
		data |= (0x01 << offset);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_pixel+0x50>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <lcd_pixel+0x4c>
     194:	28 2b       	or	r18, r24
     196:	16 c0       	rjmp	.+44     	; 0x1c4 <lcd_pixel+0x84>
	} 
	if (c == WHITE) {
     198:	44 23       	and	r20, r20
     19a:	51 f4       	brne	.+20     	; 0x1b0 <lcd_pixel+0x70>
		data &= (~(0x01 << offset));
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <lcd_pixel+0x66>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <lcd_pixel+0x62>
     1aa:	80 95       	com	r24
     1ac:	28 23       	and	r18, r24
     1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <lcd_pixel+0x84>
	}
	if (c == INVERT) {
     1b0:	42 30       	cpi	r20, 0x02	; 2
     1b2:	41 f4       	brne	.+16     	; 0x1c4 <lcd_pixel+0x84>
        data ^= (0x01 << offset);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_pixel+0x7e>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <lcd_pixel+0x7a>
     1c2:	28 27       	eor	r18, r24
    }

	LCD_CACHE[index] = data;
     1c4:	fd 01       	movw	r30, r26
     1c6:	e0 52       	subi	r30, 0x20	; 32
     1c8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ca:	20 83       	st	Z, r18
	if (index < LWM) {
     1cc:	80 91 da 03 	lds	r24, 0x03DA
     1d0:	90 91 db 03 	lds	r25, 0x03DB
     1d4:	a8 17       	cp	r26, r24
     1d6:	b9 07       	cpc	r27, r25
     1d8:	24 f4       	brge	.+8      	; 0x1e2 <lcd_pixel+0xa2>
		LWM = index;
     1da:	b0 93 db 03 	sts	0x03DB, r27
     1de:	a0 93 da 03 	sts	0x03DA, r26
	}

	if (index > HWM) {
     1e2:	80 91 d8 03 	lds	r24, 0x03D8
     1e6:	90 91 d9 03 	lds	r25, 0x03D9
     1ea:	8a 17       	cp	r24, r26
     1ec:	9b 07       	cpc	r25, r27
     1ee:	24 f4       	brge	.+8      	; 0x1f8 <lcd_pixel+0xb8>
		HWM = index;
     1f0:	b0 93 d9 03 	sts	0x03D9, r27
     1f4:	a0 93 d8 03 	sts	0x03D8, r26
     1f8:	08 95       	ret

000001fa <min>:
	}
}

int min(int a, int b) {
     1fa:	ac 01       	movw	r20, r24
     1fc:	9b 01       	movw	r18, r22
     1fe:	46 17       	cp	r20, r22
     200:	57 07       	cpc	r21, r23
     202:	0c f4       	brge	.+2      	; 0x206 <min+0xc>
     204:	9a 01       	movw	r18, r20
	if (a > b) return b;
	return a;
}
     206:	c9 01       	movw	r24, r18
     208:	08 95       	ret

0000020a <max>:

int max(int a, int b) {
     20a:	ac 01       	movw	r20, r24
     20c:	9b 01       	movw	r18, r22
     20e:	64 17       	cp	r22, r20
     210:	75 07       	cpc	r23, r21
     212:	0c f4       	brge	.+2      	; 0x216 <max+0xc>
     214:	9a 01       	movw	r18, r20
	if (a > b) return a;
	return b;
}
     216:	c9 01       	movw	r24, r18
     218:	08 95       	ret

0000021a <lcd_h_line>:

void lcd_h_line(byte x0, byte y0, byte x1, Color c) {
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	d6 2e       	mov	r13, r22
     22a:	f4 2e       	mov	r15, r20
     22c:	e2 2e       	mov	r14, r18
	for (int i = min(x0, x1); i <= max(x0, x1); i++) lcd_pixel(i, y0, c);
     22e:	08 2f       	mov	r16, r24
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	84 2f       	mov	r24, r20
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	9c 01       	movw	r18, r24
     238:	e9 01       	movw	r28, r18
     23a:	02 17       	cp	r16, r18
     23c:	13 07       	cpc	r17, r19
     23e:	3c f4       	brge	.+14     	; 0x24e <lcd_h_line+0x34>
     240:	e8 01       	movw	r28, r16
     242:	05 c0       	rjmp	.+10     	; 0x24e <lcd_h_line+0x34>
     244:	8c 2f       	mov	r24, r28
     246:	6d 2d       	mov	r22, r13
     248:	4e 2d       	mov	r20, r14
     24a:	7a df       	rcall	.-268    	; 0x140 <lcd_pixel>
     24c:	21 96       	adiw	r28, 0x01	; 1
     24e:	8f 2d       	mov	r24, r15
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9c 01       	movw	r18, r24
     254:	20 17       	cp	r18, r16
     256:	31 07       	cpc	r19, r17
     258:	0c f4       	brge	.+2      	; 0x25c <lcd_h_line+0x42>
     25a:	98 01       	movw	r18, r16
     25c:	2c 17       	cp	r18, r28
     25e:	3d 07       	cpc	r19, r29
     260:	8c f7       	brge	.-30     	; 0x244 <lcd_h_line+0x2a>
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	df 90       	pop	r13
     270:	08 95       	ret

00000272 <lcd_v_line>:

void lcd_v_line(byte x0, byte y0, byte y1, Color c) {
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	d8 2e       	mov	r13, r24
     282:	f4 2e       	mov	r15, r20
     284:	e2 2e       	mov	r14, r18
	for (int i = min(y0, y1); i <= max(y0, y1); i++) lcd_pixel(x0, i, c);
     286:	06 2f       	mov	r16, r22
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	24 2f       	mov	r18, r20
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	c9 01       	movw	r24, r18
     290:	ec 01       	movw	r28, r24
     292:	08 17       	cp	r16, r24
     294:	19 07       	cpc	r17, r25
     296:	3c f4       	brge	.+14     	; 0x2a6 <lcd_v_line+0x34>
     298:	e8 01       	movw	r28, r16
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <lcd_v_line+0x34>
     29c:	8d 2d       	mov	r24, r13
     29e:	6c 2f       	mov	r22, r28
     2a0:	4e 2d       	mov	r20, r14
     2a2:	4e df       	rcall	.-356    	; 0x140 <lcd_pixel>
     2a4:	21 96       	adiw	r28, 0x01	; 1
     2a6:	8f 2d       	mov	r24, r15
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	9c 01       	movw	r18, r24
     2ac:	20 17       	cp	r18, r16
     2ae:	31 07       	cpc	r19, r17
     2b0:	0c f4       	brge	.+2      	; 0x2b4 <lcd_v_line+0x42>
     2b2:	98 01       	movw	r18, r16
     2b4:	2c 17       	cp	r18, r28
     2b6:	3d 07       	cpc	r19, r29
     2b8:	8c f7       	brge	.-30     	; 0x29c <lcd_v_line+0x2a>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	08 95       	ret

000002ca <lcd_line>:

void lcd_line(byte x1, byte y1, byte x2, byte y2, Color c) {
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	98 2e       	mov	r9, r24
     2ee:	86 2e       	mov	r8, r22
     2f0:	44 2e       	mov	r4, r20
     2f2:	52 2e       	mov	r5, r18
     2f4:	30 2e       	mov	r3, r16
	if (x1 == x2) {
     2f6:	84 17       	cp	r24, r20
     2f8:	21 f4       	brne	.+8      	; 0x302 <lcd_line+0x38>
		lcd_v_line(x1, y1, y2, c);
     2fa:	42 2f       	mov	r20, r18
     2fc:	20 2f       	mov	r18, r16
     2fe:	b9 df       	rcall	.-142    	; 0x272 <lcd_v_line>
     300:	61 c0       	rjmp	.+194    	; 0x3c4 <lcd_line+0xfa>
		return;
	}

	if (y1 == y2) {
     302:	62 17       	cp	r22, r18
     304:	19 f4       	brne	.+6      	; 0x30c <lcd_line+0x42>
		lcd_h_line(x1, y1, x2, c);
     306:	20 2f       	mov	r18, r16
     308:	88 df       	rcall	.-240    	; 0x21a <lcd_h_line>
     30a:	5c c0       	rjmp	.+184    	; 0x3c4 <lcd_line+0xfa>
		return;
	}
	int dx, dy, stepx, stepy, fraction;
	dy = y2 - y1;
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	26 1b       	sub	r18, r22
     310:	31 09       	sbc	r19, r1
	dx = x2 - x1;
     312:	84 2f       	mov	r24, r20
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	89 19       	sub	r24, r9
     318:	91 09       	sbc	r25, r1
	if (dy < 0) {
     31a:	37 fd       	sbrc	r19, 7
     31c:	04 c0       	rjmp	.+8      	; 0x326 <lcd_line+0x5c>
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	6e 2e       	mov	r6, r30
     322:	71 2c       	mov	r7, r1
     324:	06 c0       	rjmp	.+12     	; 0x332 <lcd_line+0x68>
		dy = -dy;
     326:	30 95       	com	r19
     328:	21 95       	neg	r18
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	66 24       	eor	r6, r6
     32e:	6a 94       	dec	r6
     330:	76 2c       	mov	r7, r6
		stepy = -1;
	} else {
		stepy = 1;
	}
	if (dx < 0) {
     332:	97 fd       	sbrc	r25, 7
     334:	04 c0       	rjmp	.+8      	; 0x33e <lcd_line+0x74>
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	a7 2e       	mov	r10, r23
     33a:	b1 2c       	mov	r11, r1
     33c:	06 c0       	rjmp	.+12     	; 0x34a <lcd_line+0x80>
		dx = -dx;
     33e:	90 95       	com	r25
     340:	81 95       	neg	r24
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	aa 24       	eor	r10, r10
     346:	aa 94       	dec	r10
     348:	ba 2c       	mov	r11, r10
		stepx = -1;
	} else {
		stepx = 1;
	}
	dx <<= 1;
     34a:	6c 01       	movw	r12, r24
     34c:	cc 0c       	add	r12, r12
     34e:	dd 1c       	adc	r13, r13
	dy <<= 1;
     350:	79 01       	movw	r14, r18
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
	if (dx > dy) {
     356:	ec 14       	cp	r14, r12
     358:	fd 04       	cpc	r15, r13
     35a:	d4 f4       	brge	.+52     	; 0x390 <lcd_line+0xc6>
		fraction = dy - (dx >> 1);
     35c:	c6 01       	movw	r24, r12
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	e7 01       	movw	r28, r14
     364:	c8 1b       	sub	r28, r24
     366:	d9 0b       	sbc	r29, r25
     368:	ba 2c       	mov	r11, r10
     36a:	1a 2d       	mov	r17, r10
     36c:	19 0d       	add	r17, r9
		while (x1 != x2) {
			if (fraction >= 0) {
     36e:	d7 fd       	sbrc	r29, 7
     370:	03 c0       	rjmp	.+6      	; 0x378 <lcd_line+0xae>
				y1 += stepy;
     372:	86 0c       	add	r8, r6
				fraction -= dx;
     374:	cc 19       	sub	r28, r12
     376:	dd 09       	sbc	r29, r13
			}
			x1 += stepx;
			fraction += dy;
			lcd_pixel(x1, y1, c);
     378:	81 2f       	mov	r24, r17
     37a:	68 2d       	mov	r22, r8
     37c:	43 2d       	mov	r20, r3
     37e:	e0 de       	rcall	.-576    	; 0x140 <lcd_pixel>
     380:	1b 0d       	add	r17, r11
	}
	dx <<= 1;
	dy <<= 1;
	if (dx > dy) {
		fraction = dy - (dx >> 1);
		while (x1 != x2) {
     382:	81 2f       	mov	r24, r17
     384:	8b 19       	sub	r24, r11
     386:	84 15       	cp	r24, r4
     388:	e9 f0       	breq	.+58     	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				y1 += stepy;
				fraction -= dx;
			}
			x1 += stepx;
			fraction += dy;
     38a:	ce 0d       	add	r28, r14
     38c:	df 1d       	adc	r29, r15
     38e:	ef cf       	rjmp	.-34     	; 0x36e <lcd_line+0xa4>
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
     390:	c7 01       	movw	r24, r14
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	e6 01       	movw	r28, r12
     398:	c8 1b       	sub	r28, r24
     39a:	d9 0b       	sbc	r29, r25
     39c:	06 2d       	mov	r16, r6
     39e:	16 2d       	mov	r17, r6
     3a0:	18 0d       	add	r17, r8
		while (y1 != y2) {
			if (fraction >= 0) {
     3a2:	d7 fd       	sbrc	r29, 7
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_line+0xe2>
				x1 += stepx;
     3a6:	9a 0c       	add	r9, r10
				fraction -= dy;
     3a8:	ce 19       	sub	r28, r14
     3aa:	df 09       	sbc	r29, r15
			}
			y1 += stepy;
			fraction += dx;
			lcd_pixel(x1, y1, c);
     3ac:	89 2d       	mov	r24, r9
     3ae:	61 2f       	mov	r22, r17
     3b0:	43 2d       	mov	r20, r3
     3b2:	c6 de       	rcall	.-628    	; 0x140 <lcd_pixel>
     3b4:	10 0f       	add	r17, r16
			fraction += dy;
			lcd_pixel(x1, y1, c);
		}
	} else {
		fraction = dx - (dy >> 1);
		while (y1 != y2) {
     3b6:	81 2f       	mov	r24, r17
     3b8:	80 1b       	sub	r24, r16
     3ba:	85 15       	cp	r24, r5
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <lcd_line+0xfa>
			if (fraction >= 0) {
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
			fraction += dx;
     3be:	cc 0d       	add	r28, r12
     3c0:	dd 1d       	adc	r29, r13
     3c2:	ef cf       	rjmp	.-34     	; 0x3a2 <lcd_line+0xd8>
			lcd_pixel(x1, y1, c);
		}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	7f 90       	pop	r7
     3de:	6f 90       	pop	r6
     3e0:	5f 90       	pop	r5
     3e2:	4f 90       	pop	r4
     3e4:	3f 90       	pop	r3
     3e6:	08 95       	ret

000003e8 <dt_test>:
#define READ_DATA 0xBE
#define CONV_TIME 100
#define WRITE_SCRATCHPAD 0x4E

char dt_test(void) {
	unsigned char stack = SREG;
     3e8:	9f b7       	in	r25, 0x3f	; 63
	cli();
     3ea:	f8 94       	cli
	char dt;
	DT_DDR |= 1 << DT_SENSOR;
     3ec:	89 9a       	sbi	0x11, 1	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ee:	e8 ee       	ldi	r30, 0xE8	; 232
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <dt_test+0xa>
	_delay_us(500);
	DT_DDR &= ~(1 << DT_SENSOR);
     3f6:	89 98       	cbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3f8:	8a eb       	ldi	r24, 0xBA	; 186
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <dt_test+0x12>
	_delay_us(70);
	if ((DT_PIN & (1 << DT_SENSOR)) == 0) {
     3fe:	80 b3       	in	r24, 0x10	; 16
		dt = 1;
	} else {
		dt = 0;
	}
	SREG = stack;
     400:	9f bf       	out	0x3f, r25	; 63
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     402:	e8 e4       	ldi	r30, 0x48	; 72
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <dt_test+0x1e>
     40a:	86 95       	lsr	r24
     40c:	80 95       	com	r24
	_delay_us(420);
	return dt;
}
     40e:	81 70       	andi	r24, 0x01	; 1
     410:	08 95       	ret

00000412 <dt_rx>:

char dt_rx(void) {
	unsigned char stack = SREG;
     412:	2f b7       	in	r18, 0x3f	; 63
	cli();
     414:	f8 94       	cli
	char bit;
	DT_DDR |= 1 << DT_SENSOR;
     416:	89 9a       	sbi	0x11, 1	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	8a 95       	dec	r24
     41c:	f1 f7       	brne	.-4      	; 0x41a <dt_rx+0x8>
	_delay_us(2);
	DT_DDR &= ~(1 << DT_SENSOR);
     41e:	89 98       	cbi	0x11, 1	; 17
     420:	85 e2       	ldi	r24, 0x25	; 37
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <dt_rx+0x10>
	_delay_us(14);
	bit = (DT_PIN & (1 << DT_SENSOR)) >> DT_SENSOR;
     426:	80 b3       	in	r24, 0x10	; 16
     428:	98 e7       	ldi	r25, 0x78	; 120
     42a:	9a 95       	dec	r25
     42c:	f1 f7       	brne	.-4      	; 0x42a <dt_rx+0x18>
	_delay_us(45);
	SREG = stack;
     42e:	2f bf       	out	0x3f, r18	; 63
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	82 70       	andi	r24, 0x02	; 2
     434:	90 70       	andi	r25, 0x00	; 0
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
	return bit;
}
     43a:	08 95       	ret

0000043c <dt_rx8>:

unsigned char dt_rx8(void) {
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	d0 e0       	ldi	r29, 0x00	; 0
	char c = 0;
	for (char i = 0; i < 8; i++) c |= dt_rx() << i;
     448:	e4 df       	rcall	.-56     	; 0x412 <dt_rx>
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0c 2e       	mov	r0, r28
     44e:	02 c0       	rjmp	.+4      	; 0x454 <dt_rx8+0x18>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <dt_rx8+0x14>
     458:	18 2b       	or	r17, r24
     45a:	21 96       	adiw	r28, 0x01	; 1
     45c:	c8 30       	cpi	r28, 0x08	; 8
     45e:	d1 05       	cpc	r29, r1
     460:	99 f7       	brne	.-26     	; 0x448 <dt_rx8+0xc>
	return c;
}
     462:	81 2f       	mov	r24, r17
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	08 95       	ret

0000046c <dt_tx>:

void dt_tx(char b) {
	char stack = SREG;
     46c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     46e:	f8 94       	cli
	DT_DDR |= 1 << DT_SENSOR;
     470:	89 9a       	sbi	0x11, 1	; 17
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	9a 95       	dec	r25
     476:	f1 f7       	brne	.-4      	; 0x474 <dt_tx+0x8>
	_delay_us(2);
	if (b) DT_DDR &= ~(1 << DT_SENSOR);
     478:	81 11       	cpse	r24, r1
     47a:	89 98       	cbi	0x11, 1	; 17
     47c:	8d ea       	ldi	r24, 0xAD	; 173
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <dt_tx+0x12>
	_delay_us(65);
	DT_DDR &= ~(1 << DT_SENSOR);
     482:	89 98       	cbi	0x11, 1	; 17
	SREG = stack;
     484:	2f bf       	out	0x3f, r18	; 63
}
     486:	08 95       	ret

00000488 <dt_tx8>:

void dt_tx8(unsigned char b) {
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	d0 e0       	ldi	r29, 0x00	; 0
	for (char i = 0; i < 8; i++) {
		if ((b &(1 << i)) == (1 << i)) {
     498:	a1 e0       	ldi	r26, 0x01	; 1
     49a:	ea 2e       	mov	r14, r26
     49c:	f1 2c       	mov	r15, r1
     49e:	08 2f       	mov	r16, r24
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	97 01       	movw	r18, r14
     4a4:	0c 2e       	mov	r0, r28
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <dt_tx8+0x24>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <dt_tx8+0x20>
     4b0:	c9 01       	movw	r24, r18
     4b2:	80 23       	and	r24, r16
     4b4:	91 23       	and	r25, r17
     4b6:	82 17       	cp	r24, r18
     4b8:	93 07       	cpc	r25, r19
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <dt_tx8+0x38>
			dt_tx(1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <dt_tx8+0x3a>
		} else {
			dt_tx(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	d4 df       	rcall	.-88     	; 0x46c <dt_tx>
     4c4:	21 96       	adiw	r28, 0x01	; 1
	DT_DDR &= ~(1 << DT_SENSOR);
	SREG = stack;
}

void dt_tx8(unsigned char b) {
	for (char i = 0; i < 8; i++) {
     4c6:	c8 30       	cpi	r28, 0x08	; 8
     4c8:	d1 05       	cpc	r29, r1
     4ca:	59 f7       	brne	.-42     	; 0x4a2 <dt_tx8+0x1a>
			dt_tx(1);
		} else {
			dt_tx(0);
		}
	}
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <dt_init>:

void dt_init(void) {
	dt_tx8(WRITE_SCRATCHPAD);
     4da:	8e e4       	ldi	r24, 0x4E	; 78
     4dc:	d5 df       	rcall	.-86     	; 0x488 <dt_tx8>
	dt_tx8(0xFF);
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	d3 df       	rcall	.-90     	; 0x488 <dt_tx8>
	dt_tx8(0xFF);
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	d1 df       	rcall	.-94     	; 0x488 <dt_tx8>
	dt_tx8(0x00);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	cf df       	rcall	.-98     	; 0x488 <dt_tx8>
}
     4ea:	08 95       	ret

000004ec <dt_convert>:

void dt_convert(void) {
	if (!dt_test()) return;
     4ec:	7d df       	rcall	.-262    	; 0x3e8 <dt_test>
     4ee:	88 23       	and	r24, r24
     4f0:	21 f0       	breq	.+8      	; 0x4fa <dt_convert+0xe>
	dt_tx8(NOID);
     4f2:	8c ec       	ldi	r24, 0xCC	; 204
     4f4:	c9 df       	rcall	.-110    	; 0x488 <dt_tx8>
	dt_tx8(T_CONVERT);
     4f6:	84 e4       	ldi	r24, 0x44	; 68
     4f8:	c7 df       	rcall	.-114    	; 0x488 <dt_tx8>
     4fa:	08 95       	ret

000004fc <dt_read>:
	// then conversion delay
}

int dt_read(void) {
     4fc:	1f 93       	push	r17
	unsigned char l;
	unsigned int h = 0;
	if (!dt_test()) return 0;
     4fe:	74 df       	rcall	.-280    	; 0x3e8 <dt_test>
     500:	88 23       	and	r24, r24
     502:	19 f4       	brne	.+6      	; 0x50a <dt_read+0xe>
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0d c0       	rjmp	.+26     	; 0x524 <dt_read+0x28>
	dt_tx8(NOID);
     50a:	8c ec       	ldi	r24, 0xCC	; 204
     50c:	bd df       	rcall	.-134    	; 0x488 <dt_tx8>
	dt_tx8(READ_DATA);
     50e:	8e eb       	ldi	r24, 0xBE	; 190
     510:	bb df       	rcall	.-138    	; 0x488 <dt_tx8>
	l = dt_rx8();
     512:	94 df       	rcall	.-216    	; 0x43c <dt_rx8>
     514:	18 2f       	mov	r17, r24
	h = dt_rx8();
     516:	92 df       	rcall	.-220    	; 0x43c <dt_rx8>
	h = (h << 8) | l;
     518:	38 2f       	mov	r19, r24
     51a:	20 e0       	ldi	r18, 0x00	; 0
	return h;
     51c:	41 2f       	mov	r20, r17
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	42 2b       	or	r20, r18
     522:	53 2b       	or	r21, r19
}
     524:	ca 01       	movw	r24, r20
     526:	1f 91       	pop	r17
     528:	08 95       	ret

0000052a <t_integer_part>:

unsigned char t_integer_part(int t) {
     52a:	29 2f       	mov	r18, r25
     52c:	33 27       	eor	r19, r19
     52e:	27 fd       	sbrc	r18, 7
     530:	3a 95       	dec	r19
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	27 70       	andi	r18, 0x07	; 7
     536:	30 70       	andi	r19, 0x00	; 0
     538:	b4 e0       	ldi	r27, 0x04	; 4
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	ba 95       	dec	r27
     540:	e1 f7       	brne	.-8      	; 0x53a <t_integer_part+0x10>
     542:	82 95       	swap	r24
     544:	8f 70       	andi	r24, 0x0F	; 15
	unsigned char l = t & 0xFFFF;
	unsigned char h = (t >> 8) & 0xFFFF;
	
	return (l >> 4) | ((h & 0b111) << 4);
}
     546:	82 2b       	or	r24, r18
     548:	08 95       	ret

0000054a <t_sign>:

char t_sign(int t) {
	return (t >> 15) & 1;
}
     54a:	89 2f       	mov	r24, r25
     54c:	88 1f       	adc	r24, r24
     54e:	88 27       	eor	r24, r24
     550:	88 1f       	adc	r24, r24
     552:	08 95       	ret

00000554 <io_init>:

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, Y = 5, X = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
     554:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
     556:	80 ef       	ldi	r24, 0xF0	; 240
     558:	81 bb       	out	0x11, r24	; 17
}
     55a:	08 95       	ret

0000055c <io_write>:

void io_write(Port o, char value) {
     55c:	38 2f       	mov	r19, r24
	if (value) {
     55e:	66 23       	and	r22, r22
     560:	59 f0       	breq	.+22     	; 0x578 <io_write+0x1c>
		IO_PORT |= (1 << o);
     562:	22 b3       	in	r18, 0x12	; 18
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <io_write+0x12>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	3a 95       	dec	r19
     570:	e2 f7       	brpl	.-8      	; 0x56a <io_write+0xe>
     572:	28 2b       	or	r18, r24
     574:	22 bb       	out	0x12, r18	; 18
     576:	08 95       	ret
	} else {
		IO_PORT &= ~(1 << o);
     578:	22 b3       	in	r18, 0x12	; 18
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <io_write+0x28>
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	3a 95       	dec	r19
     586:	e2 f7       	brpl	.-8      	; 0x580 <io_write+0x24>
     588:	80 95       	com	r24
     58a:	82 23       	and	r24, r18
     58c:	82 bb       	out	0x12, r24	; 18
     58e:	08 95       	ret

00000590 <io_read>:
	}
}

int io_read(Button b) { 
	return (IO_PIN >> b) & 1; 
     590:	23 b3       	in	r18, 0x13	; 19
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <io_read+0xa>
     596:	35 95       	asr	r19
     598:	27 95       	ror	r18
     59a:	8a 95       	dec	r24
     59c:	e2 f7       	brpl	.-8      	; 0x596 <io_read+0x6>
     59e:	21 70       	andi	r18, 0x01	; 1
     5a0:	30 70       	andi	r19, 0x00	; 0
}
     5a2:	c9 01       	movw	r24, r18
     5a4:	08 95       	ret

000005a6 <__vector_9>:
#define TICKS (CLK / PRESCALER)

#define INTS_P_SEC (TICKS / 256)
#define RATE (1000 / INTS_P_SEC)

ISR(TIMER0_OVF_vect) {
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	1f 93       	push	r17
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
    __clock__ += RATE;
     5ca:	80 91 14 01 	lds	r24, 0x0114
     5ce:	20 91 15 01 	lds	r18, 0x0115
     5d2:	30 91 16 01 	lds	r19, 0x0116
     5d6:	40 91 17 01 	lds	r20, 0x0117
     5da:	60 91 18 01 	lds	r22, 0x0118
     5de:	e0 91 19 01 	lds	r30, 0x0119
     5e2:	a0 91 1a 01 	lds	r26, 0x011A
     5e6:	10 91 1b 01 	lds	r17, 0x011B
     5ea:	b8 2f       	mov	r27, r24
     5ec:	b8 5f       	subi	r27, 0xF8	; 248
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	b8 17       	cp	r27, r24
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__vector_9+0x50>
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	f9 2f       	mov	r31, r25
     5f8:	f2 0f       	add	r31, r18
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	f2 17       	cp	r31, r18
     5fe:	08 f0       	brcs	.+2      	; 0x602 <__vector_9+0x5c>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	78 2f       	mov	r23, r24
     604:	73 0f       	add	r23, r19
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	73 17       	cp	r23, r19
     60a:	08 f0       	brcs	.+2      	; 0x60e <__vector_9+0x68>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	58 2f       	mov	r21, r24
     610:	54 0f       	add	r21, r20
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	54 17       	cp	r21, r20
     616:	08 f0       	brcs	.+2      	; 0x61a <__vector_9+0x74>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	38 2f       	mov	r19, r24
     61c:	36 0f       	add	r19, r22
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	36 17       	cp	r19, r22
     622:	08 f0       	brcs	.+2      	; 0x626 <__vector_9+0x80>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	28 2f       	mov	r18, r24
     628:	2e 0f       	add	r18, r30
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	2e 17       	cp	r18, r30
     62e:	08 f0       	brcs	.+2      	; 0x632 <__vector_9+0x8c>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	98 2f       	mov	r25, r24
     634:	9a 0f       	add	r25, r26
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	9a 17       	cp	r25, r26
     63a:	08 f0       	brcs	.+2      	; 0x63e <__vector_9+0x98>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	81 0f       	add	r24, r17
     640:	b0 93 14 01 	sts	0x0114, r27
     644:	f0 93 15 01 	sts	0x0115, r31
     648:	70 93 16 01 	sts	0x0116, r23
     64c:	50 93 17 01 	sts	0x0117, r21
     650:	30 93 18 01 	sts	0x0118, r19
     654:	20 93 19 01 	sts	0x0119, r18
     658:	90 93 1a 01 	sts	0x011A, r25
     65c:	80 93 1b 01 	sts	0x011B, r24
}
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	7f 91       	pop	r23
     66e:	6f 91       	pop	r22
     670:	5f 91       	pop	r21
     672:	4f 91       	pop	r20
     674:	3f 91       	pop	r19
     676:	2f 91       	pop	r18
     678:	1f 91       	pop	r17
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <clock_init>:

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
     688:	89 b7       	in	r24, 0x39	; 57
     68a:	81 60       	ori	r24, 0x01	; 1
     68c:	89 bf       	out	0x39, r24	; 57
	sei();
     68e:	78 94       	sei
}
     690:	08 95       	ret

00000692 <clock>:

timestamp clock(void) {
     692:	20 91 14 01 	lds	r18, 0x0114
     696:	30 91 15 01 	lds	r19, 0x0115
     69a:	40 91 16 01 	lds	r20, 0x0116
     69e:	50 91 17 01 	lds	r21, 0x0117
     6a2:	60 91 18 01 	lds	r22, 0x0118
     6a6:	70 91 19 01 	lds	r23, 0x0119
	return __clock__;
}
     6aa:	80 91 1a 01 	lds	r24, 0x011A
     6ae:	90 91 1b 01 	lds	r25, 0x011B
     6b2:	08 95       	ret

000006b4 <change_upd_speed>:
timestamp debounce_c = 0;
timestamp debounce_d = 0;

UpdateSpeed usp = X1;
void change_upd_speed(void) {
	if (usp == X3) {
     6b4:	80 91 3c 01 	lds	r24, 0x013C
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <change_upd_speed+0xc>
		usp = M;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <change_upd_speed+0x24>
		return;
	}
	if (usp == M) {
     6c0:	83 30       	cpi	r24, 0x03	; 3
     6c2:	11 f4       	brne	.+4      	; 0x6c8 <change_upd_speed+0x14>
		usp = H;
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <change_upd_speed+0x24>
		return;
	}
	if (usp == H) {
     6c8:	84 30       	cpi	r24, 0x04	; 4
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <change_upd_speed+0x1e>
		usp = X1;
     6cc:	10 92 3c 01 	sts	0x013C, r1
     6d0:	08 95       	ret
		return;
	}
	if (usp == X2) {
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	21 f4       	brne	.+8      	; 0x6de <change_upd_speed+0x2a>
		usp = X3;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	80 93 3c 01 	sts	0x013C, r24
     6dc:	08 95       	ret
		return;
	}
	if (usp == X1) {
     6de:	88 23       	and	r24, r24
     6e0:	19 f4       	brne	.+6      	; 0x6e8 <change_upd_speed+0x34>
		usp = X2;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 3c 01 	sts	0x013C, r24
     6e8:	08 95       	ret

000006ea <change_line_type>:
	}
}

LineType ltp = MAX40;
void change_line_type(void) {
	if (ltp == MAX40) {
     6ea:	80 91 c7 00 	lds	r24, 0x00C7
     6ee:	88 32       	cpi	r24, 0x28	; 40
     6f0:	11 f4       	brne	.+4      	; 0x6f6 <change_line_type+0xc>
		ltp = MAX80;
     6f2:	80 e5       	ldi	r24, 0x50	; 80
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <change_line_type+0x12>
		return;
	}
	if (ltp == MAX80) {
     6f6:	80 35       	cpi	r24, 0x50	; 80
     6f8:	21 f4       	brne	.+8      	; 0x702 <change_line_type+0x18>
		ltp = MAX20;
     6fa:	84 e1       	ldi	r24, 0x14	; 20
     6fc:	80 93 c7 00 	sts	0x00C7, r24
     700:	08 95       	ret
		return;
	}
	if (ltp == MAX20) {
     702:	84 31       	cpi	r24, 0x14	; 20
     704:	19 f4       	brne	.+6      	; 0x70c <change_line_type+0x22>
		ltp = MAX40;
     706:	88 e2       	ldi	r24, 0x28	; 40
     708:	80 93 c7 00 	sts	0x00C7, r24
     70c:	08 95       	ret

0000070e <change_view_mode>:
int shown_value = 0;
timestamp last_upd = 0;

ViewMode vm = MAIN;
void change_view_mode(void) {
	if (vm == MAIN) {
     70e:	80 91 53 01 	lds	r24, 0x0153
     712:	88 23       	and	r24, r24
     714:	11 f4       	brne	.+4      	; 0x71a <change_view_mode+0xc>
		vm = HOOKS;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	03 c0       	rjmp	.+6      	; 0x720 <change_view_mode+0x12>
		return;
	}
	if (vm == HOOKS) {
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	21 f4       	brne	.+8      	; 0x726 <change_view_mode+0x18>
		vm = CREDITS;
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	80 93 53 01 	sts	0x0153, r24
     724:	08 95       	ret
		return;
	}
	if (vm == CREDITS) {
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	11 f4       	brne	.+4      	; 0x72e <change_view_mode+0x20>
		vm = MAIN;
     72a:	10 92 53 01 	sts	0x0153, r1
     72e:	08 95       	ret

00000730 <hooks_init>:

char port_status[PORT_SIZE] = {0, 0, 0, 0};

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].port = Z;
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	80 93 d0 01 	sts	0x01D0, r24
     736:	80 93 d5 01 	sts	0x01D5, r24
     73a:	80 93 da 01 	sts	0x01DA, r24
     73e:	80 93 df 01 	sts	0x01DF, r24
	}
}
     742:	08 95       	ret

00000744 <clear_port>:

void clear_port(void) {
	for (int i = 0; i < PORT_SIZE; i++) port_status[i] = 0;
     744:	10 92 56 01 	sts	0x0156, r1
     748:	10 92 57 01 	sts	0x0157, r1
     74c:	10 92 58 01 	sts	0x0158, r1
     750:	10 92 59 01 	sts	0x0159, r1
}
     754:	08 95       	ret

00000756 <apply_port>:

void apply_port(void) {
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < PORT_SIZE; i++) io_write(i + 4, port_status[i]);
     75e:	fe 01       	movw	r30, r28
     760:	ea 5a       	subi	r30, 0xAA	; 170
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	9e 01       	movw	r18, r28
     766:	2c 5f       	subi	r18, 0xFC	; 252
     768:	82 2f       	mov	r24, r18
     76a:	60 81       	ld	r22, Z
     76c:	f7 de       	rcall	.-530    	; 0x55c <io_write>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	c4 30       	cpi	r28, 0x04	; 4
     772:	d1 05       	cpc	r29, r1
     774:	a1 f7       	brne	.-24     	; 0x75e <apply_port+0x8>
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <do_action>:

void print_hook(int);

void do_action(Port prt, Action ac) {
	if (ac == set) port_status[prt - 4] = 1;
     77c:	61 30       	cpi	r22, 0x01	; 1
     77e:	31 f4       	brne	.+12     	; 0x78c <do_action+0x10>
     780:	e8 2f       	mov	r30, r24
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ee 5a       	subi	r30, 0xAE	; 174
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	60 83       	st	Z, r22
     78a:	08 95       	ret
	if (ac == res) port_status[prt - 4] = 0;
     78c:	62 30       	cpi	r22, 0x02	; 2
     78e:	29 f4       	brne	.+10     	; 0x79a <do_action+0x1e>
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	ee 5a       	subi	r30, 0xAE	; 174
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	10 82       	st	Z, r1
     79a:	08 95       	ret

0000079c <handle_hooks>:
}

void handle_hooks(int t_value) {
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	9c 01       	movw	r18, r24
	int value = 0;
	if (t_sign(t_value)){
     7a6:	37 ff       	sbrs	r19, 7
     7a8:	17 c0       	rjmp	.+46     	; 0x7d8 <handle_hooks+0x3c>
		value = -t_integer_part(~t_value);
     7aa:	80 95       	com	r24
     7ac:	90 95       	com	r25
     7ae:	29 2f       	mov	r18, r25
     7b0:	33 27       	eor	r19, r19
     7b2:	27 fd       	sbrc	r18, 7
     7b4:	3a 95       	dec	r19
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	27 70       	andi	r18, 0x07	; 7
     7ba:	30 70       	andi	r19, 0x00	; 0
     7bc:	54 e0       	ldi	r21, 0x04	; 4
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	5a 95       	dec	r21
     7c4:	e1 f7       	brne	.-8      	; 0x7be <handle_hooks+0x22>
     7c6:	82 95       	swap	r24
     7c8:	8f 70       	andi	r24, 0x0F	; 15
     7ca:	82 2b       	or	r24, r18
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	00 27       	eor	r16, r16
     7d0:	11 27       	eor	r17, r17
     7d2:	08 1b       	sub	r16, r24
     7d4:	19 0b       	sbc	r17, r25
     7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <handle_hooks+0x5c>
	} else {
		value = t_integer_part(t_value);
     7d8:	89 2f       	mov	r24, r25
     7da:	99 0f       	add	r25, r25
     7dc:	99 0b       	sbc	r25, r25
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	87 70       	andi	r24, 0x07	; 7
     7e2:	90 70       	andi	r25, 0x00	; 0
     7e4:	34 e0       	ldi	r19, 0x04	; 4
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	3a 95       	dec	r19
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <handle_hooks+0x4a>
     7ee:	22 95       	swap	r18
     7f0:	2f 70       	andi	r18, 0x0F	; 15
     7f2:	28 2b       	or	r18, r24
     7f4:	02 2f       	mov	r16, r18
     7f6:	10 e0       	ldi	r17, 0x00	; 0
		hooks[i].port = Z;
	}
}

void clear_port(void) {
	for (int i = 0; i < PORT_SIZE; i++) port_status[i] = 0;
     7f8:	10 92 56 01 	sts	0x0156, r1
     7fc:	10 92 57 01 	sts	0x0157, r1
     800:	10 92 58 01 	sts	0x0158, r1
     804:	10 92 59 01 	sts	0x0159, r1
     808:	cc ec       	ldi	r28, 0xCC	; 204
     80a:	d1 e0       	ldi	r29, 0x01	; 1
		value = t_integer_part(t_value);
	}

	clear_port();
	for (int i = 0; i < HOOKS_N; i++) {
		hook th = hooks[i];
     80c:	6b 81       	ldd	r22, Y+3	; 0x03
     80e:	8c 81       	ldd	r24, Y+4	; 0x04
     810:	29 81       	ldd	r18, Y+1	; 0x01
     812:	3a 81       	ldd	r19, Y+2	; 0x02
     814:	98 81       	ld	r25, Y
		
		char cond = (th.op == eq && value == th.value) || 
					(th.op == lt && value < th.value) ||
					(th.op == gt && value > th.value) ||
					(th.op == lte && value <= th.value) ||
					(th.op == gte && value >= th.value);
     816:	99 23       	and	r25, r25
     818:	21 f4       	brne	.+8      	; 0x822 <handle_hooks+0x86>
     81a:	02 17       	cp	r16, r18
     81c:	13 07       	cpc	r17, r19
     81e:	f1 f4       	brne	.+60     	; 0x85c <handle_hooks+0xc0>
     820:	1c c0       	rjmp	.+56     	; 0x85a <handle_hooks+0xbe>
     822:	91 30       	cpi	r25, 0x01	; 1
     824:	21 f4       	brne	.+8      	; 0x82e <handle_hooks+0x92>
     826:	02 17       	cp	r16, r18
     828:	13 07       	cpc	r17, r19
     82a:	bc f0       	brlt	.+46     	; 0x85a <handle_hooks+0xbe>
     82c:	17 c0       	rjmp	.+46     	; 0x85c <handle_hooks+0xc0>
     82e:	92 30       	cpi	r25, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <handle_hooks+0x9e>
     832:	20 17       	cp	r18, r16
     834:	31 07       	cpc	r19, r17
     836:	8c f0       	brlt	.+34     	; 0x85a <handle_hooks+0xbe>
     838:	11 c0       	rjmp	.+34     	; 0x85c <handle_hooks+0xc0>
     83a:	93 30       	cpi	r25, 0x03	; 3
     83c:	21 f4       	brne	.+8      	; 0x846 <handle_hooks+0xaa>
     83e:	20 17       	cp	r18, r16
     840:	31 07       	cpc	r19, r17
     842:	5c f4       	brge	.+22     	; 0x85a <handle_hooks+0xbe>
     844:	0b c0       	rjmp	.+22     	; 0x85c <handle_hooks+0xc0>
     846:	94 30       	cpi	r25, 0x04	; 4
     848:	49 f4       	brne	.+18     	; 0x85c <handle_hooks+0xc0>
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	02 17       	cp	r16, r18
     850:	13 07       	cpc	r17, r19
     852:	14 f0       	brlt	.+4      	; 0x858 <handle_hooks+0xbc>
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	50 e0       	ldi	r21, 0x00	; 0
		
		if (cond) {
     858:	41 11       	cpse	r20, r1
			do_action(th.port, th.act);
     85a:	90 df       	rcall	.-224    	; 0x77c <do_action>
     85c:	25 96       	adiw	r28, 0x05	; 5
	} else {
		value = t_integer_part(t_value);
	}

	clear_port();
	for (int i = 0; i < HOOKS_N; i++) {
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	c0 3e       	cpi	r28, 0xE0	; 224
     862:	d8 07       	cpc	r29, r24
     864:	99 f6       	brne	.-90     	; 0x80c <handle_hooks+0x70>
		
		if (cond) {
			do_action(th.port, th.act);
		}
	}
	apply_port();
     866:	77 df       	rcall	.-274    	; 0x756 <apply_port>
} 
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	08 95       	ret

00000872 <draw_hook_ptr>:
	{ 17, 36 },
	{ 41, 60 },
	{ 67, 73 }
};

void draw_hook_ptr(char ptr, unsigned char stage) {
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	for (int i = 2; i < 11; i++) {
		lcd_line(edit_stages[stage][0], ptr * 9 + i, edit_stages[stage][1], ptr * 9 + i, INVERT);
     882:	99 e0       	ldi	r25, 0x09	; 9
     884:	89 9f       	mul	r24, r25
     886:	10 2d       	mov	r17, r0
     888:	11 24       	eor	r1, r1
     88a:	a2 e0       	ldi	r26, 0x02	; 2
     88c:	ea 2e       	mov	r14, r26
     88e:	f1 2c       	mov	r15, r1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	6b 01       	movw	r12, r22
     894:	cc 0c       	add	r12, r12
     896:	dd 1c       	adc	r13, r13
     898:	cc 0c       	add	r12, r12
     89a:	dd 1c       	adc	r13, r13
     89c:	88 ec       	ldi	r24, 0xC8	; 200
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	c8 0e       	add	r12, r24
     8a2:	d9 1e       	adc	r13, r25
     8a4:	eb 01       	movw	r28, r22
     8a6:	cc 0f       	add	r28, r28
     8a8:	dd 1f       	adc	r29, r29
     8aa:	21 96       	adiw	r28, 0x01	; 1
     8ac:	cc 0f       	add	r28, r28
     8ae:	dd 1f       	adc	r29, r29
     8b0:	c8 0f       	add	r28, r24
     8b2:	d9 1f       	adc	r29, r25
     8b4:	21 2f       	mov	r18, r17
     8b6:	2e 0d       	add	r18, r14
     8b8:	f6 01       	movw	r30, r12
     8ba:	80 81       	ld	r24, Z
     8bc:	62 2f       	mov	r22, r18
     8be:	48 81       	ld	r20, Y
     8c0:	02 e0       	ldi	r16, 0x02	; 2
     8c2:	03 dd       	rcall	.-1530   	; 0x2ca <lcd_line>
	{ 41, 60 },
	{ 67, 73 }
};

void draw_hook_ptr(char ptr, unsigned char stage) {
	for (int i = 2; i < 11; i++) {
     8c4:	08 94       	sec
     8c6:	e1 1c       	adc	r14, r1
     8c8:	f1 1c       	adc	r15, r1
     8ca:	fb e0       	ldi	r31, 0x0B	; 11
     8cc:	ef 16       	cp	r14, r31
     8ce:	f1 04       	cpc	r15, r1
     8d0:	89 f7       	brne	.-30     	; 0x8b4 <draw_hook_ptr+0x42>
		lcd_line(edit_stages[stage][0], ptr * 9 + i, edit_stages[stage][1], ptr * 9 + i, INVERT);
	}
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	08 95       	ret

000008e4 <sc_top>:
	if (hooks[index].act != nop) {
		lcd_put_string(68, py, ports[hooks[index].port - 4], BLACK);
	}
}

int sc_top(LineType lt, int value) {
     8e4:	e8 2f       	mov	r30, r24
	int divs = 0;
	if (t_sign(value)) {
     8e6:	77 ff       	sbrs	r23, 7
     8e8:	1d c0       	rjmp	.+58     	; 0x924 <sc_top+0x40>
		divs = -(t_integer_part(~value) * 16 / lt);
     8ea:	ab 01       	movw	r20, r22
     8ec:	40 95       	com	r20
     8ee:	50 95       	com	r21
     8f0:	25 2f       	mov	r18, r21
     8f2:	33 27       	eor	r19, r19
     8f4:	27 fd       	sbrc	r18, 7
     8f6:	3a 95       	dec	r19
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	27 70       	andi	r18, 0x07	; 7
     8fc:	30 70       	andi	r19, 0x00	; 0
     8fe:	54 e0       	ldi	r21, 0x04	; 4
     900:	22 0f       	add	r18, r18
     902:	33 1f       	adc	r19, r19
     904:	5a 95       	dec	r21
     906:	e1 f7       	brne	.-8      	; 0x900 <sc_top+0x1c>
     908:	42 95       	swap	r20
     90a:	4f 70       	andi	r20, 0x0F	; 15
     90c:	84 2f       	mov	r24, r20
     90e:	82 2b       	or	r24, r18
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	24 e0       	ldi	r18, 0x04	; 4
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	2a 95       	dec	r18
     91a:	e1 f7       	brne	.-8      	; 0x914 <sc_top+0x30>
     91c:	90 95       	com	r25
     91e:	81 95       	neg	r24
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	16 c0       	rjmp	.+44     	; 0x950 <sc_top+0x6c>
	} else {
		divs = t_integer_part(value) * 16 / lt;
     924:	27 2f       	mov	r18, r23
     926:	33 27       	eor	r19, r19
     928:	27 fd       	sbrc	r18, 7
     92a:	3a 95       	dec	r19
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	27 70       	andi	r18, 0x07	; 7
     930:	30 70       	andi	r19, 0x00	; 0
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	8a 95       	dec	r24
     93a:	e1 f7       	brne	.-8      	; 0x934 <sc_top+0x50>
     93c:	86 2f       	mov	r24, r22
     93e:	82 95       	swap	r24
     940:	8f 70       	andi	r24, 0x0F	; 15
     942:	82 2b       	or	r24, r18
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	b4 e0       	ldi	r27, 0x04	; 4
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	ba 95       	dec	r27
     94e:	e1 f7       	brne	.-8      	; 0x948 <sc_top+0x64>
     950:	6e 2f       	mov	r22, r30
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8c da       	rcall	.-2792   	; 0xfffffe6e <__eeprom_end+0xff7efc79>
	}
	int scale_top = 38 - (divs + ZERO_H);
     956:	2a e1       	ldi	r18, 0x1A	; 26
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	26 1b       	sub	r18, r22
     95c:	37 0b       	sbc	r19, r23
	ovf_flag = 0;
     95e:	10 92 46 01 	sts	0x0146, r1
	if (scale_top < 2) {
     962:	22 30       	cpi	r18, 0x02	; 2
     964:	31 05       	cpc	r19, r1
     966:	34 f4       	brge	.+12     	; 0x974 <sc_top+0x90>
		scale_top = 2;
		ovf_flag = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 46 01 	sts	0x0146, r24
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	08 c0       	rjmp	.+16     	; 0x984 <sc_top+0xa0>
	}
	if (scale_top > 37) {
     974:	26 32       	cpi	r18, 0x26	; 38
     976:	31 05       	cpc	r19, r1
     978:	2c f0       	brlt	.+10     	; 0x984 <sc_top+0xa0>
		scale_top = 37;
		ovf_flag = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 46 01 	sts	0x0146, r24
     980:	25 e2       	ldi	r18, 0x25	; 37
     982:	30 e0       	ldi	r19, 0x00	; 0
	}
	return scale_top;
}
     984:	c9 01       	movw	r24, r18
     986:	08 95       	ret

00000988 <draw_chart>:

void draw_chart(LineType lt) {
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	e8 2e       	mov	r14, r24
     996:	ca e5       	ldi	r28, 0x5A	; 90
     998:	d1 e0       	ldi	r29, 0x01	; 1
     99a:	02 e0       	ldi	r16, 0x02	; 2
	for (byte i = 0; i < CHART_W - 1; i++) {
		lcd_line(
     99c:	68 81       	ld	r22, Y
     99e:	79 81       	ldd	r23, Y+1	; 0x01
     9a0:	8e 2d       	mov	r24, r14
     9a2:	a0 df       	rcall	.-192    	; 0x8e4 <sc_top>
     9a4:	18 2f       	mov	r17, r24
     9a6:	f0 2e       	mov	r15, r16
     9a8:	f3 94       	inc	r15
     9aa:	6a 81       	ldd	r22, Y+2	; 0x02
     9ac:	7b 81       	ldd	r23, Y+3	; 0x03
     9ae:	8e 2d       	mov	r24, r14
     9b0:	99 df       	rcall	.-206    	; 0x8e4 <sc_top>
     9b2:	28 2f       	mov	r18, r24
     9b4:	80 2f       	mov	r24, r16
     9b6:	61 2f       	mov	r22, r17
     9b8:	4f 2d       	mov	r20, r15
     9ba:	01 e0       	ldi	r16, 0x01	; 1
     9bc:	86 dc       	rcall	.-1780   	; 0x2ca <lcd_line>
     9be:	22 96       	adiw	r28, 0x02	; 2
     9c0:	0f 2d       	mov	r16, r15
	}
	return scale_top;
}

void draw_chart(LineType lt) {
	for (byte i = 0; i < CHART_W - 1; i++) {
     9c2:	0a 33       	cpi	r16, 0x3A	; 58
     9c4:	59 f7       	brne	.-42     	; 0x99c <draw_chart+0x14>
			i + 2, sc_top(lt, values_for_chart[i]), 
			i + 3, sc_top(lt, values_for_chart[i + 1]), 
			BLACK
		);
	}
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <add_new_chart_value>:

void add_new_chart_value(int new_value) {
     9d4:	9c 01       	movw	r18, r24
     9d6:	ea e5       	ldi	r30, 0x5A	; 90
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	93 81       	ldd	r25, Z+3	; 0x03
     9de:	81 93       	st	Z+, r24
     9e0:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	ea 3c       	cpi	r30, 0xCA	; 202
     9e6:	f8 07       	cpc	r31, r24
     9e8:	c1 f7       	brne	.-16     	; 0x9da <add_new_chart_value+0x6>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
     9ea:	31 83       	std	Z+1, r19	; 0x01
     9ec:	20 83       	st	Z, r18
}
     9ee:	08 95       	ret

000009f0 <clear_chart>:

void clear_chart() {
     9f0:	ea e5       	ldi	r30, 0x5A	; 90
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < CHART_W; i++) {
		values_for_chart[i] = 0;
     9f4:	11 92       	st	Z+, r1
     9f6:	11 92       	st	Z+, r1
	}
	values_for_chart[CHART_W - 1] = new_value;
}

void clear_chart() {
	for (int i = 0; i < CHART_W; i++) {
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	ec 3c       	cpi	r30, 0xCC	; 204
     9fc:	f8 07       	cpc	r31, r24
     9fe:	d1 f7       	brne	.-12     	; 0x9f4 <clear_chart+0x4>
		values_for_chart[i] = 0;
	}
}
     a00:	08 95       	ret

00000a02 <draw_bar>:

void draw_bar(LineType lt, int value) {
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
	byte scale_top = sc_top(lt, value);
     a06:	6e df       	rcall	.-292    	; 0x8e4 <sc_top>
     a08:	18 2f       	mov	r17, r24
	lcd_line(78, scale_top, 78, 37, BLACK);
     a0a:	8e e4       	ldi	r24, 0x4E	; 78
     a0c:	61 2f       	mov	r22, r17
     a0e:	4e e4       	ldi	r20, 0x4E	; 78
     a10:	25 e2       	ldi	r18, 0x25	; 37
     a12:	01 e0       	ldi	r16, 0x01	; 1
     a14:	5a dc       	rcall	.-1868   	; 0x2ca <lcd_line>
	lcd_line(79, scale_top, 79, 37, BLACK);
     a16:	8f e4       	ldi	r24, 0x4F	; 79
     a18:	61 2f       	mov	r22, r17
     a1a:	4f e4       	ldi	r20, 0x4F	; 79
     a1c:	25 e2       	ldi	r18, 0x25	; 37
     a1e:	55 dc       	rcall	.-1878   	; 0x2ca <lcd_line>
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <lcd_draw>:
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
     a26:	2f 92       	push	r2
     a28:	3f 92       	push	r3
     a2a:	4f 92       	push	r4
     a2c:	5f 92       	push	r5
     a2e:	6f 92       	push	r6
     a30:	7f 92       	push	r7
     a32:	8f 92       	push	r8
     a34:	9f 92       	push	r9
     a36:	af 92       	push	r10
     a38:	bf 92       	push	r11
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	3c 01       	movw	r6, r24
     a4c:	26 2e       	mov	r2, r22
     a4e:	34 2e       	mov	r3, r20
     a50:	52 2e       	mov	r5, r18
     a52:	4e 2c       	mov	r4, r14
     a54:	ee 24       	eor	r14, r14
     a56:	ff 24       	eor	r15, r15
     a58:	dd 24       	eor	r13, r13
	for (int j = 0; j < h; j++) {
     a5a:	80 2e       	mov	r8, r16
     a5c:	99 24       	eor	r9, r9
		for (int i = 0; i < w; i++) {
     a5e:	a2 2e       	mov	r10, r18
     a60:	bb 24       	eor	r11, r11
     a62:	21 c0       	rjmp	.+66     	; 0xaa6 <lcd_draw+0x80>
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     a64:	1c 2f       	mov	r17, r28
     a66:	1d 0d       	add	r17, r13
		for (int i = 0; i < w; i++) {
			char addr = j * w + i; 
			if (eeprom_read_byte(&texture[addr / 8]) >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     a68:	81 2f       	mov	r24, r17
     a6a:	86 95       	lsr	r24
     a6c:	86 95       	lsr	r24
     a6e:	86 95       	lsr	r24
     a70:	93 01       	movw	r18, r6
     a72:	28 0f       	add	r18, r24
     a74:	31 1d       	adc	r19, r1
     a76:	c9 01       	movw	r24, r18
     a78:	40 da       	rcall	.-2944   	; 0xfffffefa <__eeprom_end+0xff7efd05>
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	17 70       	andi	r17, 0x07	; 7
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <lcd_draw+0x5e>
     a80:	95 95       	asr	r25
     a82:	87 95       	ror	r24
     a84:	1a 95       	dec	r17
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <lcd_draw+0x5a>
     a88:	80 ff       	sbrs	r24, 0
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <lcd_draw+0x70>
     a8c:	8c 2f       	mov	r24, r28
     a8e:	82 0d       	add	r24, r2
     a90:	6c 2d       	mov	r22, r12
     a92:	44 2d       	mov	r20, r4
     a94:	55 db       	rcall	.-2390   	; 0x140 <lcd_pixel>
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
		for (int i = 0; i < w; i++) {
     a96:	21 96       	adiw	r28, 0x01	; 1
     a98:	ca 15       	cp	r28, r10
     a9a:	db 05       	cpc	r29, r11
     a9c:	1c f3       	brlt	.-58     	; 0xa64 <lcd_draw+0x3e>
	}
	return chars_printed;
}

void lcd_draw(const byte *texture, byte x, byte y, byte w, byte h, Color c) {
	for (int j = 0; j < h; j++) {
     a9e:	08 94       	sec
     aa0:	e1 1c       	adc	r14, r1
     aa2:	f1 1c       	adc	r15, r1
     aa4:	d5 0c       	add	r13, r5
     aa6:	e8 14       	cp	r14, r8
     aa8:	f9 04       	cpc	r15, r9
     aaa:	2c f4       	brge	.+10     	; 0xab6 <lcd_draw+0x90>
		for (int i = 0; i < w; i++) {
     aac:	c0 e0       	ldi	r28, 0x00	; 0
     aae:	d0 e0       	ldi	r29, 0x00	; 0
			char addr = j * w + i; 
			if (eeprom_read_byte(&texture[addr / 8]) >> (addr % 8) & 1) lcd_pixel(x + i, y + j, c);
     ab0:	c3 2c       	mov	r12, r3
     ab2:	ce 0c       	add	r12, r14
     ab4:	f1 cf       	rjmp	.-30     	; 0xa98 <lcd_draw+0x72>
		}
	}
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	3f 90       	pop	r3
     ad8:	2f 90       	pop	r2
     ada:	08 95       	ret

00000adc <draw_interface>:
			lcd_draw(small_two, 66, 16, 3, 5, BLACK);
			lcd_draw(small_two, 66, 32, 3, 5, BLACK);
	}
}

void draw_interface() {
     adc:	ef 92       	push	r14
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	lcd_line(1, 1, 59, 1, BLACK);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	4b e3       	ldi	r20, 0x3B	; 59
     aec:	21 e0       	ldi	r18, 0x01	; 1
     aee:	01 e0       	ldi	r16, 0x01	; 1
     af0:	ec db       	rcall	.-2088   	; 0x2ca <lcd_line>
	lcd_line(1, 38, 59, 38, BLACK);
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	66 e2       	ldi	r22, 0x26	; 38
     af6:	4b e3       	ldi	r20, 0x3B	; 59
     af8:	26 e2       	ldi	r18, 0x26	; 38
     afa:	e7 db       	rcall	.-2098   	; 0x2ca <lcd_line>
	lcd_line(1, 1, 1, 38, BLACK);
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	26 e2       	ldi	r18, 0x26	; 38
     b04:	e2 db       	rcall	.-2108   	; 0x2ca <lcd_line>
	lcd_line(59, 1, 59, 38, BLACK);
     b06:	8b e3       	ldi	r24, 0x3B	; 59
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	4b e3       	ldi	r20, 0x3B	; 59
     b0c:	26 e2       	ldi	r18, 0x26	; 38
     b0e:	dd db       	rcall	.-2118   	; 0x2ca <lcd_line>
     b10:	c1 e0       	ldi	r28, 0x01	; 1
     b12:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 1; i <= 59; i++) {
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
     b14:	c0 ff       	sbrs	r28, 0
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <draw_interface+0x44>
     b18:	8c 2f       	mov	r24, r28
     b1a:	6a e1       	ldi	r22, 0x1A	; 26
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	10 db       	rcall	.-2528   	; 0x140 <lcd_pixel>
void draw_interface() {
	lcd_line(1, 1, 59, 1, BLACK);
	lcd_line(1, 38, 59, 38, BLACK);
	lcd_line(1, 1, 1, 38, BLACK);
	lcd_line(59, 1, 59, 38, BLACK);
	for (int i = 1; i <= 59; i++) {
     b20:	21 96       	adiw	r28, 0x01	; 1
     b22:	cc 33       	cpi	r28, 0x3C	; 60
     b24:	d1 05       	cpc	r29, r1
     b26:	b1 f7       	brne	.-20     	; 0xb14 <draw_interface+0x38>
		if (i % 2 == 1) lcd_pixel(i, 26, BLACK);
	}
	lcd_line(77, 2, 77, 38, BLACK);
     b28:	8d e4       	ldi	r24, 0x4D	; 77
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	4d e4       	ldi	r20, 0x4D	; 77
     b2e:	26 e2       	ldi	r18, 0x26	; 38
     b30:	01 e0       	ldi	r16, 0x01	; 1
     b32:	cb db       	rcall	.-2154   	; 0x2ca <lcd_line>
	lcd_line(80, 2, 80, 38, BLACK);
     b34:	80 e5       	ldi	r24, 0x50	; 80
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	40 e5       	ldi	r20, 0x50	; 80
     b3a:	26 e2       	ldi	r18, 0x26	; 38
     b3c:	c6 db       	rcall	.-2164   	; 0x2ca <lcd_line>
	lcd_line(78, 1, 79, 1, BLACK);
     b3e:	8e e4       	ldi	r24, 0x4E	; 78
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	4f e4       	ldi	r20, 0x4F	; 79
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	c1 db       	rcall	.-2174   	; 0x2ca <lcd_line>
	lcd_line(78, 38, 79, 38, BLACK);
     b48:	8e e4       	ldi	r24, 0x4E	; 78
     b4a:	66 e2       	ldi	r22, 0x26	; 38
     b4c:	4f e4       	ldi	r20, 0x4F	; 79
     b4e:	26 e2       	ldi	r18, 0x26	; 38
     b50:	bc db       	rcall	.-2184   	; 0x2ca <lcd_line>
     b52:	c1 e0       	ldi	r28, 0x01	; 1
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	16 e0       	ldi	r17, 0x06	; 6
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
     b58:	8c e4       	ldi	r24, 0x4C	; 76
     b5a:	61 2f       	mov	r22, r17
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	f0 da       	rcall	.-2592   	; 0x140 <lcd_pixel>
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
     b60:	c0 fd       	sbrc	r28, 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <draw_interface+0x90>
     b64:	8b e4       	ldi	r24, 0x4B	; 75
     b66:	61 2f       	mov	r22, r17
     b68:	41 e0       	ldi	r20, 0x01	; 1
     b6a:	ea da       	rcall	.-2604   	; 0x140 <lcd_pixel>
	}
	lcd_line(77, 2, 77, 38, BLACK);
	lcd_line(80, 2, 80, 38, BLACK);
	lcd_line(78, 1, 79, 1, BLACK);
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
     b6c:	21 96       	adiw	r28, 0x01	; 1
     b6e:	1c 5f       	subi	r17, 0xFC	; 252
     b70:	16 32       	cpi	r17, 0x26	; 38
     b72:	91 f7       	brne	.-28     	; 0xb58 <draw_interface+0x7c>
     b74:	18 e0       	ldi	r17, 0x08	; 8
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
     b76:	86 ed       	ldi	r24, 0xD6	; 214
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	66 e4       	ldi	r22, 0x46	; 70
     b7c:	41 2f       	mov	r20, r17
     b7e:	24 e0       	ldi	r18, 0x04	; 4
     b80:	05 e0       	ldi	r16, 0x05	; 5
     b82:	ee 24       	eor	r14, r14
     b84:	e3 94       	inc	r14
     b86:	4f df       	rcall	.-354    	; 0xa26 <lcd_draw>
     b88:	18 5f       	subi	r17, 0xF8	; 248
	lcd_line(78, 38, 79, 38, BLACK);
	for (int i = 1; i <= 8; i++) {
		lcd_pixel(76, 2 + (4 *i), BLACK);
		if (i % 2 == 0) lcd_pixel(75, 2 + (4 *i), BLACK);
	}
	for (int i = 1; i <= 4; i++) {
     b8a:	18 32       	cpi	r17, 0x28	; 40
     b8c:	a1 f7       	brne	.-24     	; 0xb76 <draw_interface+0x9a>
		lcd_draw(small_zero, 70, 8 *i, 4, 5, BLACK);
	}
	lcd_line(62, 34, 64, 34, BLACK);
     b8e:	8e e3       	ldi	r24, 0x3E	; 62
     b90:	62 e2       	ldi	r22, 0x22	; 34
     b92:	40 e4       	ldi	r20, 0x40	; 64
     b94:	22 e2       	ldi	r18, 0x22	; 34
     b96:	01 e0       	ldi	r16, 0x01	; 1
     b98:	98 db       	rcall	.-2256   	; 0x2ca <lcd_line>
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
     b9a:	85 ee       	ldi	r24, 0xE5	; 229
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	6b e4       	ldi	r22, 0x4B	; 75
     ba0:	47 e2       	ldi	r20, 0x27	; 39
     ba2:	28 e0       	ldi	r18, 0x08	; 8
     ba4:	08 e0       	ldi	r16, 0x08	; 8
     ba6:	3f df       	rcall	.-386    	; 0xa26 <lcd_draw>
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
     ba8:	81 ee       	ldi	r24, 0xE1	; 225
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	66 e3       	ldi	r22, 0x36	; 54
     bae:	49 e2       	ldi	r20, 0x29	; 41
     bb0:	23 e0       	ldi	r18, 0x03	; 3
     bb2:	05 e0       	ldi	r16, 0x05	; 5
     bb4:	38 df       	rcall	.-400    	; 0xa26 <lcd_draw>
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
     bb6:	83 ee       	ldi	r24, 0xE3	; 227
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	6a e3       	ldi	r22, 0x3A	; 58
     bbc:	49 e2       	ldi	r20, 0x29	; 41
     bbe:	23 e0       	ldi	r18, 0x03	; 3
     bc0:	32 df       	rcall	.-412    	; 0xa26 <lcd_draw>
	if (ovf_flag) {
     bc2:	80 91 46 01 	lds	r24, 0x0146
     bc6:	88 23       	and	r24, r24
     bc8:	a1 f0       	breq	.+40     	; 0xbf2 <draw_interface+0x116>
     bca:	12 e4       	ldi	r17, 0x42	; 66
		for (int i = 66; i <= 70; i++) {
			lcd_line(i, 1, i, 6, BLACK);
     bcc:	81 2f       	mov	r24, r17
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	41 2f       	mov	r20, r17
     bd2:	26 e0       	ldi	r18, 0x06	; 6
     bd4:	01 e0       	ldi	r16, 0x01	; 1
     bd6:	79 db       	rcall	.-2318   	; 0x2ca <lcd_line>
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_line(62, 34, 64, 34, BLACK);
	lcd_draw(ball, 75, 39, 8, 8, BLACK);
	lcd_draw(small_s, 54, 41, 3, 5, BLACK);
	lcd_draw(small_p, 58, 41, 3, 5, BLACK);
	if (ovf_flag) {
		for (int i = 66; i <= 70; i++) {
     bda:	17 34       	cpi	r17, 0x47	; 71
     bdc:	b9 f7       	brne	.-18     	; 0xbcc <draw_interface+0xf0>
			lcd_line(i, 1, i, 6, BLACK);
		}
		lcd_line(68, 2, 68, 5, WHITE);
     bde:	84 e4       	ldi	r24, 0x44	; 68
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	44 e4       	ldi	r20, 0x44	; 68
     be4:	25 e0       	ldi	r18, 0x05	; 5
     be6:	00 e0       	ldi	r16, 0x00	; 0
     be8:	70 db       	rcall	.-2336   	; 0x2ca <lcd_line>
		lcd_pixel(68, 4, BLACK);
     bea:	84 e4       	ldi	r24, 0x44	; 68
     bec:	64 e0       	ldi	r22, 0x04	; 4
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	a7 da       	rcall	.-2738   	; 0x140 <lcd_pixel>
	}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <draw_values_line>:
	if (us == X2) return;
	lcd_line(68, 41, 68, 45, BLACK);
	lcd_line(69, 41, 69, 45, BLACK);
}

void draw_values_line(LineType lt) {
     bfe:	ef 92       	push	r14
     c00:	0f 93       	push	r16
	switch (lt) {
     c02:	84 31       	cpi	r24, 0x14	; 20
     c04:	19 f0       	breq	.+6      	; 0xc0c <draw_values_line+0xe>
     c06:	80 35       	cpi	r24, 0x50	; 80
     c08:	41 f5       	brne	.+80     	; 0xc5a <draw_values_line+0x5c>
     c0a:	15 c0       	rjmp	.+42     	; 0xc36 <draw_values_line+0x38>
		case MAX20:
			lcd_draw(small_two, 66, 8, 3, 5, BLACK);
     c0c:	89 ed       	ldi	r24, 0xD9	; 217
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	62 e4       	ldi	r22, 0x42	; 66
     c12:	48 e0       	ldi	r20, 0x08	; 8
     c14:	23 e0       	ldi	r18, 0x03	; 3
     c16:	05 e0       	ldi	r16, 0x05	; 5
     c18:	ee 24       	eor	r14, r14
     c1a:	e3 94       	inc	r14
     c1c:	04 df       	rcall	.-504    	; 0xa26 <lcd_draw>
			lcd_draw(small_one, 66, 16, 2, 5, BLACK);
     c1e:	8d ed       	ldi	r24, 0xDD	; 221
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	62 e4       	ldi	r22, 0x42	; 66
     c24:	40 e1       	ldi	r20, 0x10	; 16
     c26:	22 e0       	ldi	r18, 0x02	; 2
     c28:	fe de       	rcall	.-516    	; 0xa26 <lcd_draw>
			lcd_draw(small_one, 66, 32, 2, 5, BLACK);
     c2a:	8d ed       	ldi	r24, 0xDD	; 221
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	62 e4       	ldi	r22, 0x42	; 66
     c30:	40 e2       	ldi	r20, 0x20	; 32
     c32:	22 e0       	ldi	r18, 0x02	; 2
     c34:	26 c0       	rjmp	.+76     	; 0xc82 <draw_values_line+0x84>
			break;
		case MAX80:
			lcd_draw(small_eight, 66, 8, 3, 5, BLACK);
     c36:	8f ed       	ldi	r24, 0xDF	; 223
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	62 e4       	ldi	r22, 0x42	; 66
     c3c:	48 e0       	ldi	r20, 0x08	; 8
     c3e:	23 e0       	ldi	r18, 0x03	; 3
     c40:	05 e0       	ldi	r16, 0x05	; 5
     c42:	ee 24       	eor	r14, r14
     c44:	e3 94       	inc	r14
     c46:	ef de       	rcall	.-546    	; 0xa26 <lcd_draw>
			lcd_draw(small_four, 66, 16, 3, 5, BLACK);
     c48:	8b ed       	ldi	r24, 0xDB	; 219
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	62 e4       	ldi	r22, 0x42	; 66
     c4e:	40 e1       	ldi	r20, 0x10	; 16
     c50:	23 e0       	ldi	r18, 0x03	; 3
     c52:	e9 de       	rcall	.-558    	; 0xa26 <lcd_draw>
			lcd_draw(small_four, 66, 32, 3, 5, BLACK);
     c54:	8b ed       	ldi	r24, 0xDB	; 219
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <draw_values_line+0x7e>
			break;
		case MAX40:
		default:
			lcd_draw(small_four, 66, 8, 3, 5, BLACK);
     c5a:	8b ed       	ldi	r24, 0xDB	; 219
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	62 e4       	ldi	r22, 0x42	; 66
     c60:	48 e0       	ldi	r20, 0x08	; 8
     c62:	23 e0       	ldi	r18, 0x03	; 3
     c64:	05 e0       	ldi	r16, 0x05	; 5
     c66:	ee 24       	eor	r14, r14
     c68:	e3 94       	inc	r14
     c6a:	dd de       	rcall	.-582    	; 0xa26 <lcd_draw>
			lcd_draw(small_two, 66, 16, 3, 5, BLACK);
     c6c:	89 ed       	ldi	r24, 0xD9	; 217
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	62 e4       	ldi	r22, 0x42	; 66
     c72:	40 e1       	ldi	r20, 0x10	; 16
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	d7 de       	rcall	.-594    	; 0xa26 <lcd_draw>
			lcd_draw(small_two, 66, 32, 3, 5, BLACK);
     c78:	89 ed       	ldi	r24, 0xD9	; 217
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	62 e4       	ldi	r22, 0x42	; 66
     c7e:	40 e2       	ldi	r20, 0x20	; 32
     c80:	23 e0       	ldi	r18, 0x03	; 3
     c82:	d1 de       	rcall	.-606    	; 0xa26 <lcd_draw>
	}
}
     c84:	0f 91       	pop	r16
     c86:	ef 90       	pop	r14
     c88:	08 95       	ret

00000c8a <draw_update_speed_indicator>:
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
}

void draw_update_speed_indicator(UpdateSpeed us) {
     c8a:	ef 92       	push	r14
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	18 2f       	mov	r17, r24
	if (us == H) {
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	31 f4       	brne	.+12     	; 0xca2 <draw_update_speed_indicator+0x18>
		lcd_draw(small_h, 62, 41, 3, 5, BLACK);
     c96:	8f ee       	ldi	r24, 0xEF	; 239
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	6e e3       	ldi	r22, 0x3E	; 62
     c9c:	49 e2       	ldi	r20, 0x29	; 41
     c9e:	23 e0       	ldi	r18, 0x03	; 3
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <draw_update_speed_indicator+0x26>
		return;
	}
	
	if (us == M) {
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	51 f4       	brne	.+20     	; 0xcba <draw_update_speed_indicator+0x30>
		lcd_draw(small_m, 62, 41, 5, 5, BLACK);
     ca6:	81 ef       	ldi	r24, 0xF1	; 241
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	6e e3       	ldi	r22, 0x3E	; 62
     cac:	49 e2       	ldi	r20, 0x29	; 41
     cae:	25 e0       	ldi	r18, 0x05	; 5
     cb0:	05 e0       	ldi	r16, 0x05	; 5
     cb2:	ee 24       	eor	r14, r14
     cb4:	e3 94       	inc	r14
     cb6:	b7 de       	rcall	.-658    	; 0xa26 <lcd_draw>
     cb8:	23 c0       	rjmp	.+70     	; 0xd00 <draw_update_speed_indicator+0x76>
		return;
	}

	lcd_line(62, 43, 62, 45, BLACK);
     cba:	8e e3       	ldi	r24, 0x3E	; 62
     cbc:	6b e2       	ldi	r22, 0x2B	; 43
     cbe:	4e e3       	ldi	r20, 0x3E	; 62
     cc0:	2d e2       	ldi	r18, 0x2D	; 45
     cc2:	01 e0       	ldi	r16, 0x01	; 1
     cc4:	02 db       	rcall	.-2556   	; 0x2ca <lcd_line>
	lcd_line(63, 43, 63, 45, BLACK);
     cc6:	8f e3       	ldi	r24, 0x3F	; 63
     cc8:	6b e2       	ldi	r22, 0x2B	; 43
     cca:	4f e3       	ldi	r20, 0x3F	; 63
     ccc:	2d e2       	ldi	r18, 0x2D	; 45
     cce:	fd da       	rcall	.-2566   	; 0x2ca <lcd_line>
	if (us == X1) return;
     cd0:	11 23       	and	r17, r17
     cd2:	b1 f0       	breq	.+44     	; 0xd00 <draw_update_speed_indicator+0x76>
	lcd_line(65, 42, 65, 45, BLACK);
     cd4:	81 e4       	ldi	r24, 0x41	; 65
     cd6:	6a e2       	ldi	r22, 0x2A	; 42
     cd8:	41 e4       	ldi	r20, 0x41	; 65
     cda:	2d e2       	ldi	r18, 0x2D	; 45
     cdc:	f6 da       	rcall	.-2580   	; 0x2ca <lcd_line>
	lcd_line(66, 42, 66, 45, BLACK);
     cde:	82 e4       	ldi	r24, 0x42	; 66
     ce0:	6a e2       	ldi	r22, 0x2A	; 42
     ce2:	42 e4       	ldi	r20, 0x42	; 66
     ce4:	2d e2       	ldi	r18, 0x2D	; 45
     ce6:	f1 da       	rcall	.-2590   	; 0x2ca <lcd_line>
	if (us == X2) return;
     ce8:	11 30       	cpi	r17, 0x01	; 1
     cea:	51 f0       	breq	.+20     	; 0xd00 <draw_update_speed_indicator+0x76>
	lcd_line(68, 41, 68, 45, BLACK);
     cec:	84 e4       	ldi	r24, 0x44	; 68
     cee:	69 e2       	ldi	r22, 0x29	; 41
     cf0:	44 e4       	ldi	r20, 0x44	; 68
     cf2:	2d e2       	ldi	r18, 0x2D	; 45
     cf4:	ea da       	rcall	.-2604   	; 0x2ca <lcd_line>
	lcd_line(69, 41, 69, 45, BLACK);
     cf6:	85 e4       	ldi	r24, 0x45	; 69
     cf8:	69 e2       	ldi	r22, 0x29	; 41
     cfa:	45 e4       	ldi	r20, 0x45	; 69
     cfc:	2d e2       	ldi	r18, 0x2D	; 45
     cfe:	e5 da       	rcall	.-2614   	; 0x2ca <lcd_line>
}
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <lcd_put_char>:
			lcd_pixel(x1, y1, c);
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
     d08:	9f 92       	push	r9
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	f8 2e       	mov	r15, r24
     d20:	96 2e       	mov	r9, r22
     d22:	a2 2e       	mov	r10, r18
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	48 9f       	mul	r20, r24
     d28:	a0 01       	movw	r20, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	8a 01       	movw	r16, r20
     d2e:	00 5a       	subi	r16, 0xA0	; 160
     d30:	10 40       	sbci	r17, 0x00	; 0
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     d32:	75 e6       	ldi	r23, 0x65	; 101
     d34:	c7 2e       	mov	r12, r23
     d36:	7f ef       	ldi	r23, 0xFF	; 255
     d38:	d7 2e       	mov	r13, r23
     d3a:	c4 0e       	add	r12, r20
     d3c:	d5 1e       	adc	r13, r21
     d3e:	1b c0       	rjmp	.+54     	; 0xd76 <lcd_put_char+0x6e>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
     d40:	8b 2d       	mov	r24, r11
     d42:	9e 2d       	mov	r25, r14
     d44:	da d8       	rcall	.-3660   	; 0xfffffefa <__eeprom_end+0xff7efd05>
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0c 2e       	mov	r0, r28
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <lcd_put_char+0x48>
     d4c:	95 95       	asr	r25
     d4e:	87 95       	ror	r24
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <lcd_put_char+0x44>
     d54:	80 ff       	sbrs	r24, 0
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <lcd_put_char+0x5a>
     d58:	69 2d       	mov	r22, r9
     d5a:	6c 0f       	add	r22, r28
     d5c:	8f 2d       	mov	r24, r15
     d5e:	4a 2d       	mov	r20, r10
     d60:	ef d9       	rcall	.-3106   	; 0x140 <lcd_pixel>
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 8; j++) {
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	c8 30       	cpi	r28, 0x08	; 8
     d66:	d1 05       	cpc	r29, r1
     d68:	59 f7       	brne	.-42     	; 0xd40 <lcd_put_char+0x38>
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	f3 94       	inc	r15
		}
	}
}

void lcd_put_char(byte x0, byte y0, unsigned char ch, Color c) {
	for (int i = 0; i < 5; i++) {
     d70:	0c 15       	cp	r16, r12
     d72:	1d 05       	cpc	r17, r13
     d74:	29 f0       	breq	.+10     	; 0xd80 <lcd_put_char+0x78>
     d76:	b0 2e       	mov	r11, r16
     d78:	e1 2e       	mov	r14, r17
     d7a:	c0 e0       	ldi	r28, 0x00	; 0
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	e0 cf       	rjmp	.-64     	; 0xd40 <lcd_put_char+0x38>
		for (int j = 0; j < 8; j++) {
			if ((eeprom_read_byte(&CHARS_TABLE[(ch - 32) * 5 + i]) >> j) & 1) lcd_pixel(x0 + i, y0 + j, c);
		}
	}
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	bf 90       	pop	r11
     d92:	af 90       	pop	r10
     d94:	9f 90       	pop	r9
     d96:	08 95       	ret

00000d98 <lcd_put_string>:

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	d8 2e       	mov	r13, r24
     dac:	b6 2e       	mov	r11, r22
     dae:	7a 01       	movw	r14, r20
     db0:	c2 2e       	mov	r12, r18
	int chars_printed = strlen(s);
     db2:	ea 01       	movw	r28, r20
     db4:	09 90       	ld	r0, Y+
     db6:	00 20       	and	r0, r0
     db8:	e9 f7       	brne	.-6      	; 0xdb4 <lcd_put_string+0x1c>
     dba:	21 97       	sbiw	r28, 0x01	; 1
     dbc:	c4 1b       	sub	r28, r20
     dbe:	d5 0b       	sbc	r29, r21
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	0c c0       	rjmp	.+24     	; 0xdde <lcd_put_string+0x46>
	for (int i = 0; i< chars_printed; i++) {
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
     dc6:	f7 01       	movw	r30, r14
     dc8:	e0 0f       	add	r30, r16
     dca:	f1 1f       	adc	r31, r17
     dcc:	8d 2d       	mov	r24, r13
     dce:	6b 2d       	mov	r22, r11
     dd0:	40 81       	ld	r20, Z
     dd2:	2c 2d       	mov	r18, r12
     dd4:	99 df       	rcall	.-206    	; 0xd08 <lcd_put_char>
	}
}

int lcd_put_string(byte x0, byte y0, char *s, Color c) {
	int chars_printed = strlen(s);
	for (int i = 0; i< chars_printed; i++) {
     dd6:	0f 5f       	subi	r16, 0xFF	; 255
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	d8 0e       	add	r13, r24
     dde:	0c 17       	cp	r16, r28
     de0:	1d 07       	cpc	r17, r29
     de2:	8c f3       	brlt	.-30     	; 0xdc6 <lcd_put_string+0x2e>
		lcd_put_char(x0 + 6 * i, y0, (unsigned char) s[i], c);
	}
	return chars_printed;
}
     de4:	ce 01       	movw	r24, r28
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	08 95       	ret

00000dfa <draw_current_value>:
	byte scale_top = sc_top(lt, value);
	lcd_line(78, scale_top, 78, 37, BLACK);
	lcd_line(79, scale_top, 79, 37, BLACK);
}
 
void draw_current_value(int value) {
     dfa:	ef 92       	push	r14
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <draw_current_value+0xc>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <draw_current_value+0xe>
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8c 01       	movw	r16, r24
	char buf[5];
	const char py = 40;
	char lcd_print_ptr = 1;
	int work_value = value;
	char is_negative = t_sign(work_value);
	if (is_negative) {
     e10:	17 fd       	sbrc	r17, 7
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <draw_current_value+0x20>
     e14:	ee 24       	eor	r14, r14
     e16:	e3 94       	inc	r14
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <draw_current_value+0x34>
		lcd_put_char(lcd_print_ptr, py, '-', BLACK);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	68 e2       	ldi	r22, 0x28	; 40
     e1e:	4d e2       	ldi	r20, 0x2D	; 45
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	72 df       	rcall	.-284    	; 0xd08 <lcd_put_char>
		lcd_print_ptr += 6;
		work_value = ~work_value;
     e24:	c8 01       	movw	r24, r16
     e26:	80 95       	com	r24
     e28:	90 95       	com	r25
     e2a:	a7 e0       	ldi	r26, 0x07	; 7
     e2c:	ea 2e       	mov	r14, r26
	}
	itoa(t_integer_part(work_value), buf, 10);
     e2e:	29 2f       	mov	r18, r25
     e30:	33 27       	eor	r19, r19
     e32:	27 fd       	sbrc	r18, 7
     e34:	3a 95       	dec	r19
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	27 70       	andi	r18, 0x07	; 7
     e3a:	30 70       	andi	r19, 0x00	; 0
     e3c:	e4 e0       	ldi	r30, 0x04	; 4
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	ea 95       	dec	r30
     e44:	e1 f7       	brne	.-8      	; 0xe3e <draw_current_value+0x44>
     e46:	82 95       	swap	r24
     e48:	8f 70       	andi	r24, 0x0F	; 15
     e4a:	82 2b       	or	r24, r18
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	8e 01       	movw	r16, r28
     e50:	0f 5f       	subi	r16, 0xFF	; 255
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	b8 01       	movw	r22, r16
     e56:	4a e0       	ldi	r20, 0x0A	; 10
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	30 d8       	rcall	.-4000   	; 0xfffffebc <__eeprom_end+0xff7efcc7>
	char chars_printed = lcd_put_string(lcd_print_ptr, py, buf, BLACK);
     e5c:	8e 2d       	mov	r24, r14
     e5e:	68 e2       	ldi	r22, 0x28	; 40
     e60:	a8 01       	movw	r20, r16
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	99 df       	rcall	.-206    	; 0xd98 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e66:	06 e0       	ldi	r16, 0x06	; 6
     e68:	80 9f       	mul	r24, r16
     e6a:	c0 01       	movw	r24, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	1e 2d       	mov	r17, r14
     e70:	18 0f       	add	r17, r24
	lcd_put_char(lcd_print_ptr, py, '.', BLACK);
     e72:	81 2f       	mov	r24, r17
     e74:	68 e2       	ldi	r22, 0x28	; 40
     e76:	4e e2       	ldi	r20, 0x2E	; 46
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	46 df       	rcall	.-372    	; 0xd08 <lcd_put_char>
	lcd_print_ptr += 6;
     e7c:	1a 5f       	subi	r17, 0xFA	; 250
	chars_printed = lcd_put_string(lcd_print_ptr, py, "0", BLACK);
     e7e:	81 2f       	mov	r24, r17
     e80:	68 e2       	ldi	r22, 0x28	; 40
     e82:	40 e6       	ldi	r20, 0x60	; 96
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	87 df       	rcall	.-242    	; 0xd98 <lcd_put_string>
	lcd_print_ptr += (6 * chars_printed);
     e8a:	80 9f       	mul	r24, r16
     e8c:	c0 01       	movw	r24, r0
     e8e:	11 24       	eor	r1, r1
     e90:	18 0f       	add	r17, r24
	lcd_draw(deg_char, lcd_print_ptr, py, 5, 3, BLACK);
     e92:	8d ee       	ldi	r24, 0xED	; 237
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	61 2f       	mov	r22, r17
     e98:	48 e2       	ldi	r20, 0x28	; 40
     e9a:	25 e0       	ldi	r18, 0x05	; 5
     e9c:	03 e0       	ldi	r16, 0x03	; 3
     e9e:	ee 24       	eor	r14, r14
     ea0:	e3 94       	inc	r14
     ea2:	c1 dd       	rcall	.-1150   	; 0xa26 <lcd_draw>
	lcd_print_ptr += 6;
	lcd_put_char(lcd_print_ptr, py, 'C', BLACK);
     ea4:	81 2f       	mov	r24, r17
     ea6:	8a 5f       	subi	r24, 0xFA	; 250
     ea8:	68 e2       	ldi	r22, 0x28	; 40
     eaa:	43 e4       	ldi	r20, 0x43	; 67
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	2c df       	rcall	.-424    	; 0xd08 <lcd_put_char>
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ef 90       	pop	r14
     ec4:	08 95       	ret

00000ec6 <print_hook>:

char* cmps[] = {"=", "<", ">", "<=", ">="};
char* acts[] = {"nop", "set", "res"};
char* ports[] = {"Z", "Y", "X", "W"};

void print_hook(int index) {
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <print_hook+0x10>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <print_hook+0x12>
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	byte py = (index + 1) * 9 + 3;
     ede:	ac 01       	movw	r20, r24
     ee0:	4f 5f       	subi	r20, 0xFF	; 255
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	9a 01       	movw	r18, r20
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	6a 95       	dec	r22
     eee:	e1 f7       	brne	.-8      	; 0xee8 <print_hook+0x22>
     ef0:	24 0f       	add	r18, r20
     ef2:	35 1f       	adc	r19, r21
     ef4:	33 e0       	ldi	r19, 0x03	; 3
     ef6:	d3 2e       	mov	r13, r19
     ef8:	d2 0e       	add	r13, r18
	lcd_put_string(1, py, cmps[hooks[index].op], BLACK);
     efa:	7c 01       	movw	r14, r24
     efc:	ee 0c       	add	r14, r14
     efe:	ff 1c       	adc	r15, r15
     f00:	ee 0c       	add	r14, r14
     f02:	ff 1c       	adc	r15, r15
     f04:	e8 0e       	add	r14, r24
     f06:	f9 1e       	adc	r15, r25
     f08:	8c ec       	ldi	r24, 0xCC	; 204
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	e8 0e       	add	r14, r24
     f0e:	f9 1e       	adc	r15, r25
     f10:	d7 01       	movw	r26, r14
     f12:	ec 91       	ld	r30, X
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	e8 51       	subi	r30, 0x18	; 24
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	40 81       	ld	r20, Z
     f20:	51 81       	ldd	r21, Z+1	; 0x01
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	6d 2d       	mov	r22, r13
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	37 df       	rcall	.-402    	; 0xd98 <lcd_put_string>
	int value = hooks[index].value;
	char buf[5];
	itoa(value, buf, 10);
     f2a:	f7 01       	movw	r30, r14
     f2c:	81 81       	ldd	r24, Z+1	; 0x01
     f2e:	92 81       	ldd	r25, Z+2	; 0x02
     f30:	8e 01       	movw	r16, r28
     f32:	0f 5f       	subi	r16, 0xFF	; 255
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	b8 01       	movw	r22, r16
     f38:	4a e0       	ldi	r20, 0x0A	; 10
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	bf d7       	rcall	.+3966   	; 0x1ebc <itoa>
	lcd_put_string(18, py, buf, BLACK);
     f3e:	82 e1       	ldi	r24, 0x12	; 18
     f40:	6d 2d       	mov	r22, r13
     f42:	a8 01       	movw	r20, r16
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	28 df       	rcall	.-432    	; 0xd98 <lcd_put_string>
	lcd_put_string(42, py, acts[hooks[index].act], BLACK);
     f48:	d7 01       	movw	r26, r14
     f4a:	13 96       	adiw	r26, 0x03	; 3
     f4c:	ec 91       	ld	r30, X
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	e2 50       	subi	r30, 0x02	; 2
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	40 81       	ld	r20, Z
     f5a:	51 81       	ldd	r21, Z+1	; 0x01
     f5c:	8a e2       	ldi	r24, 0x2A	; 42
     f5e:	6d 2d       	mov	r22, r13
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	1a df       	rcall	.-460    	; 0xd98 <lcd_put_string>
	if (hooks[index].act != nop) {
     f64:	f7 01       	movw	r30, r14
     f66:	83 81       	ldd	r24, Z+3	; 0x03
     f68:	88 23       	and	r24, r24
     f6a:	61 f0       	breq	.+24     	; 0xf84 <print_hook+0xbe>
		lcd_put_string(68, py, ports[hooks[index].port - 4], BLACK);
     f6c:	e4 81       	ldd	r30, Z+4	; 0x04
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ec 5f       	subi	r30, 0xFC	; 252
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	40 81       	ld	r20, Z
     f7a:	51 81       	ldd	r21, Z+1	; 0x01
     f7c:	84 e4       	ldi	r24, 0x44	; 68
     f7e:	6d 2d       	mov	r22, r13
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	0a df       	rcall	.-492    	; 0xd98 <lcd_put_string>
	}
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	08 95       	ret

00000f9e <lcd_clear>:
	while ((SPSR & 0x80) != 0x80);
	LCD_PORT |= (1 << LCD_CE_PIN);
}

void lcd_clear(void) {
	memset(LCD_CACHE, 0x00, LCD_CACHE_SIZE);
     f9e:	88 ef       	ldi	r24, 0xF8	; 248
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	e0 ee       	ldi	r30, 0xE0	; 224
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
     fa6:	df 01       	movw	r26, r30
     fa8:	9c 01       	movw	r18, r24
     faa:	1d 92       	st	X+, r1
     fac:	21 50       	subi	r18, 0x01	; 1
     fae:	30 40       	sbci	r19, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <lcd_clear+0xc>
	LWM = 0;
     fb2:	10 92 db 03 	sts	0x03DB, r1
     fb6:	10 92 da 03 	sts	0x03DA, r1
	HWM = LCD_CACHE_SIZE - 1;
     fba:	87 ef       	ldi	r24, 0xF7	; 247
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	90 93 d9 03 	sts	0x03D9, r25
     fc2:	80 93 d8 03 	sts	0x03D8, r24
}
     fc6:	08 95       	ret

00000fc8 <lcd_init>:
	LWM = LCD_CACHE_SIZE - 1;
	HWM = 0;
}

void lcd_init(void) {
	LCD_PORT |= (1 << LCD_RST_PIN);
     fc8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DDR |= (1 << LCD_RST_PIN) | (1 << LCD_DC_PIN) | (1 << LCD_CE_PIN) | (1 << SPI_MOSI_PIN) | (1 << SPI_CLK_PIN);
     fca:	87 b3       	in	r24, 0x17	; 23
     fcc:	8e 63       	ori	r24, 0x3E	; 62
     fce:	87 bb       	out	0x17, r24	; 23
	wait();
	LCD_PORT &= ~(1 << LCD_RST_PIN);
     fd0:	c4 98       	cbi	0x18, 4	; 24
	wait();
	LCD_PORT |= (1 << LCD_RST_PIN);
     fd2:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = 0x50;
     fd4:	80 e5       	ldi	r24, 0x50	; 80
     fd6:	8d b9       	out	0x0d, r24	; 13
	LCD_PORT |= (1 << LCD_CE_PIN);
     fd8:	c2 9a       	sbi	0x18, 2	; 24
	lcd_send_cmd(0x21);
     fda:	81 e2       	ldi	r24, 0x21	; 33
     fdc:	48 d8       	rcall	.-3952   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0xC8);
     fde:	88 ec       	ldi	r24, 0xC8	; 200
     fe0:	46 d8       	rcall	.-3956   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x06);
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	44 d8       	rcall	.-3960   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x13);
     fe6:	83 e1       	ldi	r24, 0x13	; 19
     fe8:	42 d8       	rcall	.-3964   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x20);
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	40 d8       	rcall	.-3968   	; 0x6e <lcd_send_cmd>
	lcd_send_cmd(0x0C);
     fee:	8c e0       	ldi	r24, 0x0C	; 12
     ff0:	3e d8       	rcall	.-3972   	; 0x6e <lcd_send_cmd>
	lcd_clear();
     ff2:	d5 df       	rcall	.-86     	; 0xf9e <lcd_clear>
	lcd_update();
     ff4:	43 d8       	rcall	.-3962   	; 0x7c <lcd_update>
}
     ff6:	08 95       	ret

00000ff8 <main>:
		}
	}
	apply_port();
} 

int main(void) {
     ff8:	2f 92       	push	r2
     ffa:	3f 92       	push	r3
     ffc:	4f 92       	push	r4
     ffe:	5f 92       	push	r5
    1000:	6f 92       	push	r6
    1002:	7f 92       	push	r7
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <main+0x26>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	dt_init();
    1024:	5a da       	rcall	.-2892   	; 0x4da <dt_init>
	lcd_init();
    1026:	d0 df       	rcall	.-96     	; 0xfc8 <lcd_init>

typedef enum { A = 0, B = 1, C = 2, D = 3 } Button;
typedef enum { Z = 4, Y = 5, X = 6, W = 7 } Port;

void io_init(void) { 
	I_DDR = 0;
    1028:	14 ba       	out	0x14, r1	; 20
	O_DDR = 0b11110000;
    102a:	80 ef       	ldi	r24, 0xF0	; 240
    102c:	81 bb       	out	0x11, r24	; 17
ISR(TIMER0_OVF_vect) {
    __clock__ += RATE;
}

void clock_init(void) {
	TCCR0 = 0b100; // 31 250 ticks/s
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
    1032:	89 b7       	in	r24, 0x39	; 57
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	89 bf       	out	0x39, r24	; 57
	sei();
    1038:	78 94       	sei

char port_status[PORT_SIZE] = {0, 0, 0, 0};

void hooks_init(void) {
	for (int i = 0; i < HOOKS_N; i++) {
		hooks[i].port = Z;
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	80 93 d0 01 	sts	0x01D0, r24
    1040:	80 93 d5 01 	sts	0x01D5, r24
    1044:	80 93 da 01 	sts	0x01DA, r24
    1048:	80 93 df 01 	sts	0x01DF, r24
	
	/* 
	 * Initial conversion  
	 */ 
	 
	dt_convert();
    104c:	4f da       	rcall	.-2914   	; 0x4ec <dt_convert>
	
	lcd_clear();
    104e:	a7 df       	rcall	.-178    	; 0xf9e <lcd_clear>
	lcd_line(22, 28, 61, 28, BLACK);
    1050:	86 e1       	ldi	r24, 0x16	; 22
    1052:	6c e1       	ldi	r22, 0x1C	; 28
    1054:	4d e3       	ldi	r20, 0x3D	; 61
    1056:	2c e1       	ldi	r18, 0x1C	; 28
    1058:	01 e0       	ldi	r16, 0x01	; 1
    105a:	37 d9       	rcall	.-3474   	; 0x2ca <lcd_line>
	lcd_line(22, 31, 61, 31, BLACK);
    105c:	86 e1       	ldi	r24, 0x16	; 22
    105e:	6f e1       	ldi	r22, 0x1F	; 31
    1060:	4d e3       	ldi	r20, 0x3D	; 61
    1062:	2f e1       	ldi	r18, 0x1F	; 31
    1064:	32 d9       	rcall	.-3484   	; 0x2ca <lcd_line>
	lcd_line(22, 28, 22, 31, BLACK);
    1066:	86 e1       	ldi	r24, 0x16	; 22
    1068:	6c e1       	ldi	r22, 0x1C	; 28
    106a:	46 e1       	ldi	r20, 0x16	; 22
    106c:	2f e1       	ldi	r18, 0x1F	; 31
    106e:	2d d9       	rcall	.-3494   	; 0x2ca <lcd_line>
	lcd_line(61, 28, 61, 31, BLACK);
    1070:	8d e3       	ldi	r24, 0x3D	; 61
    1072:	6c e1       	ldi	r22, 0x1C	; 28
    1074:	4d e3       	ldi	r20, 0x3D	; 61
    1076:	2f e1       	ldi	r18, 0x1F	; 31
    1078:	28 d9       	rcall	.-3504   	; 0x2ca <lcd_line>
	lcd_put_string(12, 16, "One moment", BLACK);
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	60 e1       	ldi	r22, 0x10	; 16
    107e:	42 e6       	ldi	r20, 0x62	; 98
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	89 de       	rcall	.-750    	; 0xd98 <lcd_put_string>
    1086:	16 e1       	ldi	r17, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1088:	e1 2c       	mov	r14, r1
    108a:	bd e7       	ldi	r27, 0x7D	; 125
    108c:	fb 2e       	mov	r15, r27
	
	for (int i = 0; i < 40; i++) {
		lcd_line(i + 22, 29, i + 22, 30, BLACK);
    108e:	81 2f       	mov	r24, r17
    1090:	6d e1       	ldi	r22, 0x1D	; 29
    1092:	41 2f       	mov	r20, r17
    1094:	2e e1       	ldi	r18, 0x1E	; 30
    1096:	01 e0       	ldi	r16, 0x01	; 1
    1098:	18 d9       	rcall	.-3536   	; 0x2ca <lcd_line>
		lcd_update();
    109a:	f0 d7       	rcall	.+4064   	; 0x207c <__data_load_end+0x9a>
    109c:	c7 01       	movw	r24, r14
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <main+0xa6>
    10a2:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_line(22, 31, 61, 31, BLACK);
	lcd_line(22, 28, 22, 31, BLACK);
	lcd_line(61, 28, 61, 31, BLACK);
	lcd_put_string(12, 16, "One moment", BLACK);
	
	for (int i = 0; i < 40; i++) {
    10a4:	1e 33       	cpi	r17, 0x3E	; 62
    10a6:	99 f7       	brne	.-26     	; 0x108e <main+0x96>
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	9e e4       	ldi	r25, 0x4E	; 78
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <main+0xb4>
	}

	while (1) {
		_delay_ms(10);
		
		handle_hooks(shown_value);
    10b0:	80 91 49 01 	lds	r24, 0x0149
    10b4:	90 91 4a 01 	lds	r25, 0x014A
    10b8:	71 db       	rcall	.-2334   	; 0x79c <handle_hooks>
		
		/* 
		 * Non-blocking temp conversion
		 */
		 
		if (!conversion) {
    10ba:	80 91 45 01 	lds	r24, 0x0145
    10be:	88 23       	and	r24, r24
    10c0:	21 f5       	brne	.+72     	; 0x110a <main+0x112>
			dt_convert();
    10c2:	14 da       	rcall	.-3032   	; 0x4ec <dt_convert>
			conversion = 1;
    10c4:	21 e0       	ldi	r18, 0x01	; 1
    10c6:	20 93 45 01 	sts	0x0145, r18
			conversion_start = clock();
    10ca:	80 91 14 01 	lds	r24, 0x0114
    10ce:	80 93 3d 01 	sts	0x013D, r24
    10d2:	80 91 15 01 	lds	r24, 0x0115
    10d6:	80 93 3e 01 	sts	0x013E, r24
    10da:	80 91 16 01 	lds	r24, 0x0116
    10de:	80 93 3f 01 	sts	0x013F, r24
    10e2:	80 91 17 01 	lds	r24, 0x0117
    10e6:	80 93 40 01 	sts	0x0140, r24
    10ea:	80 91 18 01 	lds	r24, 0x0118
    10ee:	80 93 41 01 	sts	0x0141, r24
    10f2:	80 91 19 01 	lds	r24, 0x0119
    10f6:	80 93 42 01 	sts	0x0142, r24
    10fa:	80 91 1a 01 	lds	r24, 0x011A
    10fe:	80 93 43 01 	sts	0x0143, r24
    1102:	80 91 1b 01 	lds	r24, 0x011B
    1106:	80 93 44 01 	sts	0x0144, r24
		}
		
		if (clock() - conversion_start > CONV_TIME) {
    110a:	90 91 14 01 	lds	r25, 0x0114
    110e:	40 91 15 01 	lds	r20, 0x0115
    1112:	60 91 16 01 	lds	r22, 0x0116
    1116:	e0 91 17 01 	lds	r30, 0x0117
    111a:	a0 91 18 01 	lds	r26, 0x0118
    111e:	10 91 19 01 	lds	r17, 0x0119
    1122:	f0 90 1a 01 	lds	r15, 0x011A
    1126:	50 91 1b 01 	lds	r21, 0x011B
    112a:	80 91 3d 01 	lds	r24, 0x013D
    112e:	20 91 3e 01 	lds	r18, 0x013E
    1132:	70 91 3f 01 	lds	r23, 0x013F
    1136:	f0 91 40 01 	lds	r31, 0x0140
    113a:	00 91 41 01 	lds	r16, 0x0141
    113e:	d0 90 42 01 	lds	r13, 0x0142
    1142:	b0 90 43 01 	lds	r11, 0x0143
    1146:	a0 90 44 01 	lds	r10, 0x0144
    114a:	c9 2e       	mov	r12, r25
    114c:	c8 1a       	sub	r12, r24
    114e:	31 e0       	ldi	r19, 0x01	; 1
    1150:	9c 15       	cp	r25, r12
    1152:	08 f0       	brcs	.+2      	; 0x1156 <main+0x15e>
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	84 2f       	mov	r24, r20
    1158:	82 1b       	sub	r24, r18
    115a:	21 e0       	ldi	r18, 0x01	; 1
    115c:	48 17       	cp	r20, r24
    115e:	08 f0       	brcs	.+2      	; 0x1162 <main+0x16a>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	e8 2e       	mov	r14, r24
    1164:	e3 1a       	sub	r14, r19
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	8e 15       	cp	r24, r14
    116a:	08 f0       	brcs	.+2      	; 0x116e <main+0x176>
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	29 2b       	or	r18, r25
    1170:	86 2f       	mov	r24, r22
    1172:	87 1b       	sub	r24, r23
    1174:	31 e0       	ldi	r19, 0x01	; 1
    1176:	68 17       	cp	r22, r24
    1178:	08 f0       	brcs	.+2      	; 0x117c <main+0x184>
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	b8 2f       	mov	r27, r24
    117e:	b2 1b       	sub	r27, r18
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	8b 17       	cp	r24, r27
    1184:	08 f0       	brcs	.+2      	; 0x1188 <main+0x190>
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	39 2b       	or	r19, r25
    118a:	8e 2f       	mov	r24, r30
    118c:	8f 1b       	sub	r24, r31
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	e8 17       	cp	r30, r24
    1192:	08 f0       	brcs	.+2      	; 0x1196 <main+0x19e>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	78 2f       	mov	r23, r24
    1198:	73 1b       	sub	r23, r19
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	87 17       	cp	r24, r23
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <main+0x1aa>
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	29 2b       	or	r18, r25
    11a4:	8a 2f       	mov	r24, r26
    11a6:	80 1b       	sub	r24, r16
    11a8:	31 e0       	ldi	r19, 0x01	; 1
    11aa:	a8 17       	cp	r26, r24
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <main+0x1b8>
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	68 2f       	mov	r22, r24
    11b2:	62 1b       	sub	r22, r18
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	86 17       	cp	r24, r22
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <main+0x1c4>
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	39 2b       	or	r19, r25
    11be:	81 2f       	mov	r24, r17
    11c0:	8d 19       	sub	r24, r13
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	18 17       	cp	r17, r24
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <main+0x1d2>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	48 2f       	mov	r20, r24
    11cc:	43 1b       	sub	r20, r19
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	84 17       	cp	r24, r20
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <main+0x1de>
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	29 2b       	or	r18, r25
    11d8:	8f 2d       	mov	r24, r15
    11da:	8b 19       	sub	r24, r11
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	f8 16       	cp	r15, r24
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <main+0x1ec>
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	38 2f       	mov	r19, r24
    11e6:	32 1b       	sub	r19, r18
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	83 17       	cp	r24, r19
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <main+0x1f8>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	92 2b       	or	r25, r18
    11f2:	5a 19       	sub	r21, r10
    11f4:	59 17       	cp	r21, r25
    11f6:	79 f4       	brne	.+30     	; 0x1216 <main+0x21e>
    11f8:	33 23       	and	r19, r19
    11fa:	69 f4       	brne	.+26     	; 0x1216 <main+0x21e>
    11fc:	44 23       	and	r20, r20
    11fe:	59 f4       	brne	.+22     	; 0x1216 <main+0x21e>
    1200:	66 23       	and	r22, r22
    1202:	49 f4       	brne	.+18     	; 0x1216 <main+0x21e>
    1204:	77 23       	and	r23, r23
    1206:	39 f4       	brne	.+14     	; 0x1216 <main+0x21e>
    1208:	bb 23       	and	r27, r27
    120a:	29 f4       	brne	.+10     	; 0x1216 <main+0x21e>
    120c:	ee 20       	and	r14, r14
    120e:	19 f4       	brne	.+6      	; 0x1216 <main+0x21e>
    1210:	64 e6       	ldi	r22, 0x64	; 100
    1212:	6c 15       	cp	r22, r12
    1214:	38 f4       	brcc	.+14     	; 0x1224 <main+0x22c>
			actual_t = dt_read();
    1216:	72 d9       	rcall	.-3356   	; 0x4fc <dt_read>
    1218:	90 93 48 01 	sts	0x0148, r25
    121c:	80 93 47 01 	sts	0x0147, r24
			conversion = 0;
    1220:	10 92 45 01 	sts	0x0145, r1
}

timestamp clock(void) {
	return __clock__;
    1224:	c0 90 14 01 	lds	r12, 0x0114
    1228:	b0 90 15 01 	lds	r11, 0x0115
    122c:	a0 90 16 01 	lds	r10, 0x0116
    1230:	90 90 17 01 	lds	r9, 0x0117
    1234:	80 90 18 01 	lds	r8, 0x0118
    1238:	70 90 19 01 	lds	r7, 0x0119
    123c:	60 90 1a 01 	lds	r6, 0x011A
    1240:	80 91 1b 01 	lds	r24, 0x011B
    1244:	89 83       	std	Y+1, r24	; 0x01
		
		/*
		 * Value update with chosen period
		 */
		
		if (clock() - last_upd >= (delays[usp] - CYCLE_CORRECTION)) {
    1246:	e0 91 3c 01 	lds	r30, 0x013C
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	a3 e0       	ldi	r26, 0x03	; 3
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	aa 95       	dec	r26
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x256>
    1256:	e1 56       	subi	r30, 0x61	; 97
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	31 81       	ldd	r19, Z+1	; 0x01
    125e:	42 81       	ldd	r20, Z+2	; 0x02
    1260:	53 81       	ldd	r21, Z+3	; 0x03
    1262:	64 81       	ldd	r22, Z+4	; 0x04
    1264:	75 81       	ldd	r23, Z+5	; 0x05
    1266:	a6 81       	ldd	r26, Z+6	; 0x06
    1268:	e7 81       	ldd	r30, Z+7	; 0x07
    126a:	fc e9       	ldi	r31, 0x9C	; 156
    126c:	2f 2e       	mov	r2, r31
    126e:	28 0e       	add	r2, r24
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	28 16       	cp	r2, r24
    1274:	08 f0       	brcs	.+2      	; 0x1278 <main+0x280>
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	83 2f       	mov	r24, r19
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	83 17       	cp	r24, r19
    1280:	08 f0       	brcs	.+2      	; 0x1284 <main+0x28c>
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	e9 2e       	mov	r14, r25
    1286:	e8 0e       	add	r14, r24
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	e8 16       	cp	r14, r24
    128c:	08 f0       	brcs	.+2      	; 0x1290 <main+0x298>
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	29 2b       	or	r18, r25
    1292:	84 2f       	mov	r24, r20
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	31 e0       	ldi	r19, 0x01	; 1
    1298:	84 17       	cp	r24, r20
    129a:	08 f0       	brcs	.+2      	; 0x129e <main+0x2a6>
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	f2 2e       	mov	r15, r18
    12a0:	f8 0e       	add	r15, r24
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	f8 16       	cp	r15, r24
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <main+0x2b2>
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	39 2b       	or	r19, r25
    12ac:	85 2f       	mov	r24, r21
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	85 17       	cp	r24, r21
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <main+0x2c0>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	03 2f       	mov	r16, r19
    12ba:	08 0f       	add	r16, r24
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	08 17       	cp	r16, r24
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <main+0x2cc>
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	29 2b       	or	r18, r25
    12c6:	86 2f       	mov	r24, r22
    12c8:	81 50       	subi	r24, 0x01	; 1
    12ca:	31 e0       	ldi	r19, 0x01	; 1
    12cc:	86 17       	cp	r24, r22
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <main+0x2da>
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	12 2f       	mov	r17, r18
    12d4:	18 0f       	add	r17, r24
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	18 17       	cp	r17, r24
    12da:	08 f0       	brcs	.+2      	; 0x12de <main+0x2e6>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	39 2b       	or	r19, r25
    12e0:	87 2f       	mov	r24, r23
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	87 17       	cp	r24, r23
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <main+0x2f4>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	b3 2f       	mov	r27, r19
    12ee:	b8 0f       	add	r27, r24
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	b8 17       	cp	r27, r24
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <main+0x300>
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	29 2b       	or	r18, r25
    12fa:	8a 2f       	mov	r24, r26
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	8a 17       	cp	r24, r26
    1302:	08 f0       	brcs	.+2      	; 0x1306 <main+0x30e>
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a2 2f       	mov	r26, r18
    1308:	a8 0f       	add	r26, r24
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	a8 17       	cp	r26, r24
    130e:	08 f0       	brcs	.+2      	; 0x1312 <main+0x31a>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	92 2b       	or	r25, r18
    1314:	7e 2f       	mov	r23, r30
    1316:	71 50       	subi	r23, 0x01	; 1
    1318:	79 0f       	add	r23, r25
    131a:	80 91 4b 01 	lds	r24, 0x014B
    131e:	20 91 4c 01 	lds	r18, 0x014C
    1322:	30 91 4d 01 	lds	r19, 0x014D
    1326:	40 91 4e 01 	lds	r20, 0x014E
    132a:	50 91 4f 01 	lds	r21, 0x014F
    132e:	d0 90 50 01 	lds	r13, 0x0150
    1332:	50 90 51 01 	lds	r5, 0x0151
    1336:	30 90 52 01 	lds	r3, 0x0152
    133a:	4c 2c       	mov	r4, r12
    133c:	48 1a       	sub	r4, r24
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	c4 14       	cp	r12, r4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <main+0x34e>
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	8b 2d       	mov	r24, r11
    1348:	82 1b       	sub	r24, r18
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	b8 16       	cp	r11, r24
    134e:	08 f0       	brcs	.+2      	; 0x1352 <main+0x35a>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	e8 2f       	mov	r30, r24
    1354:	e9 1b       	sub	r30, r25
    1356:	ea 83       	std	Y+2, r30	; 0x02
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	8e 17       	cp	r24, r30
    135c:	08 f0       	brcs	.+2      	; 0x1360 <main+0x368>
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	29 2b       	or	r18, r25
    1362:	8a 2d       	mov	r24, r10
    1364:	83 1b       	sub	r24, r19
    1366:	31 e0       	ldi	r19, 0x01	; 1
    1368:	a8 16       	cp	r10, r24
    136a:	08 f0       	brcs	.+2      	; 0x136e <main+0x376>
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f8 2f       	mov	r31, r24
    1370:	f2 1b       	sub	r31, r18
    1372:	fb 83       	std	Y+3, r31	; 0x03
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	8f 17       	cp	r24, r31
    1378:	08 f0       	brcs	.+2      	; 0x137c <main+0x384>
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	39 2b       	or	r19, r25
    137e:	89 2d       	mov	r24, r9
    1380:	84 1b       	sub	r24, r20
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	98 16       	cp	r9, r24
    1386:	08 f0       	brcs	.+2      	; 0x138a <main+0x392>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	68 2f       	mov	r22, r24
    138c:	63 1b       	sub	r22, r19
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	86 17       	cp	r24, r22
    1392:	08 f0       	brcs	.+2      	; 0x1396 <main+0x39e>
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	29 2b       	or	r18, r25
    1398:	88 2d       	mov	r24, r8
    139a:	85 1b       	sub	r24, r21
    139c:	31 e0       	ldi	r19, 0x01	; 1
    139e:	88 16       	cp	r8, r24
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <main+0x3ac>
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	58 2f       	mov	r21, r24
    13a6:	52 1b       	sub	r21, r18
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	85 17       	cp	r24, r21
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <main+0x3b8>
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	39 2b       	or	r19, r25
    13b2:	87 2d       	mov	r24, r7
    13b4:	8d 19       	sub	r24, r13
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	78 16       	cp	r7, r24
    13ba:	08 f0       	brcs	.+2      	; 0x13be <main+0x3c6>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	48 2f       	mov	r20, r24
    13c0:	43 1b       	sub	r20, r19
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	84 17       	cp	r24, r20
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <main+0x3d2>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	29 2b       	or	r18, r25
    13cc:	86 2d       	mov	r24, r6
    13ce:	85 19       	sub	r24, r5
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	68 16       	cp	r6, r24
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <main+0x3e0>
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	38 2f       	mov	r19, r24
    13da:	32 1b       	sub	r19, r18
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	83 17       	cp	r24, r19
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <main+0x3ec>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	92 2b       	or	r25, r18
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	83 19       	sub	r24, r3
    13ea:	89 1b       	sub	r24, r25
    13ec:	87 17       	cp	r24, r23
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <main+0x3fa>
    13f0:	44 c0       	rjmp	.+136    	; 0x147a <main+0x482>
    13f2:	78 17       	cp	r23, r24
    13f4:	e9 f4       	brne	.+58     	; 0x1430 <main+0x438>
    13f6:	3a 17       	cp	r19, r26
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <main+0x404>
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <main+0x482>
    13fc:	a3 17       	cp	r26, r19
    13fe:	c1 f4       	brne	.+48     	; 0x1430 <main+0x438>
    1400:	4b 17       	cp	r20, r27
    1402:	d8 f1       	brcs	.+118    	; 0x147a <main+0x482>
    1404:	b4 17       	cp	r27, r20
    1406:	a1 f4       	brne	.+40     	; 0x1430 <main+0x438>
    1408:	51 17       	cp	r21, r17
    140a:	b8 f1       	brcs	.+110    	; 0x147a <main+0x482>
    140c:	15 17       	cp	r17, r21
    140e:	81 f4       	brne	.+32     	; 0x1430 <main+0x438>
    1410:	60 17       	cp	r22, r16
    1412:	98 f1       	brcs	.+102    	; 0x147a <main+0x482>
    1414:	06 17       	cp	r16, r22
    1416:	61 f4       	brne	.+24     	; 0x1430 <main+0x438>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	2f 15       	cp	r18, r15
    141c:	70 f1       	brcs	.+92     	; 0x147a <main+0x482>
    141e:	f2 16       	cp	r15, r18
    1420:	39 f4       	brne	.+14     	; 0x1430 <main+0x438>
    1422:	6a 81       	ldd	r22, Y+2	; 0x02
    1424:	6e 15       	cp	r22, r14
    1426:	48 f1       	brcs	.+82     	; 0x147a <main+0x482>
    1428:	e6 16       	cp	r14, r22
    142a:	11 f4       	brne	.+4      	; 0x1430 <main+0x438>
    142c:	42 14       	cp	r4, r2
    142e:	28 f1       	brcs	.+74     	; 0x147a <main+0x482>
			shown_value = actual_t;
    1430:	20 91 47 01 	lds	r18, 0x0147
    1434:	30 91 48 01 	lds	r19, 0x0148
    1438:	30 93 4a 01 	sts	0x014A, r19
    143c:	20 93 49 01 	sts	0x0149, r18
    1440:	ea e5       	ldi	r30, 0x5A	; 90
    1442:	f1 e0       	ldi	r31, 0x01	; 1
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
		values_for_chart[i - 1] = values_for_chart[i];
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	81 93       	st	Z+, r24
    144a:	91 93       	st	Z+, r25
		);
	}
}

void add_new_chart_value(int new_value) {
	for (int i = 1; i < CHART_W; i++) {
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	ea 3c       	cpi	r30, 0xCA	; 202
    1450:	f8 07       	cpc	r31, r24
    1452:	c1 f7       	brne	.-16     	; 0x1444 <main+0x44c>
		values_for_chart[i - 1] = values_for_chart[i];
	}
	values_for_chart[CHART_W - 1] = new_value;
    1454:	31 83       	std	Z+1, r19	; 0x01
    1456:	20 83       	st	Z, r18
		 */
		
		if (clock() - last_upd >= (delays[usp] - CYCLE_CORRECTION)) {
			shown_value = actual_t;
 			add_new_chart_value(shown_value);
			last_upd = clock();
    1458:	c0 92 4b 01 	sts	0x014B, r12
    145c:	b0 92 4c 01 	sts	0x014C, r11
    1460:	a0 92 4d 01 	sts	0x014D, r10
    1464:	90 92 4e 01 	sts	0x014E, r9
    1468:	80 92 4f 01 	sts	0x014F, r8
    146c:	70 92 50 01 	sts	0x0150, r7
    1470:	60 92 51 01 	sts	0x0151, r6
    1474:	99 81       	ldd	r25, Y+1	; 0x01
    1476:	90 93 52 01 	sts	0x0152, r25
		}
		
		lcd_clear();
    147a:	91 dd       	rcall	.-1246   	; 0xf9e <lcd_clear>
		
		if (io_read(D) && clock() - debounce_d > DEBOUNCE_T) {
    147c:	9b 9b       	sbis	0x13, 3	; 19
    147e:	a7 c0       	rjmp	.+334    	; 0x15ce <main+0x5d6>
    1480:	90 91 14 01 	lds	r25, 0x0114
    1484:	40 91 15 01 	lds	r20, 0x0115
    1488:	60 91 16 01 	lds	r22, 0x0116
    148c:	e0 91 17 01 	lds	r30, 0x0117
    1490:	a0 91 18 01 	lds	r26, 0x0118
    1494:	10 91 19 01 	lds	r17, 0x0119
    1498:	f0 90 1a 01 	lds	r15, 0x011A
    149c:	50 91 1b 01 	lds	r21, 0x011B
    14a0:	80 91 34 01 	lds	r24, 0x0134
    14a4:	20 91 35 01 	lds	r18, 0x0135
    14a8:	70 91 36 01 	lds	r23, 0x0136
    14ac:	f0 91 37 01 	lds	r31, 0x0137
    14b0:	00 91 38 01 	lds	r16, 0x0138
    14b4:	d0 90 39 01 	lds	r13, 0x0139
    14b8:	b0 90 3a 01 	lds	r11, 0x013A
    14bc:	a0 90 3b 01 	lds	r10, 0x013B
    14c0:	c9 2e       	mov	r12, r25
    14c2:	c8 1a       	sub	r12, r24
    14c4:	31 e0       	ldi	r19, 0x01	; 1
    14c6:	9c 15       	cp	r25, r12
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <main+0x4d4>
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	84 2f       	mov	r24, r20
    14ce:	82 1b       	sub	r24, r18
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	48 17       	cp	r20, r24
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <main+0x4e0>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	e8 2e       	mov	r14, r24
    14da:	e3 1a       	sub	r14, r19
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	8e 15       	cp	r24, r14
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <main+0x4ec>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	29 2b       	or	r18, r25
    14e6:	86 2f       	mov	r24, r22
    14e8:	87 1b       	sub	r24, r23
    14ea:	31 e0       	ldi	r19, 0x01	; 1
    14ec:	68 17       	cp	r22, r24
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <main+0x4fa>
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	b8 2f       	mov	r27, r24
    14f4:	b2 1b       	sub	r27, r18
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	8b 17       	cp	r24, r27
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <main+0x506>
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	39 2b       	or	r19, r25
    1500:	8e 2f       	mov	r24, r30
    1502:	8f 1b       	sub	r24, r31
    1504:	21 e0       	ldi	r18, 0x01	; 1
    1506:	e8 17       	cp	r30, r24
    1508:	08 f0       	brcs	.+2      	; 0x150c <main+0x514>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	78 2f       	mov	r23, r24
    150e:	73 1b       	sub	r23, r19
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	87 17       	cp	r24, r23
    1514:	08 f0       	brcs	.+2      	; 0x1518 <main+0x520>
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	29 2b       	or	r18, r25
    151a:	8a 2f       	mov	r24, r26
    151c:	80 1b       	sub	r24, r16
    151e:	31 e0       	ldi	r19, 0x01	; 1
    1520:	a8 17       	cp	r26, r24
    1522:	08 f0       	brcs	.+2      	; 0x1526 <main+0x52e>
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	68 2f       	mov	r22, r24
    1528:	62 1b       	sub	r22, r18
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	86 17       	cp	r24, r22
    152e:	08 f0       	brcs	.+2      	; 0x1532 <main+0x53a>
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	39 2b       	or	r19, r25
    1534:	81 2f       	mov	r24, r17
    1536:	8d 19       	sub	r24, r13
    1538:	21 e0       	ldi	r18, 0x01	; 1
    153a:	18 17       	cp	r17, r24
    153c:	08 f0       	brcs	.+2      	; 0x1540 <main+0x548>
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	48 2f       	mov	r20, r24
    1542:	43 1b       	sub	r20, r19
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	84 17       	cp	r24, r20
    1548:	08 f0       	brcs	.+2      	; 0x154c <main+0x554>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	29 2b       	or	r18, r25
    154e:	8f 2d       	mov	r24, r15
    1550:	8b 19       	sub	r24, r11
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	f8 16       	cp	r15, r24
    1556:	08 f0       	brcs	.+2      	; 0x155a <main+0x562>
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	38 2f       	mov	r19, r24
    155c:	32 1b       	sub	r19, r18
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	83 17       	cp	r24, r19
    1562:	08 f0       	brcs	.+2      	; 0x1566 <main+0x56e>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	92 2b       	or	r25, r18
    1568:	5a 19       	sub	r21, r10
    156a:	59 17       	cp	r21, r25
    156c:	79 f4       	brne	.+30     	; 0x158c <main+0x594>
    156e:	33 23       	and	r19, r19
    1570:	69 f4       	brne	.+26     	; 0x158c <main+0x594>
    1572:	44 23       	and	r20, r20
    1574:	59 f4       	brne	.+22     	; 0x158c <main+0x594>
    1576:	66 23       	and	r22, r22
    1578:	49 f4       	brne	.+18     	; 0x158c <main+0x594>
    157a:	77 23       	and	r23, r23
    157c:	39 f4       	brne	.+14     	; 0x158c <main+0x594>
    157e:	bb 23       	and	r27, r27
    1580:	29 f4       	brne	.+10     	; 0x158c <main+0x594>
    1582:	ee 20       	and	r14, r14
    1584:	19 f4       	brne	.+6      	; 0x158c <main+0x594>
    1586:	ea ef       	ldi	r30, 0xFA	; 250
    1588:	ec 15       	cp	r30, r12
    158a:	08 f5       	brcc	.+66     	; 0x15ce <main+0x5d6>
			change_view_mode();
    158c:	c0 d8       	rcall	.-3712   	; 0x70e <change_view_mode>
			debounce_d = clock();
    158e:	80 91 14 01 	lds	r24, 0x0114
    1592:	80 93 34 01 	sts	0x0134, r24
    1596:	80 91 15 01 	lds	r24, 0x0115
    159a:	80 93 35 01 	sts	0x0135, r24
    159e:	80 91 16 01 	lds	r24, 0x0116
    15a2:	80 93 36 01 	sts	0x0136, r24
    15a6:	80 91 17 01 	lds	r24, 0x0117
    15aa:	80 93 37 01 	sts	0x0137, r24
    15ae:	80 91 18 01 	lds	r24, 0x0118
    15b2:	80 93 38 01 	sts	0x0138, r24
    15b6:	80 91 19 01 	lds	r24, 0x0119
    15ba:	80 93 39 01 	sts	0x0139, r24
    15be:	80 91 1a 01 	lds	r24, 0x011A
    15c2:	80 93 3a 01 	sts	0x013A, r24
    15c6:	80 91 1b 01 	lds	r24, 0x011B
    15ca:	80 93 3b 01 	sts	0x013B, r24
		}
		
		if (vm == MAIN) {
    15ce:	80 91 53 01 	lds	r24, 0x0153
    15d2:	88 23       	and	r24, r24
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <main+0x5e0>
    15d6:	68 c1       	rjmp	.+720    	; 0x18a8 <main+0x8b0>

			/*
			 * Handle buttons
			 */

			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    15d8:	98 9b       	sbis	0x13, 0	; 19
    15da:	a7 c0       	rjmp	.+334    	; 0x172a <main+0x732>
    15dc:	90 91 14 01 	lds	r25, 0x0114
    15e0:	40 91 15 01 	lds	r20, 0x0115
    15e4:	60 91 16 01 	lds	r22, 0x0116
    15e8:	e0 91 17 01 	lds	r30, 0x0117
    15ec:	a0 91 18 01 	lds	r26, 0x0118
    15f0:	10 91 19 01 	lds	r17, 0x0119
    15f4:	f0 90 1a 01 	lds	r15, 0x011A
    15f8:	50 91 1b 01 	lds	r21, 0x011B
    15fc:	80 91 1c 01 	lds	r24, 0x011C
    1600:	20 91 1d 01 	lds	r18, 0x011D
    1604:	70 91 1e 01 	lds	r23, 0x011E
    1608:	f0 91 1f 01 	lds	r31, 0x011F
    160c:	00 91 20 01 	lds	r16, 0x0120
    1610:	d0 90 21 01 	lds	r13, 0x0121
    1614:	b0 90 22 01 	lds	r11, 0x0122
    1618:	a0 90 23 01 	lds	r10, 0x0123
    161c:	c9 2e       	mov	r12, r25
    161e:	c8 1a       	sub	r12, r24
    1620:	31 e0       	ldi	r19, 0x01	; 1
    1622:	9c 15       	cp	r25, r12
    1624:	08 f0       	brcs	.+2      	; 0x1628 <main+0x630>
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	84 2f       	mov	r24, r20
    162a:	82 1b       	sub	r24, r18
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	48 17       	cp	r20, r24
    1630:	08 f0       	brcs	.+2      	; 0x1634 <main+0x63c>
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	e8 2e       	mov	r14, r24
    1636:	e3 1a       	sub	r14, r19
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	8e 15       	cp	r24, r14
    163c:	08 f0       	brcs	.+2      	; 0x1640 <main+0x648>
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	29 2b       	or	r18, r25
    1642:	86 2f       	mov	r24, r22
    1644:	87 1b       	sub	r24, r23
    1646:	31 e0       	ldi	r19, 0x01	; 1
    1648:	68 17       	cp	r22, r24
    164a:	08 f0       	brcs	.+2      	; 0x164e <main+0x656>
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b8 2f       	mov	r27, r24
    1650:	b2 1b       	sub	r27, r18
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	8b 17       	cp	r24, r27
    1656:	08 f0       	brcs	.+2      	; 0x165a <main+0x662>
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	39 2b       	or	r19, r25
    165c:	8e 2f       	mov	r24, r30
    165e:	8f 1b       	sub	r24, r31
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	e8 17       	cp	r30, r24
    1664:	08 f0       	brcs	.+2      	; 0x1668 <main+0x670>
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	78 2f       	mov	r23, r24
    166a:	73 1b       	sub	r23, r19
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	87 17       	cp	r24, r23
    1670:	08 f0       	brcs	.+2      	; 0x1674 <main+0x67c>
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	29 2b       	or	r18, r25
    1676:	8a 2f       	mov	r24, r26
    1678:	80 1b       	sub	r24, r16
    167a:	31 e0       	ldi	r19, 0x01	; 1
    167c:	a8 17       	cp	r26, r24
    167e:	08 f0       	brcs	.+2      	; 0x1682 <main+0x68a>
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	68 2f       	mov	r22, r24
    1684:	62 1b       	sub	r22, r18
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	86 17       	cp	r24, r22
    168a:	08 f0       	brcs	.+2      	; 0x168e <main+0x696>
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	39 2b       	or	r19, r25
    1690:	81 2f       	mov	r24, r17
    1692:	8d 19       	sub	r24, r13
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	18 17       	cp	r17, r24
    1698:	08 f0       	brcs	.+2      	; 0x169c <main+0x6a4>
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	48 2f       	mov	r20, r24
    169e:	43 1b       	sub	r20, r19
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	84 17       	cp	r24, r20
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <main+0x6b0>
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	29 2b       	or	r18, r25
    16aa:	8f 2d       	mov	r24, r15
    16ac:	8b 19       	sub	r24, r11
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	f8 16       	cp	r15, r24
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <main+0x6be>
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	38 2f       	mov	r19, r24
    16b8:	32 1b       	sub	r19, r18
    16ba:	21 e0       	ldi	r18, 0x01	; 1
    16bc:	83 17       	cp	r24, r19
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <main+0x6ca>
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	92 2b       	or	r25, r18
    16c4:	5a 19       	sub	r21, r10
    16c6:	59 17       	cp	r21, r25
    16c8:	79 f4       	brne	.+30     	; 0x16e8 <main+0x6f0>
    16ca:	33 23       	and	r19, r19
    16cc:	69 f4       	brne	.+26     	; 0x16e8 <main+0x6f0>
    16ce:	44 23       	and	r20, r20
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <main+0x6f0>
    16d2:	66 23       	and	r22, r22
    16d4:	49 f4       	brne	.+18     	; 0x16e8 <main+0x6f0>
    16d6:	77 23       	and	r23, r23
    16d8:	39 f4       	brne	.+14     	; 0x16e8 <main+0x6f0>
    16da:	bb 23       	and	r27, r27
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <main+0x6f0>
    16de:	ee 20       	and	r14, r14
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <main+0x6f0>
    16e2:	fa ef       	ldi	r31, 0xFA	; 250
    16e4:	fc 15       	cp	r31, r12
    16e6:	08 f5       	brcc	.+66     	; 0x172a <main+0x732>
				change_upd_speed();
    16e8:	e5 d7       	rcall	.+4042   	; 0x26b4 <__data_load_end+0x6d2>
				debounce_a = clock();
    16ea:	80 91 14 01 	lds	r24, 0x0114
    16ee:	80 93 1c 01 	sts	0x011C, r24
    16f2:	80 91 15 01 	lds	r24, 0x0115
    16f6:	80 93 1d 01 	sts	0x011D, r24
    16fa:	80 91 16 01 	lds	r24, 0x0116
    16fe:	80 93 1e 01 	sts	0x011E, r24
    1702:	80 91 17 01 	lds	r24, 0x0117
    1706:	80 93 1f 01 	sts	0x011F, r24
    170a:	80 91 18 01 	lds	r24, 0x0118
    170e:	80 93 20 01 	sts	0x0120, r24
    1712:	80 91 19 01 	lds	r24, 0x0119
    1716:	80 93 21 01 	sts	0x0121, r24
    171a:	80 91 1a 01 	lds	r24, 0x011A
    171e:	80 93 22 01 	sts	0x0122, r24
    1722:	80 91 1b 01 	lds	r24, 0x011B
    1726:	80 93 23 01 	sts	0x0123, r24
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    172a:	99 9b       	sbis	0x13, 1	; 19
    172c:	a7 c0       	rjmp	.+334    	; 0x187c <main+0x884>
    172e:	90 91 14 01 	lds	r25, 0x0114
    1732:	40 91 15 01 	lds	r20, 0x0115
    1736:	60 91 16 01 	lds	r22, 0x0116
    173a:	e0 91 17 01 	lds	r30, 0x0117
    173e:	a0 91 18 01 	lds	r26, 0x0118
    1742:	10 91 19 01 	lds	r17, 0x0119
    1746:	f0 90 1a 01 	lds	r15, 0x011A
    174a:	50 91 1b 01 	lds	r21, 0x011B
    174e:	80 91 24 01 	lds	r24, 0x0124
    1752:	20 91 25 01 	lds	r18, 0x0125
    1756:	70 91 26 01 	lds	r23, 0x0126
    175a:	f0 91 27 01 	lds	r31, 0x0127
    175e:	00 91 28 01 	lds	r16, 0x0128
    1762:	d0 90 29 01 	lds	r13, 0x0129
    1766:	b0 90 2a 01 	lds	r11, 0x012A
    176a:	a0 90 2b 01 	lds	r10, 0x012B
    176e:	c9 2e       	mov	r12, r25
    1770:	c8 1a       	sub	r12, r24
    1772:	31 e0       	ldi	r19, 0x01	; 1
    1774:	9c 15       	cp	r25, r12
    1776:	08 f0       	brcs	.+2      	; 0x177a <main+0x782>
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	84 2f       	mov	r24, r20
    177c:	82 1b       	sub	r24, r18
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	48 17       	cp	r20, r24
    1782:	08 f0       	brcs	.+2      	; 0x1786 <main+0x78e>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	e8 2e       	mov	r14, r24
    1788:	e3 1a       	sub	r14, r19
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	8e 15       	cp	r24, r14
    178e:	08 f0       	brcs	.+2      	; 0x1792 <main+0x79a>
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	29 2b       	or	r18, r25
    1794:	86 2f       	mov	r24, r22
    1796:	87 1b       	sub	r24, r23
    1798:	31 e0       	ldi	r19, 0x01	; 1
    179a:	68 17       	cp	r22, r24
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <main+0x7a8>
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	b8 2f       	mov	r27, r24
    17a2:	b2 1b       	sub	r27, r18
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	8b 17       	cp	r24, r27
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <main+0x7b4>
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	39 2b       	or	r19, r25
    17ae:	8e 2f       	mov	r24, r30
    17b0:	8f 1b       	sub	r24, r31
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	e8 17       	cp	r30, r24
    17b6:	08 f0       	brcs	.+2      	; 0x17ba <main+0x7c2>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	78 2f       	mov	r23, r24
    17bc:	73 1b       	sub	r23, r19
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	87 17       	cp	r24, r23
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <main+0x7ce>
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	29 2b       	or	r18, r25
    17c8:	8a 2f       	mov	r24, r26
    17ca:	80 1b       	sub	r24, r16
    17cc:	31 e0       	ldi	r19, 0x01	; 1
    17ce:	a8 17       	cp	r26, r24
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <main+0x7dc>
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	68 2f       	mov	r22, r24
    17d6:	62 1b       	sub	r22, r18
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	86 17       	cp	r24, r22
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <main+0x7e8>
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	39 2b       	or	r19, r25
    17e2:	81 2f       	mov	r24, r17
    17e4:	8d 19       	sub	r24, r13
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	18 17       	cp	r17, r24
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <main+0x7f6>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	48 2f       	mov	r20, r24
    17f0:	43 1b       	sub	r20, r19
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	84 17       	cp	r24, r20
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <main+0x802>
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	29 2b       	or	r18, r25
    17fc:	8f 2d       	mov	r24, r15
    17fe:	8b 19       	sub	r24, r11
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	f8 16       	cp	r15, r24
    1804:	08 f0       	brcs	.+2      	; 0x1808 <main+0x810>
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	38 2f       	mov	r19, r24
    180a:	32 1b       	sub	r19, r18
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	83 17       	cp	r24, r19
    1810:	08 f0       	brcs	.+2      	; 0x1814 <main+0x81c>
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	92 2b       	or	r25, r18
    1816:	5a 19       	sub	r21, r10
    1818:	59 17       	cp	r21, r25
    181a:	79 f4       	brne	.+30     	; 0x183a <main+0x842>
    181c:	33 23       	and	r19, r19
    181e:	69 f4       	brne	.+26     	; 0x183a <main+0x842>
    1820:	44 23       	and	r20, r20
    1822:	59 f4       	brne	.+22     	; 0x183a <main+0x842>
    1824:	66 23       	and	r22, r22
    1826:	49 f4       	brne	.+18     	; 0x183a <main+0x842>
    1828:	77 23       	and	r23, r23
    182a:	39 f4       	brne	.+14     	; 0x183a <main+0x842>
    182c:	bb 23       	and	r27, r27
    182e:	29 f4       	brne	.+10     	; 0x183a <main+0x842>
    1830:	ee 20       	and	r14, r14
    1832:	19 f4       	brne	.+6      	; 0x183a <main+0x842>
    1834:	2a ef       	ldi	r18, 0xFA	; 250
    1836:	2c 15       	cp	r18, r12
    1838:	08 f5       	brcc	.+66     	; 0x187c <main+0x884>
				change_line_type();
    183a:	57 d7       	rcall	.+3758   	; 0x26ea <__data_load_end+0x708>
				debounce_b = clock();
    183c:	80 91 14 01 	lds	r24, 0x0114
    1840:	80 93 24 01 	sts	0x0124, r24
    1844:	80 91 15 01 	lds	r24, 0x0115
    1848:	80 93 25 01 	sts	0x0125, r24
    184c:	80 91 16 01 	lds	r24, 0x0116
    1850:	80 93 26 01 	sts	0x0126, r24
    1854:	80 91 17 01 	lds	r24, 0x0117
    1858:	80 93 27 01 	sts	0x0127, r24
    185c:	80 91 18 01 	lds	r24, 0x0118
    1860:	80 93 28 01 	sts	0x0128, r24
    1864:	80 91 19 01 	lds	r24, 0x0119
    1868:	80 93 29 01 	sts	0x0129, r24
    186c:	80 91 1a 01 	lds	r24, 0x011A
    1870:	80 93 2a 01 	sts	0x012A, r24
    1874:	80 91 1b 01 	lds	r24, 0x011B
    1878:	80 93 2b 01 	sts	0x012B, r24
			}
			draw_interface();
    187c:	2f d9       	rcall	.-3490   	; 0xadc <draw_interface>
			draw_values_line(ltp);
    187e:	80 91 c7 00 	lds	r24, 0x00C7
    1882:	bd d9       	rcall	.-3206   	; 0xbfe <draw_values_line>
			draw_update_speed_indicator(usp);
    1884:	80 91 3c 01 	lds	r24, 0x013C
    1888:	00 da       	rcall	.-3072   	; 0xc8a <draw_update_speed_indicator>
			draw_bar(ltp, shown_value);
    188a:	60 91 49 01 	lds	r22, 0x0149
    188e:	70 91 4a 01 	lds	r23, 0x014A
    1892:	80 91 c7 00 	lds	r24, 0x00C7
    1896:	b5 d8       	rcall	.-3734   	; 0xa02 <draw_bar>
			draw_current_value(shown_value);
    1898:	80 91 49 01 	lds	r24, 0x0149
    189c:	90 91 4a 01 	lds	r25, 0x014A
    18a0:	ac da       	rcall	.-2728   	; 0xdfa <draw_current_value>
			draw_chart(ltp);
    18a2:	80 91 c7 00 	lds	r24, 0x00C7
    18a6:	70 d8       	rcall	.-3872   	; 0x988 <draw_chart>
		}
		
		if (vm == HOOKS) {
    18a8:	80 91 53 01 	lds	r24, 0x0153
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <main+0x8ba>
    18b0:	c0 c2       	rjmp	.+1408   	; 0x1e32 <main+0xe3a>
			lcd_put_string(1, 1, "Hooks", BLACK);
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	4d e6       	ldi	r20, 0x6D	; 109
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	21 e0       	ldi	r18, 0x01	; 1
    18ba:	6e da       	rcall	.-2852   	; 0xd98 <lcd_put_string>
    18bc:	00 e0       	ldi	r16, 0x00	; 0
    18be:	10 e0       	ldi	r17, 0x00	; 0
			for (int i = 0; i < HOOKS_N; i++) {
				print_hook(i);
    18c0:	c8 01       	movw	r24, r16
    18c2:	01 db       	rcall	.-2558   	; 0xec6 <print_hook>
			draw_chart(ltp);
		}
		
		if (vm == HOOKS) {
			lcd_put_string(1, 1, "Hooks", BLACK);
			for (int i = 0; i < HOOKS_N; i++) {
    18c4:	0f 5f       	subi	r16, 0xFF	; 255
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	04 30       	cpi	r16, 0x04	; 4
    18ca:	11 05       	cpc	r17, r1
    18cc:	c9 f7       	brne	.-14     	; 0x18c0 <main+0x8c8>
				print_hook(i);
			}
			
			if (io_read(A) && clock() - debounce_a > DEBOUNCE_T) {
    18ce:	98 9b       	sbis	0x13, 0	; 19
    18d0:	fa c0       	rjmp	.+500    	; 0x1ac6 <main+0xace>
    18d2:	70 91 14 01 	lds	r23, 0x0114
    18d6:	a0 91 15 01 	lds	r26, 0x0115
    18da:	b0 91 16 01 	lds	r27, 0x0116
    18de:	10 91 17 01 	lds	r17, 0x0117
    18e2:	00 91 18 01 	lds	r16, 0x0118
    18e6:	f0 90 19 01 	lds	r15, 0x0119
    18ea:	e0 90 1a 01 	lds	r14, 0x011A
    18ee:	90 90 1b 01 	lds	r9, 0x011B
    18f2:	80 91 1c 01 	lds	r24, 0x011C
    18f6:	20 91 1d 01 	lds	r18, 0x011D
    18fa:	30 91 1e 01 	lds	r19, 0x011E
    18fe:	40 91 1f 01 	lds	r20, 0x011F
    1902:	50 91 20 01 	lds	r21, 0x0120
    1906:	d0 90 21 01 	lds	r13, 0x0121
    190a:	b0 90 22 01 	lds	r11, 0x0122
    190e:	a0 90 23 01 	lds	r10, 0x0123
    1912:	c7 2e       	mov	r12, r23
    1914:	c8 1a       	sub	r12, r24
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	7c 15       	cp	r23, r12
    191a:	08 f0       	brcs	.+2      	; 0x191e <main+0x926>
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	8a 2f       	mov	r24, r26
    1920:	82 1b       	sub	r24, r18
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	a8 17       	cp	r26, r24
    1926:	08 f0       	brcs	.+2      	; 0x192a <main+0x932>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	f8 2f       	mov	r31, r24
    192c:	f9 1b       	sub	r31, r25
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	8f 17       	cp	r24, r31
    1932:	08 f0       	brcs	.+2      	; 0x1936 <main+0x93e>
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	29 2b       	or	r18, r25
    1938:	8b 2f       	mov	r24, r27
    193a:	83 1b       	sub	r24, r19
    193c:	31 e0       	ldi	r19, 0x01	; 1
    193e:	b8 17       	cp	r27, r24
    1940:	08 f0       	brcs	.+2      	; 0x1944 <main+0x94c>
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	e8 2f       	mov	r30, r24
    1946:	e2 1b       	sub	r30, r18
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	8e 17       	cp	r24, r30
    194c:	08 f0       	brcs	.+2      	; 0x1950 <main+0x958>
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	39 2b       	or	r19, r25
    1952:	81 2f       	mov	r24, r17
    1954:	84 1b       	sub	r24, r20
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	18 17       	cp	r17, r24
    195a:	08 f0       	brcs	.+2      	; 0x195e <main+0x966>
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	68 2f       	mov	r22, r24
    1960:	63 1b       	sub	r22, r19
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	86 17       	cp	r24, r22
    1966:	08 f0       	brcs	.+2      	; 0x196a <main+0x972>
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	29 2b       	or	r18, r25
    196c:	80 2f       	mov	r24, r16
    196e:	85 1b       	sub	r24, r21
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	08 17       	cp	r16, r24
    1974:	08 f0       	brcs	.+2      	; 0x1978 <main+0x980>
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	58 2f       	mov	r21, r24
    197a:	52 1b       	sub	r21, r18
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	85 17       	cp	r24, r21
    1980:	08 f0       	brcs	.+2      	; 0x1984 <main+0x98c>
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	39 2b       	or	r19, r25
    1986:	8f 2d       	mov	r24, r15
    1988:	8d 19       	sub	r24, r13
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	f8 16       	cp	r15, r24
    198e:	08 f0       	brcs	.+2      	; 0x1992 <main+0x99a>
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	48 2f       	mov	r20, r24
    1994:	43 1b       	sub	r20, r19
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	84 17       	cp	r24, r20
    199a:	08 f0       	brcs	.+2      	; 0x199e <main+0x9a6>
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	29 2b       	or	r18, r25
    19a0:	8e 2d       	mov	r24, r14
    19a2:	8b 19       	sub	r24, r11
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	e8 16       	cp	r14, r24
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <main+0x9b4>
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	38 2f       	mov	r19, r24
    19ae:	32 1b       	sub	r19, r18
    19b0:	21 e0       	ldi	r18, 0x01	; 1
    19b2:	83 17       	cp	r24, r19
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <main+0x9c0>
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	92 2b       	or	r25, r18
    19ba:	89 2d       	mov	r24, r9
    19bc:	8a 19       	sub	r24, r10
    19be:	89 17       	cp	r24, r25
    19c0:	81 f4       	brne	.+32     	; 0x19e2 <main+0x9ea>
    19c2:	33 23       	and	r19, r19
    19c4:	71 f4       	brne	.+28     	; 0x19e2 <main+0x9ea>
    19c6:	44 23       	and	r20, r20
    19c8:	61 f4       	brne	.+24     	; 0x19e2 <main+0x9ea>
    19ca:	55 23       	and	r21, r21
    19cc:	51 f4       	brne	.+20     	; 0x19e2 <main+0x9ea>
    19ce:	66 23       	and	r22, r22
    19d0:	41 f4       	brne	.+16     	; 0x19e2 <main+0x9ea>
    19d2:	ee 23       	and	r30, r30
    19d4:	31 f4       	brne	.+12     	; 0x19e2 <main+0x9ea>
    19d6:	ff 23       	and	r31, r31
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <main+0x9ea>
    19da:	6a ef       	ldi	r22, 0xFA	; 250
    19dc:	6c 15       	cp	r22, r12
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <main+0x9ea>
    19e0:	72 c0       	rjmp	.+228    	; 0x1ac6 <main+0xace>
				if (hook_edit_stage == 0) {
    19e2:	80 91 55 01 	lds	r24, 0x0155
    19e6:	88 23       	and	r24, r24
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <main+0xa00>
					if (hook_m_ptr > 0) hook_m_ptr--;
    19ea:	80 91 54 01 	lds	r24, 0x0154
    19ee:	88 23       	and	r24, r24
    19f0:	19 f0       	breq	.+6      	; 0x19f8 <main+0xa00>
    19f2:	81 50       	subi	r24, 0x01	; 1
    19f4:	80 93 54 01 	sts	0x0154, r24
				}
				if (hook_edit_stage == 1) {
    19f8:	80 91 55 01 	lds	r24, 0x0155
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	89 f4       	brne	.+34     	; 0x1a22 <main+0xa2a>
					if (hooks[hook_m_ptr].op < 4) hooks[hook_m_ptr].op++;
    1a00:	80 91 54 01 	lds	r24, 0x0154
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	fc 01       	movw	r30, r24
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	e8 0f       	add	r30, r24
    1a12:	f9 1f       	adc	r31, r25
    1a14:	e4 53       	subi	r30, 0x34	; 52
    1a16:	fe 4f       	sbci	r31, 0xFE	; 254
    1a18:	80 81       	ld	r24, Z
    1a1a:	84 30       	cpi	r24, 0x04	; 4
    1a1c:	10 f4       	brcc	.+4      	; 0x1a22 <main+0xa2a>
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
				}
				if (hook_edit_stage == 2) {
    1a22:	80 91 55 01 	lds	r24, 0x0155
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	a1 f4       	brne	.+40     	; 0x1a52 <main+0xa5a>
					if (hooks[hook_m_ptr].value < 99) hooks[hook_m_ptr].value++;
    1a2a:	80 91 54 01 	lds	r24, 0x0154
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	fc 01       	movw	r30, r24
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	e8 0f       	add	r30, r24
    1a3c:	f9 1f       	adc	r31, r25
    1a3e:	e4 53       	subi	r30, 0x34	; 52
    1a40:	fe 4f       	sbci	r31, 0xFE	; 254
    1a42:	81 81       	ldd	r24, Z+1	; 0x01
    1a44:	92 81       	ldd	r25, Z+2	; 0x02
    1a46:	83 36       	cpi	r24, 0x63	; 99
    1a48:	91 05       	cpc	r25, r1
    1a4a:	1c f4       	brge	.+6      	; 0x1a52 <main+0xa5a>
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	92 83       	std	Z+2, r25	; 0x02
    1a50:	81 83       	std	Z+1, r24	; 0x01
				}
				if (hook_edit_stage == 3) {
    1a52:	80 91 55 01 	lds	r24, 0x0155
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	89 f4       	brne	.+34     	; 0x1a7c <main+0xa84>
					if (hooks[hook_m_ptr].act < 2) hooks[hook_m_ptr].act++;
    1a5a:	80 91 54 01 	lds	r24, 0x0154
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	e8 0f       	add	r30, r24
    1a6c:	f9 1f       	adc	r31, r25
    1a6e:	e4 53       	subi	r30, 0x34	; 52
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	83 81       	ldd	r24, Z+3	; 0x03
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	10 f4       	brcc	.+4      	; 0x1a7c <main+0xa84>
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	83 83       	std	Z+3, r24	; 0x03
				}
				if (hook_edit_stage == 4) {
    1a7c:	80 91 55 01 	lds	r24, 0x0155
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	89 f4       	brne	.+34     	; 0x1aa6 <main+0xaae>
					if (hooks[hook_m_ptr].port < W) hooks[hook_m_ptr].port++;
    1a84:	80 91 54 01 	lds	r24, 0x0154
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	e8 0f       	add	r30, r24
    1a96:	f9 1f       	adc	r31, r25
    1a98:	e4 53       	subi	r30, 0x34	; 52
    1a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9c:	84 81       	ldd	r24, Z+4	; 0x04
    1a9e:	87 30       	cpi	r24, 0x07	; 7
    1aa0:	10 f4       	brcc	.+4      	; 0x1aa6 <main+0xaae>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	84 83       	std	Z+4, r24	; 0x04
				}
				debounce_a = clock();
    1aa6:	70 93 1c 01 	sts	0x011C, r23
    1aaa:	a0 93 1d 01 	sts	0x011D, r26
    1aae:	b0 93 1e 01 	sts	0x011E, r27
    1ab2:	10 93 1f 01 	sts	0x011F, r17
    1ab6:	00 93 20 01 	sts	0x0120, r16
    1aba:	f0 92 21 01 	sts	0x0121, r15
    1abe:	e0 92 22 01 	sts	0x0122, r14
    1ac2:	90 92 23 01 	sts	0x0123, r9
			}
			if (io_read(B) && clock() - debounce_b > DEBOUNCE_T) {
    1ac6:	99 9b       	sbis	0x13, 1	; 19
    1ac8:	fb c0       	rjmp	.+502    	; 0x1cc0 <main+0xcc8>
    1aca:	70 91 14 01 	lds	r23, 0x0114
    1ace:	a0 91 15 01 	lds	r26, 0x0115
    1ad2:	b0 91 16 01 	lds	r27, 0x0116
    1ad6:	10 91 17 01 	lds	r17, 0x0117
    1ada:	00 91 18 01 	lds	r16, 0x0118
    1ade:	f0 90 19 01 	lds	r15, 0x0119
    1ae2:	e0 90 1a 01 	lds	r14, 0x011A
    1ae6:	90 90 1b 01 	lds	r9, 0x011B
    1aea:	80 91 24 01 	lds	r24, 0x0124
    1aee:	20 91 25 01 	lds	r18, 0x0125
    1af2:	30 91 26 01 	lds	r19, 0x0126
    1af6:	40 91 27 01 	lds	r20, 0x0127
    1afa:	50 91 28 01 	lds	r21, 0x0128
    1afe:	d0 90 29 01 	lds	r13, 0x0129
    1b02:	b0 90 2a 01 	lds	r11, 0x012A
    1b06:	a0 90 2b 01 	lds	r10, 0x012B
    1b0a:	c7 2e       	mov	r12, r23
    1b0c:	c8 1a       	sub	r12, r24
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	7c 15       	cp	r23, r12
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <main+0xb1e>
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	8a 2f       	mov	r24, r26
    1b18:	82 1b       	sub	r24, r18
    1b1a:	21 e0       	ldi	r18, 0x01	; 1
    1b1c:	a8 17       	cp	r26, r24
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <main+0xb2a>
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	f8 2f       	mov	r31, r24
    1b24:	f9 1b       	sub	r31, r25
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	8f 17       	cp	r24, r31
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <main+0xb36>
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	29 2b       	or	r18, r25
    1b30:	8b 2f       	mov	r24, r27
    1b32:	83 1b       	sub	r24, r19
    1b34:	31 e0       	ldi	r19, 0x01	; 1
    1b36:	b8 17       	cp	r27, r24
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <main+0xb44>
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	e8 2f       	mov	r30, r24
    1b3e:	e2 1b       	sub	r30, r18
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	8e 17       	cp	r24, r30
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <main+0xb50>
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	39 2b       	or	r19, r25
    1b4a:	81 2f       	mov	r24, r17
    1b4c:	84 1b       	sub	r24, r20
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	18 17       	cp	r17, r24
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <main+0xb5e>
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	68 2f       	mov	r22, r24
    1b58:	63 1b       	sub	r22, r19
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	86 17       	cp	r24, r22
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <main+0xb6a>
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	29 2b       	or	r18, r25
    1b64:	80 2f       	mov	r24, r16
    1b66:	85 1b       	sub	r24, r21
    1b68:	31 e0       	ldi	r19, 0x01	; 1
    1b6a:	08 17       	cp	r16, r24
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <main+0xb78>
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	58 2f       	mov	r21, r24
    1b72:	52 1b       	sub	r21, r18
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	85 17       	cp	r24, r21
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <main+0xb84>
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	39 2b       	or	r19, r25
    1b7e:	8f 2d       	mov	r24, r15
    1b80:	8d 19       	sub	r24, r13
    1b82:	21 e0       	ldi	r18, 0x01	; 1
    1b84:	f8 16       	cp	r15, r24
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <main+0xb92>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	43 1b       	sub	r20, r19
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	84 17       	cp	r24, r20
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <main+0xb9e>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	29 2b       	or	r18, r25
    1b98:	8e 2d       	mov	r24, r14
    1b9a:	8b 19       	sub	r24, r11
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	e8 16       	cp	r14, r24
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <main+0xbac>
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	38 2f       	mov	r19, r24
    1ba6:	32 1b       	sub	r19, r18
    1ba8:	21 e0       	ldi	r18, 0x01	; 1
    1baa:	83 17       	cp	r24, r19
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <main+0xbb8>
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	92 2b       	or	r25, r18
    1bb2:	89 2d       	mov	r24, r9
    1bb4:	8a 19       	sub	r24, r10
    1bb6:	89 17       	cp	r24, r25
    1bb8:	81 f4       	brne	.+32     	; 0x1bda <main+0xbe2>
    1bba:	33 23       	and	r19, r19
    1bbc:	71 f4       	brne	.+28     	; 0x1bda <main+0xbe2>
    1bbe:	44 23       	and	r20, r20
    1bc0:	61 f4       	brne	.+24     	; 0x1bda <main+0xbe2>
    1bc2:	55 23       	and	r21, r21
    1bc4:	51 f4       	brne	.+20     	; 0x1bda <main+0xbe2>
    1bc6:	66 23       	and	r22, r22
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <main+0xbe2>
    1bca:	ee 23       	and	r30, r30
    1bcc:	31 f4       	brne	.+12     	; 0x1bda <main+0xbe2>
    1bce:	ff 23       	and	r31, r31
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <main+0xbe2>
    1bd2:	8a ef       	ldi	r24, 0xFA	; 250
    1bd4:	8c 15       	cp	r24, r12
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <main+0xbe2>
    1bd8:	73 c0       	rjmp	.+230    	; 0x1cc0 <main+0xcc8>
				if (hook_edit_stage == 0) {
    1bda:	80 91 55 01 	lds	r24, 0x0155
    1bde:	88 23       	and	r24, r24
    1be0:	39 f4       	brne	.+14     	; 0x1bf0 <main+0xbf8>
					if (hook_m_ptr < 3) hook_m_ptr++;
    1be2:	80 91 54 01 	lds	r24, 0x0154
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <main+0xbf8>
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	80 93 54 01 	sts	0x0154, r24
				}
				if (hook_edit_stage == 1) {
    1bf0:	80 91 55 01 	lds	r24, 0x0155
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	89 f4       	brne	.+34     	; 0x1c1a <main+0xc22>
					if (hooks[hook_m_ptr].op > 0) hooks[hook_m_ptr].op--;
    1bf8:	80 91 54 01 	lds	r24, 0x0154
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	fc 01       	movw	r30, r24
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	e8 0f       	add	r30, r24
    1c0a:	f9 1f       	adc	r31, r25
    1c0c:	e4 53       	subi	r30, 0x34	; 52
    1c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c10:	80 81       	ld	r24, Z
    1c12:	88 23       	and	r24, r24
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <main+0xc22>
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	80 83       	st	Z, r24
				}
				if (hook_edit_stage == 2) {
    1c1a:	80 91 55 01 	lds	r24, 0x0155
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	a9 f4       	brne	.+42     	; 0x1c4c <main+0xc54>
					if (hooks[hook_m_ptr].value > -55) hooks[hook_m_ptr].value--;
    1c22:	80 91 54 01 	lds	r24, 0x0154
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	e8 0f       	add	r30, r24
    1c34:	f9 1f       	adc	r31, r25
    1c36:	e4 53       	subi	r30, 0x34	; 52
    1c38:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3a:	81 81       	ldd	r24, Z+1	; 0x01
    1c3c:	92 81       	ldd	r25, Z+2	; 0x02
    1c3e:	2f ef       	ldi	r18, 0xFF	; 255
    1c40:	8a 3c       	cpi	r24, 0xCA	; 202
    1c42:	92 07       	cpc	r25, r18
    1c44:	1c f0       	brlt	.+6      	; 0x1c4c <main+0xc54>
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	92 83       	std	Z+2, r25	; 0x02
    1c4a:	81 83       	std	Z+1, r24	; 0x01
				}
				if (hook_edit_stage == 3) {
    1c4c:	80 91 55 01 	lds	r24, 0x0155
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	89 f4       	brne	.+34     	; 0x1c76 <main+0xc7e>
					if (hooks[hook_m_ptr].act > 0) hooks[hook_m_ptr].act--;
    1c54:	80 91 54 01 	lds	r24, 0x0154
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	e8 0f       	add	r30, r24
    1c66:	f9 1f       	adc	r31, r25
    1c68:	e4 53       	subi	r30, 0x34	; 52
    1c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6c:	83 81       	ldd	r24, Z+3	; 0x03
    1c6e:	88 23       	and	r24, r24
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <main+0xc7e>
    1c72:	81 50       	subi	r24, 0x01	; 1
    1c74:	83 83       	std	Z+3, r24	; 0x03
				}
				if (hook_edit_stage == 4) {
    1c76:	80 91 55 01 	lds	r24, 0x0155
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	89 f4       	brne	.+34     	; 0x1ca0 <main+0xca8>
					if (hooks[hook_m_ptr].port > Z) hooks[hook_m_ptr].port--;
    1c7e:	80 91 54 01 	lds	r24, 0x0154
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fc 01       	movw	r30, r24
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	e8 0f       	add	r30, r24
    1c90:	f9 1f       	adc	r31, r25
    1c92:	e4 53       	subi	r30, 0x34	; 52
    1c94:	fe 4f       	sbci	r31, 0xFE	; 254
    1c96:	84 81       	ldd	r24, Z+4	; 0x04
    1c98:	85 30       	cpi	r24, 0x05	; 5
    1c9a:	10 f0       	brcs	.+4      	; 0x1ca0 <main+0xca8>
    1c9c:	81 50       	subi	r24, 0x01	; 1
    1c9e:	84 83       	std	Z+4, r24	; 0x04
				}
				debounce_b = clock();
    1ca0:	70 93 24 01 	sts	0x0124, r23
    1ca4:	a0 93 25 01 	sts	0x0125, r26
    1ca8:	b0 93 26 01 	sts	0x0126, r27
    1cac:	10 93 27 01 	sts	0x0127, r17
    1cb0:	00 93 28 01 	sts	0x0128, r16
    1cb4:	f0 92 29 01 	sts	0x0129, r15
    1cb8:	e0 92 2a 01 	sts	0x012A, r14
    1cbc:	90 92 2b 01 	sts	0x012B, r9
			}
			if (io_read(C) && clock() - debounce_c > DEBOUNCE_T) {
    1cc0:	9a 9b       	sbis	0x13, 2	; 19
    1cc2:	b1 c0       	rjmp	.+354    	; 0x1e26 <main+0xe2e>
    1cc4:	60 91 14 01 	lds	r22, 0x0114
    1cc8:	70 91 15 01 	lds	r23, 0x0115
    1ccc:	a0 91 16 01 	lds	r26, 0x0116
    1cd0:	b0 91 17 01 	lds	r27, 0x0117
    1cd4:	10 91 18 01 	lds	r17, 0x0118
    1cd8:	00 91 19 01 	lds	r16, 0x0119
    1cdc:	f0 90 1a 01 	lds	r15, 0x011A
    1ce0:	90 90 1b 01 	lds	r9, 0x011B
    1ce4:	80 91 2c 01 	lds	r24, 0x012C
    1ce8:	20 91 2d 01 	lds	r18, 0x012D
    1cec:	30 91 2e 01 	lds	r19, 0x012E
    1cf0:	40 91 2f 01 	lds	r20, 0x012F
    1cf4:	50 91 30 01 	lds	r21, 0x0130
    1cf8:	d0 90 31 01 	lds	r13, 0x0131
    1cfc:	b0 90 32 01 	lds	r11, 0x0132
    1d00:	a0 90 33 01 	lds	r10, 0x0133
    1d04:	c6 2e       	mov	r12, r22
    1d06:	c8 1a       	sub	r12, r24
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	6c 15       	cp	r22, r12
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <main+0xd18>
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	87 2f       	mov	r24, r23
    1d12:	82 1b       	sub	r24, r18
    1d14:	21 e0       	ldi	r18, 0x01	; 1
    1d16:	78 17       	cp	r23, r24
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <main+0xd24>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	e8 2e       	mov	r14, r24
    1d1e:	e9 1a       	sub	r14, r25
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	8e 15       	cp	r24, r14
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <main+0xd30>
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	29 2b       	or	r18, r25
    1d2a:	8a 2f       	mov	r24, r26
    1d2c:	83 1b       	sub	r24, r19
    1d2e:	31 e0       	ldi	r19, 0x01	; 1
    1d30:	a8 17       	cp	r26, r24
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <main+0xd3e>
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f8 2f       	mov	r31, r24
    1d38:	f2 1b       	sub	r31, r18
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	8f 17       	cp	r24, r31
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <main+0xd4a>
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	39 2b       	or	r19, r25
    1d44:	8b 2f       	mov	r24, r27
    1d46:	84 1b       	sub	r24, r20
    1d48:	21 e0       	ldi	r18, 0x01	; 1
    1d4a:	b8 17       	cp	r27, r24
    1d4c:	08 f0       	brcs	.+2      	; 0x1d50 <main+0xd58>
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	e8 2f       	mov	r30, r24
    1d52:	e3 1b       	sub	r30, r19
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	8e 17       	cp	r24, r30
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <main+0xd64>
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	29 2b       	or	r18, r25
    1d5e:	81 2f       	mov	r24, r17
    1d60:	85 1b       	sub	r24, r21
    1d62:	31 e0       	ldi	r19, 0x01	; 1
    1d64:	18 17       	cp	r17, r24
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <main+0xd72>
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	58 2f       	mov	r21, r24
    1d6c:	52 1b       	sub	r21, r18
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	85 17       	cp	r24, r21
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <main+0xd7e>
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	39 2b       	or	r19, r25
    1d78:	80 2f       	mov	r24, r16
    1d7a:	8d 19       	sub	r24, r13
    1d7c:	21 e0       	ldi	r18, 0x01	; 1
    1d7e:	08 17       	cp	r16, r24
    1d80:	08 f0       	brcs	.+2      	; 0x1d84 <main+0xd8c>
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	48 2f       	mov	r20, r24
    1d86:	43 1b       	sub	r20, r19
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	84 17       	cp	r24, r20
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <main+0xd98>
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	29 2b       	or	r18, r25
    1d92:	8f 2d       	mov	r24, r15
    1d94:	8b 19       	sub	r24, r11
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	f8 16       	cp	r15, r24
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <main+0xda6>
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	38 2f       	mov	r19, r24
    1da0:	32 1b       	sub	r19, r18
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	83 17       	cp	r24, r19
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <main+0xdb2>
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	92 2b       	or	r25, r18
    1dac:	89 2d       	mov	r24, r9
    1dae:	8a 19       	sub	r24, r10
    1db0:	89 17       	cp	r24, r25
    1db2:	79 f4       	brne	.+30     	; 0x1dd2 <main+0xdda>
    1db4:	33 23       	and	r19, r19
    1db6:	69 f4       	brne	.+26     	; 0x1dd2 <main+0xdda>
    1db8:	44 23       	and	r20, r20
    1dba:	59 f4       	brne	.+22     	; 0x1dd2 <main+0xdda>
    1dbc:	55 23       	and	r21, r21
    1dbe:	49 f4       	brne	.+18     	; 0x1dd2 <main+0xdda>
    1dc0:	ee 23       	and	r30, r30
    1dc2:	39 f4       	brne	.+14     	; 0x1dd2 <main+0xdda>
    1dc4:	ff 23       	and	r31, r31
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <main+0xdda>
    1dc8:	ee 20       	and	r14, r14
    1dca:	19 f4       	brne	.+6      	; 0x1dd2 <main+0xdda>
    1dcc:	8a ef       	ldi	r24, 0xFA	; 250
    1dce:	8c 15       	cp	r24, r12
    1dd0:	50 f5       	brcc	.+84     	; 0x1e26 <main+0xe2e>
				hook_edit_stage++;
    1dd2:	20 91 55 01 	lds	r18, 0x0155
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	20 93 55 01 	sts	0x0155, r18
				if ((hook_edit_stage > 3 && hooks[hook_m_ptr].act == nop) || (hook_edit_stage > 4 && hooks[hook_m_ptr].act != nop)) hook_edit_stage = 0;
    1ddc:	24 30       	cpi	r18, 0x04	; 4
    1dde:	98 f0       	brcs	.+38     	; 0x1e06 <main+0xe0e>
    1de0:	80 91 54 01 	lds	r24, 0x0154
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	fc 01       	movw	r30, r24
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e8 0f       	add	r30, r24
    1df2:	f9 1f       	adc	r31, r25
    1df4:	e4 53       	subi	r30, 0x34	; 52
    1df6:	fe 4f       	sbci	r31, 0xFE	; 254
    1df8:	83 81       	ldd	r24, Z+3	; 0x03
    1dfa:	88 23       	and	r24, r24
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <main+0xe0a>
    1dfe:	25 30       	cpi	r18, 0x05	; 5
    1e00:	10 f0       	brcs	.+4      	; 0x1e06 <main+0xe0e>
    1e02:	10 92 55 01 	sts	0x0155, r1
				debounce_c = clock();
    1e06:	60 93 2c 01 	sts	0x012C, r22
    1e0a:	70 93 2d 01 	sts	0x012D, r23
    1e0e:	a0 93 2e 01 	sts	0x012E, r26
    1e12:	b0 93 2f 01 	sts	0x012F, r27
    1e16:	10 93 30 01 	sts	0x0130, r17
    1e1a:	00 93 31 01 	sts	0x0131, r16
    1e1e:	f0 92 32 01 	sts	0x0132, r15
    1e22:	90 92 33 01 	sts	0x0133, r9
			}
			
			draw_hook_ptr(hook_m_ptr + 1, hook_edit_stage);
    1e26:	80 91 54 01 	lds	r24, 0x0154
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	60 91 55 01 	lds	r22, 0x0155
    1e30:	20 d5       	rcall	.+2624   	; 0x2872 <__data_load_end+0x890>
		}
		
		if (vm == CREDITS) {
    1e32:	80 91 53 01 	lds	r24, 0x0153
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	c1 f4       	brne	.+48     	; 0x1e6a <main+0xe72>
			lcd_put_string(1, 1, "Credits", BLACK);
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	43 e7       	ldi	r20, 0x73	; 115
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	21 e0       	ldi	r18, 0x01	; 1
    1e44:	a9 d7       	rcall	.+3922   	; 0x2d98 <__data_load_end+0xdb6>
			lcd_put_string(1, 16, "Ivanov Vlad", BLACK);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	60 e1       	ldi	r22, 0x10	; 16
    1e4a:	4b e7       	ldi	r20, 0x7B	; 123
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	21 e0       	ldi	r18, 0x01	; 1
    1e50:	a3 d7       	rcall	.+3910   	; 0x2d98 <__data_load_end+0xdb6>
			lcd_put_string(1, 25, "Kurapov Ivan", BLACK);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	69 e1       	ldi	r22, 0x19	; 25
    1e56:	47 e8       	ldi	r20, 0x87	; 135
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	9d d7       	rcall	.+3898   	; 0x2d98 <__data_load_end+0xdb6>
			lcd_put_string(1, 40, "ITMO, 2020", BLACK);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	68 e2       	ldi	r22, 0x28	; 40
    1e62:	44 e9       	ldi	r20, 0x94	; 148
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	21 e0       	ldi	r18, 0x01	; 1
    1e68:	97 d7       	rcall	.+3886   	; 0x2d98 <__data_load_end+0xdb6>
		}
		
		lcd_update();
    1e6a:	08 d1       	rcall	.+528    	; 0x207c <__data_load_end+0x9a>
    1e6c:	1d c9       	rjmp	.-3526   	; 0x10a8 <main+0xb0>

00001e6e <__divmodhi4>:
    1e6e:	97 fb       	bst	r25, 7
    1e70:	09 2e       	mov	r0, r25
    1e72:	07 26       	eor	r0, r23
    1e74:	0a d0       	rcall	.+20     	; 0x1e8a <__divmodhi4_neg1>
    1e76:	77 fd       	sbrc	r23, 7
    1e78:	04 d0       	rcall	.+8      	; 0x1e82 <__divmodhi4_neg2>
    1e7a:	0c d0       	rcall	.+24     	; 0x1e94 <__udivmodhi4>
    1e7c:	06 d0       	rcall	.+12     	; 0x1e8a <__divmodhi4_neg1>
    1e7e:	00 20       	and	r0, r0
    1e80:	1a f4       	brpl	.+6      	; 0x1e88 <__divmodhi4_exit>

00001e82 <__divmodhi4_neg2>:
    1e82:	70 95       	com	r23
    1e84:	61 95       	neg	r22
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255

00001e88 <__divmodhi4_exit>:
    1e88:	08 95       	ret

00001e8a <__divmodhi4_neg1>:
    1e8a:	f6 f7       	brtc	.-4      	; 0x1e88 <__divmodhi4_exit>
    1e8c:	90 95       	com	r25
    1e8e:	81 95       	neg	r24
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	08 95       	ret

00001e94 <__udivmodhi4>:
    1e94:	aa 1b       	sub	r26, r26
    1e96:	bb 1b       	sub	r27, r27
    1e98:	51 e1       	ldi	r21, 0x11	; 17
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <__udivmodhi4_ep>

00001e9c <__udivmodhi4_loop>:
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	a6 17       	cp	r26, r22
    1ea2:	b7 07       	cpc	r27, r23
    1ea4:	10 f0       	brcs	.+4      	; 0x1eaa <__udivmodhi4_ep>
    1ea6:	a6 1b       	sub	r26, r22
    1ea8:	b7 0b       	sbc	r27, r23

00001eaa <__udivmodhi4_ep>:
    1eaa:	88 1f       	adc	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	5a 95       	dec	r21
    1eb0:	a9 f7       	brne	.-22     	; 0x1e9c <__udivmodhi4_loop>
    1eb2:	80 95       	com	r24
    1eb4:	90 95       	com	r25
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	08 95       	ret

00001ebc <itoa>:
    1ebc:	fb 01       	movw	r30, r22
    1ebe:	9f 01       	movw	r18, r30
    1ec0:	e8 94       	clt
    1ec2:	42 30       	cpi	r20, 0x02	; 2
    1ec4:	bc f0       	brlt	.+46     	; 0x1ef4 <itoa+0x38>
    1ec6:	45 32       	cpi	r20, 0x25	; 37
    1ec8:	ac f4       	brge	.+42     	; 0x1ef4 <itoa+0x38>
    1eca:	4a 30       	cpi	r20, 0x0A	; 10
    1ecc:	29 f4       	brne	.+10     	; 0x1ed8 <itoa+0x1c>
    1ece:	97 fb       	bst	r25, 7
    1ed0:	1e f4       	brtc	.+6      	; 0x1ed8 <itoa+0x1c>
    1ed2:	90 95       	com	r25
    1ed4:	81 95       	neg	r24
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	64 2f       	mov	r22, r20
    1eda:	77 27       	eor	r23, r23
    1edc:	db df       	rcall	.-74     	; 0x1e94 <__udivmodhi4>
    1ede:	80 5d       	subi	r24, 0xD0	; 208
    1ee0:	8a 33       	cpi	r24, 0x3A	; 58
    1ee2:	0c f0       	brlt	.+2      	; 0x1ee6 <itoa+0x2a>
    1ee4:	89 5d       	subi	r24, 0xD9	; 217
    1ee6:	81 93       	st	Z+, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	a9 f7       	brne	.-22     	; 0x1ed8 <itoa+0x1c>
    1eee:	16 f4       	brtc	.+4      	; 0x1ef4 <itoa+0x38>
    1ef0:	5d e2       	ldi	r21, 0x2D	; 45
    1ef2:	51 93       	st	Z+, r21
    1ef4:	10 82       	st	Z, r1
    1ef6:	c9 01       	movw	r24, r18
    1ef8:	08 c0       	rjmp	.+16     	; 0x1f0a <strrev>

00001efa <__eerd_byte_m8>:
    1efa:	e1 99       	sbic	0x1c, 1	; 28
    1efc:	fe cf       	rjmp	.-4      	; 0x1efa <__eerd_byte_m8>
    1efe:	9f bb       	out	0x1f, r25	; 31
    1f00:	8e bb       	out	0x1e, r24	; 30
    1f02:	e0 9a       	sbi	0x1c, 0	; 28
    1f04:	99 27       	eor	r25, r25
    1f06:	8d b3       	in	r24, 0x1d	; 29
    1f08:	08 95       	ret

00001f0a <strrev>:
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	67 2f       	mov	r22, r23
    1f10:	71 91       	ld	r23, Z+
    1f12:	77 23       	and	r23, r23
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <strrev+0x4>
    1f16:	32 97       	sbiw	r30, 0x02	; 2
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <strrev+0x18>
    1f1a:	7c 91       	ld	r23, X
    1f1c:	6d 93       	st	X+, r22
    1f1e:	70 83       	st	Z, r23
    1f20:	62 91       	ld	r22, -Z
    1f22:	ae 17       	cp	r26, r30
    1f24:	bf 07       	cpc	r27, r31
    1f26:	c8 f3       	brcs	.-14     	; 0x1f1a <strrev+0x10>
    1f28:	08 95       	ret

00001f2a <_exit>:
    1f2a:	f8 94       	cli

00001f2c <__stop_program>:
    1f2c:	ff cf       	rjmp	.-2      	; 0x1f2c <__stop_program>
